{"version":3,"sources":["web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf","src/state/types.ts","src/constants/config.ts","src/constants/universities.ts","src/model/utils.ts","src/state/auth/reducer.ts","src/constants/profile-constants.ts","src/validators/index.ts","src/constants/translations.ts","src/localization.ts","src/model/languages.ts","src/state/settings/reducer.ts","src/state/profile/reducer.ts","src/state/matching/reducer.ts","src/navigation/utils.ts","src/state/navigation-middleware.ts","src/state/store.ts","src/api/utils.ts","src/state/profile/actions.ts","src/constants/themes.ts","src/styles/utils.ts","src/screens/NotFoundScreen.tsx","src/state/auth/actions.ts","src/screens/ValidateEmailScreen.tsx","src/screens/ValidationEmailSentScreen.tsx","src/navigation/linking-config.ts","src/components/LoginTabBar.tsx","src/components/InputLabel.tsx","src/components/InputErrorText.tsx","src/components/ValidatedTextInput.tsx","src/components/FormTextInput.tsx","src/state/settings/actions.ts","src/styles/forms.ts","src/components/forms/FormError.tsx","src/components/forms/LoginForm.tsx","src/components/forms/ForgotPasswordForm.tsx","src/screens/TabLoginScreen.tsx","src/components/forms/SignupForm.tsx","src/screens/TabSignupFormScreen.tsx","src/navigation/LoginNavigator.tsx","src/components/LogOutButton.tsx","src/screens/TabNotImplementedScreen.tsx","src/styles/picker.ts","src/components/MultiPicker.tsx","src/components/EducationFieldPicker.tsx","src/components/DegreeToggle.tsx","src/components/RoleToggle.tsx","src/components/StaffRoleToggle.tsx","src/components/GenderToggle.tsx","src/components/BirthDatePicker.tsx","src/components/AvatarEditButton.tsx","src/components/forms/FormRow.tsx","src/components/FormattedDate.tsx","src/components/NationalityPicker.tsx","src/components/FormattedNationality.tsx","src/components/FormattedUniversity.tsx","src/components/InterestsPicker.tsx","src/components/LanguagePicker.tsx","src/components/LanguageLevelPicker.tsx","src/components/SpokenLanguagesInput.tsx","src/components/forms/EditProfileForm.tsx","src/screens/TabProfileScreen.tsx","src/components/ProfilePreview.tsx","src/screens/TabMatchingScreen.tsx","src/api/dto.ts","src/components/MultiUniversityPicker.tsx","src/state/matching/actions.ts","src/styles/toggles.ts","src/components/DegreeToggleMulti.tsx","src/components/MultiLanguagePicker.tsx","src/screens/MatchFilteringScreen.tsx","src/navigation/MainNavigator.tsx","src/styles/onboarding.ts","src/screens/onboarding/OnboardingSlide.tsx","src/screens/onboarding/OnboardingNameScreen.tsx","src/components/BirthDateControl.tsx","src/components/NationalityControl.tsx","src/screens/onboarding/OnboardingPersonalInfoScreen.tsx","src/screens/onboarding/OnboardingLanguageScreen.tsx","src/screens/onboarding/OnboardingInterestsScreen.tsx","src/screens/onboarding/OnboardingRoleScreen.tsx","src/components/GenderToggleMulti.tsx","src/components/RoleToggleMulti.tsx","src/styles/tooltips.ts","src/components/CustomTooltip.tsx","src/components/OfferControl.tsx","src/screens/onboarding/helpers.tsx","src/screens/onboarding/OnboardingOffersScreen1.tsx","src/screens/onboarding/OnboardingOffersScreen2.tsx","src/screens/onboarding/OnboardingOffersScreen3.tsx","src/screens/onboarding/OnboardingRoleSpecificScreen1.tsx","src/screens/onboarding/OnboardingRoleSpecificScreen2.tsx","src/components/modals/CustomModal.tsx","src/components/modals/TOSDeclinedModal.tsx","src/components/TextLink.tsx","src/screens/onboarding/OnboardingTosScreen.tsx","src/screens/onboarding/OnboardingPrivacyScreen.tsx","src/screens/onboarding/index.ts","src/navigation/OnboardingNavigator.tsx","src/navigation/index.tsx","src/components/providers/ConnectedThemeProvider.tsx","src/App.tsx","src/hooks/useCachedResources.ts","src/hooks/useColorScheme.web.ts"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports","AUTH_ACTION_TYPES","SETTINGS_ACTION_TYPES","PROFILE_ACTION_TYPES","MATCHING_ACTION_TYPES","BACKEND_URL","PARTNER_UNIVERSITIES","key","domain","country","extractNamesFromEmail","email","splitName","split","capitalize","str","length","toUpperCase","slice","firstname","lastname","getUniversityFromEmail","trim","find","uni","initialState","authenticated","token","connecting","validated","verificationToken","registerEmail","registerFailure","registerErrors","validatedEmail","loginErrors","onboarded","onboarding","birthdate","gender","nationality","role","degree","staffRole","languages","offerValues","interestIds","EDUCATION_FIELDS","DEGREES","LANGUAGE_LEVELS","ROLES","STAFF_ROLES","GENDERS","VALID_EMAIL_DOMAINS","map","VALIDATOR_EMAIL_SIGNUP","Yup","required","test","value","undefined","some","endsWith","VALIDATOR_PASSWORD_SIGNUP","min","matches","VALIDATOR_PASSWORD_REPEAT","oneOf","VALIDATOR_EMAIL_LOGIN","VALIDATOR_PASSWORD_LOGIN","VALIDATOR_FIRSTNAME","VALIDATOR_LASTNAME","VALIDATOR_ONBOARDING_BIRTHDATE","nullable","VALIDATOR_ONBOARDING_GENDER","VALIDATOR_ONBOARDING_NATIONALITY","VALIDATOR_ONBOARDING_DEGREE","VALIDATOR_ONBOARDING_LANGUAGES","en","welcome","picker","callToAction","login","tablogin","tabsignup","emailAddress","password","passwordRepeat","send","forgotPassword","newPassword","forgotPasswordExplanation","cancel","signupWelcome","tos","modal","disclaimer1","disclaimer2","decline","accept","readMore","privacy","emailNotificationsLabel","emailValidation","validating","success","createAccount","validation","atLeastOne","addAtLeastOne","invalid","invalidDomain","tooShort","noDigit","noUpperCase","noLowerCase","noSymbol","repeatWrong","multiple","pageNotFound","pageDoesntExist","goHome","tabs","discover","matching","messaging","profile","notifications","myProfile","editProfile","educationFieldsPicker","placeholder","searchPlaceholder","educationFields","levelOfStudy","degrees","bsc1","bsc2","bsc3","m1","m2","phd","search","selectCountry","countryPickerLanguageCode","roles","student","staff","staffRoles","teaching","researcher","supporting","administrative","technical","ambassador","other","genders","male","female","dateOfBirth","months","0","1","2","3","4","5","6","7","8","9","10","11","fieldsOfEducation","apply","universities","universitiesPicker","logOut","name","title","subtitle","personalInfo","language","interests","roleSpecific1","offers1","offers2","offers3","spokenLanguages","languagePicker","placeholderSingle","placeholderMultiple","languageLevelPicker","languageLevels","a1","a2","b1","b2","c1","c2","native","languageNames","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","id","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rc","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","chooseInterests","interestsPicker","interestNames","offers","help","signup","SUPPORTED_LOCALES","getDefaultLocale","l","Localization","LANGUAGES_CODES","getLocalizedLanguageItems","locale","translations","code","label","theme","localizedLanguageItems","user","active","firstName","lastName","university","Date","avatarUri","fetchedProfiles","fetchingProfiles","fetchingPage","filters","rootNavigationRef","React","rootNavigate","route","current","navigate","rootReducer","combineReducers","auth","state","action","type","REGISTER_BEGIN","REGISTER_FAILURE","errors","REGISTER_SUCCESS","VALIDATE_ACCOUNT_SUCCESS","VALIDATE_ACCOUNT_FAILURE","LOG_IN_BEGIN","LOG_IN_FAILURE","LOG_IN_SUCCESS","names","LOG_OUT","SET_ONBOARDING_VALUES","values","SET_ONBOARDING_OFFER_VALUE","allowFemale","allowMale","allowOther","allowStaff","allowStudent","settings","SET_THEME","SET_LOCALE","PROFILE_SET_FIELDS","fields","LOAD_PROFILE_OFFERS_SUCCESS","LOAD_PROFILE_INTERESTS_SUCCESS","sort","a","b","FETCH_PROFILES_BEGIN","FETCH_PROFILES_FAILURE","FETCH_PROFILES_SUCCESS","profiles","concat","SET_OFFER_FILTER","offerId","SET_FILTERS","RESET_MATCHING_FILTERS","univ","createStore","applyMiddleware","thunk","store","next","getState","log","PROFILE_CREATE_SUCCESS","encodeRequestParams","args","keys","Object","encodeURIComponent","join","requestBackend","endpoint","async","method","params","body","verbose","headers","Accept","Authorization","accessToken","formattedParams","JSON","stringify","fetch","response","json","codes","createProfile","dispatch","loadProfileOffersSuccess","loadProfileInterestsSuccess","fetchProfiles","page","limit","level","fetchProfilesSuccess","data","fetchProfilesFailure","light","text","textLight","textInverted","background","accent","accentSlight","accentSecondary","accentTernary","tint","actionNeutral","okay","tabIconDefault","tabIconSelected","componentBorder","dark","preTheme","generator","styles","themes","forEach","NotFoundScreen","this","props","navigation","themedStyles","View","style","container","Text","i18n","t","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","withTheme","registerBegin","requestRegister","registerSuccess","loginBegin","requestLogin","payload","requestValidateAccount","validationToken","validateAccountSuccess","validateAccountFailure","setOnboardingValues","reduxConnector","connect","ValidateEmailScreen","Platform","OS","Linking","getInitialURL","url","wrapper","ActivityIndicator","size","successText","width","height","marginVertical","textAlign","lineHeight","ValidationEmailSentScreen","description","okButton","prefixes","config","screens","LoginScreen","LoginForm","ForgotPassword","SignupForm","MainScreen","TabDiscover","TabDiscoverScreen","TabMatching","TabMatchingScreen","MAtchFilteringScren","TabMessaging","TabMessagingScreen","TabProfile","TabProfileScreen","TabNotifications","TabNotificationsScreen","TabBarComponent","index","isFocused","event","emit","target","canPreventDefault","defaultPrevented","descriptors","position","tabBarWrapper","tabBar","routes","options","toLowerCase","inputRange","_","i","opacity","Animated","interpolate","outputRange","tabButton","tabButtonBg","accessibilityRole","accessibilityLabel","tabBarAccessibilityLabel","testID","tabBarTestID","onLongPress","tabButtonText","tabButtonTextFocused","Component","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","maxWidth","flexDirection","letterSpacing","textTransform","waveImageStyle","bottom","margin","InputLabel","otherProps","children","InputErrorText","errorStr","marginBottom","ValidatedTextInput","focused","showErrorText","wrapperStyle","untouched","errorStyle","validStyle","focusedStyle","errorTextStyle","labelStyle","onBlur","onFocus","e","setState","defaultProps","FormTextInput","field","touched","handleChange","handleBlur","onChangeText","formStyle","inputErrorText","inputRow","actionRow","buttonMajor","borderRadius","buttonMajorText","getLoginTextInputsStyleProps","wrapperVerticalMargin","outline","commonStyle","textInputWrapper","textInput","paddingHorizontal","borderWidth","textInputError","borderBottomWidth","borderBottomColor","textInputValid","placeholderTextColor","loginTabsStyles","formWrapper","FormError","LoginFormSchema","shape","themeName","remoteErrors","LoginFormComponent","setFieldValue","oldProps","onSuccessfulSubmit","initialValues","validationSchema","validateOnBlur","onSubmit","submit","formikProps","handleSubmit","textInputProps","keyboardType","autoCompleteType","secureTextEntry","loginButton","disabled","forgotPwdLink","forgotPasswordText","setTheme","ForgotPasswordFormSchema","ForgotPasswordForm","titleWrapper","submitForm","formikCfg","goBack","buttonCancel","buttonSend","marginLeft","marginRight","LoginTabComponent","KeyboardAvoidingView","behavior","Math","round","random","toJSON","profileOffers","educationField","ForgotPasswordTabComponent","SubTabLogin","SubTabForgotPassword","SignupFormSchema","Alert","alert","validateOnChange","createAccountButton","inlineInputs","inlineInputLeft","inlineInputRight","contentContainerStyle","LoginTabStack","createStackNavigator","SignupTabStack","Tab","createMaterialTopTabNavigator","LoginTabNavigator","Navigator","initialRouteName","Screen","component","headerShown","SignupTabNavigator","TabSignupFormScreen","LoginNavigator","LoginTabBar","LogOutButton","onLogOut","TabNotImplementedScreen","FontAwesome5","constructionIcon","separator","logoutButton","pickerStyles","overlay","overflow","dropdownWrapper","dropdownContainerStyle","dropdownStyle","dropdownItemStyle","dropdownActiveItemStyle","dropdownActiveLabelStyle","dropdownLabelStyle","okButtonText","openButton","borderStyle","borderColor","openButtonText","selectedItemView","MultiPicker","tempSelected","items","Map","open","dropdownWrapperHeight","has","get","set","genLabel","selected","updateItems","onChange","multipleText","searchablePlaceholder","showSelected","viewProps","selectedItems","toString","val","numberOfLines","overlayStyle","isVisible","onRequestClose","close","onBackdropPress","onLayout","nativeEvent","layout","searchable","defaultValue","onChangeItem","scrollViewProps","keyboardShouldPersistTaps","showArrow","dropDownMaxHeight","containerStyle","itemStyle","activeItemStyle","activeLabelStyle","EducationFieldPicker","DegreeToggle","buttonLabels","d","idx","onUpdate","selectedIndex","indexOf","buttons","onSelect","r","StaffRoleToggle","pickerItems","Picker","Item","selectedValue","onValueChange","GenderToggle","BirthDatePicker","showModal","hideModal","onHide","date","maxDate","now","setFullYear","getFullYear","minimumDate","maximumDate","mode","AvatarEditButton","ensurePermission","Permissions","status","showPicker","ImagePicker","mediaTypes","All","allowsEditing","aspect","quality","result","cancelled","onPictureSelected","uri","MaterialIcons","buttonStyle","right","FormRowComponent","renderModalContent","modalTouchable","setModal","activeOpacity","modalWrapper","modalLabel","renderInput","modalErrorText","modalActions","modalCancel","modalActionText","modalOk","modalOpen","initialValue","validate","validator","validateSync","setError","err","display","overrideModal","noModal","locked","cardWrapper","cardContent","cardLabel","rightIconContainer","rightIcon","Modal","transparent","visible","animationType","minHeight","FormattedDate","localizedMonth","getMonth","formattedDate","getDate","NationalityPicker","countryCode","filterProps","withFlag","withFilter","withEmoji","cca2","onClose","translation","containerButtonStyle","pickerContainerButton","FormattedNationality","countryName","updateCountryName","getCountryInfoAsync","prevProps","flagSize","FormattedUniversity","allInterests","updateValues","interest","forceUpdate","interestId","languageItems","LanguagePicker","single","Array","isArray","pickerItem","pickerLabel","arrowSize","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","LanguageLevelPicker","item","pickerContainer","SpokenLanguagesInput","addRow","computeErrors","hasErrors","filter","splice","rows","rowContainer","inputRowContainer","pickerStyle","inputs","languageCodes","setLanguageCode","levelPicker","setLanguageLevel","removeRow","deleteIcon","errorRowContainer","canAddMore","plusButtonWrapper","plusButton","flexGrow","marginHorizontal","FormFieldSpacer","EditProfileForm","onFieldChanged","textInputStyleProps","outlineColor","screenWrapper","topView","rounded","source","universityContainer","ScrollView","scrollWrapper","keyboardVerticalOffset","FormRow","autoFocus","hide","alignSelf","paddingTop","paddingLeft","avatarAccessory","textShadowRadius","setProfileFields","ProfilePreview","expanded","removed","ReAnimated","Value","PROFILE_PREVIEW_COLLAPSED_HEIGHT","x","y","timing","toValue","PROFILE_PREVIEW_EXPANDED_HEIGHT","duration","easing","Easing","elastic","start","out","linear","setTimeout","collapse","expand","onExpand","Swipeable","swipeableContainer","childrenContainerStyle","swipeable","onSwipeableRightWillOpen","onSwipeLeft","remove","onSwipeableLeftWillOpen","onSwipeRight","renderRightActions","progressAnimatedValue","dragAnimatedValue","swipeAction","swipeActionRight","swipeActionContent","swipeActionContentRight","swipeActionText","renderLeftActions","swipeActionLeft","swipeActionContentLeft","useNativeAnimations","toggleExpanded","touchable","avatarContainer","avatar","infoContainer","infoText","paddingRight","sideMargin","fontFamily","actionContainer","OfferCategory","hiddenProfiles","scrollViewRef","previewComponents","isNotHidden","scroll","scrollTo","animated","ref","scroller","scrollToOverflowEnabled","onScroll","layoutMeasurement","contentOffset","distanceToBottom","contentSize","matchContainer","topBar","flexBasis","univKey","setMatchingFilters","getToggleStyleProps","nobuttonBariant","innerBorderStyle","buttonContainerStyle","textStyle","selectedButtonStyle","selectedTextStyle","noButtonVariant","styleProps","selectMultiple","selectedIndexes","MultiLanguagePicker","languageId","Separator","MatchFilteringScreen","categories","offerSections","category","sectionContainer","sectionTitle","o","entryContainer","entryLabel","Switch","setOfferFilter","twoLineEntryContainer","TabNavigator","createBottomTabNavigator","TabBarIcon","TabDiscoverStack","TabDiscoverNavigator","headerTitle","TabMatchingStack","TabMatchingNavigator","matchingHeaderRight","FontAwesome","headerLeft","headerTitleAlign","headerRight","headerBackImage","TabMessagingStack","TabMessagingNavigator","TabNotificationsStack","TabNotificationsNavigator","TabProfileStack","TabProfileNavigator","tabBarOptions","activeTintColor","tabBarIcon","onboardingStyle","slideWrapper","header","slideContentWrapper","slideNavWrapper","navButton","navButtonText","tosSlideStyle","actionsWrapper","actionButton","actionButtonTextDecline","actionButtonTextAccept","readMoreText","OnboardingSlide","hideNavNext","hasNext","hasPrevious","navigateRight","previous","onboardingState","VALIDATION_SCHEMA","OnboardingNameScreen","getOnboardingTextInputsStyleProps","BirthDateControl","button","buttonOk","dateText","NationalityControl","OnboardingRoleScreen","roleButton","roleButtonIconStudent","roleButtonTextStudent","roleButtonIconStaff","roleButtonTextStaff","studentColor","staffColor","common","roleButtonText","roleButtonIcon","tooltipStyles","alignContent","CustomTooltip","popover","OfferControl","offer","push","helpIcon","offerName","buttonsWrapper","allowChooseGender","offerValueChange","allowChooseRole","createOfferControls","setOnboardingOfferValue","finishOnboarding","createProfileDto","base","onboardingStateToDto","Meet","Discover","Collaborate","OnboardingRoleSpecificScreen1","studentThemedStyles","staffThemedStyles","icons","buttonIcon","buttonText","isStudent","studentRender","staffRender","OnboardingRoleSpecificScreen2","CustomModal","modalVisible","modalViewStyle","centeredView","setModalVisible","modalView","renderContent","TOSDeclinedModal","actionButtonsWrapper","TouchableHighlight","actionButtonCancel","actionText","actionButtonDecline","TextLink","textProps","OnboardingTosScreen","declined","OnboardingPrivacyScreen","ONBOARDING_SCREENS","OnboardingPersonalInfoScreen","OnboardingLanguageScreen","OnboardingInterestsScreen","OnboardingOffersScreen1","OnboardingOffersScreen2","OnboardingOffersScreen3","ONBOARDING_ORDER","OnboardingStack","OnboardingNavigator","ComponentClass","showLabel","showIcon","springConfig","stiffness","damping","mass","swipeEnabled","Stack","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","screenOptions","MainNavigator","currentTheme","YellowBox","ignoreWarnings","registerRootComponent","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","fallbacks","StatusBar"],"mappings":"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","file":"static/js/app.6ec66979.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {Action, AnyAction} from \"redux\";\nimport {ThemeKey} from \"../types\";\nimport {\n    CreateProfileDto,\n    InterestDto,\n    OfferDto,\n    OfferValueDto,\n    SpokenLanguageDto,\n    TokenDto,\n    UserDto,\n    UserProfileDto,\n} from \"../api/dto\";\nimport {Degree, Gender, Role, StaffRole} from \"../constants/profile-constants\";\nimport {CountryCode} from \"../model/country-codes\";\nimport {SupportedLocale} from \"../localization\";\n\nexport type OnboardingState = {\n    firstname: string;\n    lastname: string;\n    birthdate: Date | null;\n    gender: Gender | null;\n    nationality: CountryCode | null;\n    role: Role | null;\n    degree: Degree | null;\n    staffRole: StaffRole | null;\n    languages: SpokenLanguageDto[];\n    interestIds: string[];\n    offerValues: {[key: string]: OfferValueDto};\n};\n\nexport type AuthState = {\n    authenticated: boolean;\n    validated: boolean;\n    token: null | TokenDto;\n    connecting: boolean;\n    registerEmail: string;\n    registerFailure: boolean;\n    registerErrors: string[];\n    loginErrors: string[];\n    validatedEmail: string | null;\n    verificationToken: string | null; // TODO temporary\n    onboarded: boolean;\n    onboarding: OnboardingState;\n};\n\nexport type SettingsState = {\n    theme: ThemeKey;\n    locale: SupportedLocale;\n    localizedLanguageItems: {value: string; label: string}[];\n};\n\nexport type ProfileState = {\n    user: UserDto;\n    offers: OfferDto[];\n    interests: InterestDto[];\n    fetchedProfiles: UserProfileDto[];\n    fetchingProfiles: boolean;\n    fetchingPage: number;\n};\n\nexport type MatchingFiltersState = {\n    offers: {[key: string]: boolean};\n    universities: string[];\n    degrees: Degree[];\n    languages: string[];\n};\n\nexport type MatchingState = {\n    filters: MatchingFiltersState;\n};\n\nexport type AppState = {\n    auth: AuthState;\n    settings: SettingsState;\n    profile: ProfileState;\n    matching: MatchingState;\n};\n\n// Shortcut type for redux-thunk actions (async actions)\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppState, unknown, Action<string>>;\n\n// Shortcut type for redux-thunk dispatch (cast dispatch function to this for async actions)\nexport type MyThunkDispatch = ThunkDispatch<AppState, void, AnyAction>;\n\n/*### AUTH ###*/\n\nexport enum AUTH_ACTION_TYPES {\n    REGISTER_BEGIN = \"AUTH/REGISTER_BEGIN\",\n    REGISTER_SUCCESS = \"AUTH/REGISTER_SUCCESS\",\n    REGISTER_FAILURE = \"AUTH/REGISTER_FAILURE\",\n    LOG_IN_BEGIN = \"AUTH/LOG_IN_BEGIN\",\n    LOG_IN_SUCCESS = \"AUTH/LOG_IN_SUCCESS\",\n    LOG_IN_FAILURE = \"AUTH/LOG_IN_FAILURE\",\n    LOG_OUT = \"AUTH/LOG_OUT\",\n    VALIDATE_ACCOUNT = \"AUTH/VALIDATE_ACCOUNT\",\n    VALIDATE_ACCOUNT_SUCCESS = \"AUTH/VALIDATE_ACCOUNT_SUCCESS\",\n    VALIDATE_ACCOUNT_FAILURE = \"AUTH/VALIDATE_ACCOUNT_FAILURE\",\n    SET_ONBOARDING_VALUES = \"AUTH/SET_ONBOARDING_VALUES\",\n    SET_ONBOARDING_OFFER_VALUE = \"AUTH/SET_ONBOARDING_OFFER_VALUE\",\n}\n\nexport type RegisterBeginAction = {\n    type: string;\n    email: string;\n    password: string;\n};\n\nexport type RegisterSuccessAction = {\n    type: string;\n    user: UserDto;\n};\n\nexport type RegisterFailureAction = {\n    type: string;\n    errors: string[];\n};\n\nexport type LogInBeginAction = {\n    type: string;\n    email: string;\n    password: string;\n};\n\nexport type LogInSuccessAction = {\n    type: string;\n    token: TokenDto;\n    user: UserDto;\n};\n\nexport type LogInFailureAction = {\n    type: string;\n    errors: string[];\n};\n\nexport type LogOutAction = {\n    type: string;\n};\n\nexport type ValidateAccountSuccessAction = {\n    type: string;\n    email: string;\n};\n\nexport type ValidateAccountFailureAction = {\n    type: string;\n    errors: string[];\n};\n\nexport type SetOnboardingValuesAction = {\n    type: string;\n    values: Partial<OnboardingState>;\n};\n\nexport type SetOnboardingOfferValueAction = {\n    type: string;\n    id: string;\n    value: Partial<OfferValueDto>;\n};\n\nexport type AuthAction =\n    | RegisterBeginAction\n    | RegisterSuccessAction\n    | RegisterFailureAction\n    | LogInBeginAction\n    | LogInSuccessAction\n    | LogInFailureAction\n    | LogOutAction\n    | ValidateAccountSuccessAction\n    | ValidateAccountFailureAction\n    | SetOnboardingValuesAction\n    | SetOnboardingOfferValueAction;\n\n/*### SETTINGS ###*/\n\nexport enum SETTINGS_ACTION_TYPES {\n    SET_THEME = \"SETTINGS/SET_THEME\",\n    SET_LOCALE = \"SETTINGS/SET_LOCALE\",\n}\n\nexport type SetThemeAction = {\n    type: string;\n    theme: ThemeKey;\n};\n\nexport type SetLocaleAction = {\n    type: string;\n    locale: SupportedLocale;\n};\n\nexport type SettingsAction = SetThemeAction | SetLocaleAction;\n\n/*### PROFILE ###*/\n\nexport enum PROFILE_ACTION_TYPES {\n    LOAD_USER_PROFILE = \"PROFILE/LOAD_USER_PROFILE\",\n    LOAD_PROFILE_OFFERS = \"LOAD_PROFILE_OFFERS\",\n    LOAD_PROFILE_OFFERS_SUCCESS = \"LOAD_PROFILE_OFFERS_SUCCESS\",\n    LOAD_PROFILE_INTERESTS = \"LOAD_PROFILE_INTERESTS\",\n    LOAD_PROFILE_INTERESTS_SUCCESS = \"LOAD_PROFILE_INTERESTS_SUCCESS\",\n    PROFILE_SET_FIELDS = \"PROFILE/SET_FIELDS\",\n    PROFILE_CREATE = \"PROFILE/CREATE\",\n    PROFILE_CREATE_SUCCESS = \"PROFILE/CREATE_SUCCESS\",\n    FETCH_PROFILES_BEGIN = \"PROFILE/FETCH_PROFILES_BEGIN\",\n    FETCH_PROFILES = \"PROFILE/FETCH_PROFILES\",\n    FETCH_PROFILES_SUCCESS = \"PROFILE/FETCH_PROFILES_SUCCESS\",\n    FETCH_PROFILES_FAILURE = \"PROFILE/FETCH_PROFILES_FAILURE\",\n}\n\nexport type LoadUserProfileAction = {\n    type: string;\n    id: string;\n};\n\nexport type SetProfileFieldsAction = {\n    type: string;\n    fields: Partial<UserProfileDto>;\n};\n\nexport type CreateProfileAction = {\n    type: string;\n    profile: CreateProfileDto;\n};\n\nexport type CreateProfileSuccessAction = {\n    type: string;\n};\n\nexport type LoadProfileOffersAction = {\n    type: string;\n};\n\nexport type LoadProfileOffersSuccessAction = {\n    type: string;\n    offers: OfferDto[];\n};\n\nexport type LoadProfileInterestsAction = {\n    type: string;\n};\n\nexport type LoadProfileInterestsSuccessAction = {\n    type: string;\n    interests: InterestDto[];\n};\n\nexport type BeginFetchProfilesAction = {\n    type: string;\n};\n\nexport type FetchProfilesFailureAction = {\n    type: string;\n};\n\nexport type FetchProfilesAction = {\n    type: string;\n};\n\nexport type FetchProfilesSuccessAction = {\n    type: string;\n    profiles: UserProfileDto[];\n};\n\nexport type ProfileAction =\n    | SetProfileFieldsAction\n    | CreateProfileAction\n    | CreateProfileSuccessAction\n    | LoadProfileOffersAction\n    | LoadProfileOffersSuccessAction\n    | LoadProfileInterestsAction\n    | LoadProfileInterestsSuccessAction\n    | BeginFetchProfilesAction\n    | FetchProfilesAction\n    | FetchProfilesSuccessAction\n    | FetchProfilesFailureAction;\n\n/*### MATCHING ###*/\n\nexport enum MATCHING_ACTION_TYPES {\n    SET_FILTERS = \"MATCHING/SET_FILTERS\",\n    SET_OFFER_FILTER = \"MATCHING/SET_OFFER_FILTER\",\n    RESET_MATCHING_FILTERS = \"MATCHING/RESET_MATCHING_FILTERS\",\n}\n\nexport type SetOfferFilterAction = {\n    type: string;\n    offerId: string;\n    value: boolean;\n};\n\nexport type ResetMatchingFiltersAction = {\n    type: string;\n};\n\nexport type SetMatchingFiltersAction = {\n    type: string;\n    filters: Partial<MatchingFiltersState>;\n};\n\nexport type MatchingAction = SetOfferFilterAction | SetMatchingFiltersAction | ResetMatchingFiltersAction;\n","export const BACKEND_URL = \"http://ec2-35-180-16-83.eu-west-3.compute.amazonaws.com:3000\";\n","import {CountryCode} from \"../model/country-codes\";\n\nexport type UniversityKey = \"univ-cadiz\" | \"univ-brest\" | \"univ-gdansk\" | \"univ-malta\" | \"univ-kiel\" | \"univ-split\";\n\nexport type University = {\n    key: UniversityKey;\n    domain: string;\n    country: CountryCode;\n};\n\n// TODO this data should come from the server so it is easy to add universities (no app update required)\n// List of partner universities\nexport const PARTNER_UNIVERSITIES = [\n    {\n        key: \"univ-cadiz\",\n        domain: \"uca.es\",\n        country: \"ES\",\n    },\n    {\n        key: \"univ-brest\",\n        domain: \"univ-brest.fr\",\n        country: \"FR\",\n    },\n    {\n        key: \"univ-gdansk\",\n        domain: \"ug.edu.pl\",\n        country: \"PL\",\n    },\n    {\n        key: \"univ-malta\",\n        domain: \"um.edu.mt\",\n        country: \"MT\",\n    },\n    {\n        key: \"univ-kiel\",\n        domain: \"kms.uni-kiel.de\",\n        country: \"DE\",\n    },\n    {\n        key: \"univ-split\",\n        domain: \"unist.hr\",\n        country: \"HR\",\n    },\n] as University[];\n","import {PARTNER_UNIVERSITIES, University} from \"../constants/universities\";\n\n/**\n * Attempts to extract names from a given email.\n * @param email A valid email address.\n * @returns the first and last name if they were successfuly extracted, null otherwise.\n */\nexport function extractNamesFromEmail(email: string): {firstname: string; lastname: string} | null {\n    const splitName = email.split(\"@\")[0].split(\".\");\n    const capitalize = (str: string) => (str.length == 0 ? str : str[0].toUpperCase() + str.slice(1));\n    return splitName.length >= 2\n        ? {\n              firstname: capitalize(splitName[0]),\n              lastname: capitalize(splitName[1]),\n          }\n        : null;\n}\n\n/**\n * Extracts a partner university from a given email.\n * @param email A valid email address.\n * @returns a University object if one matches the given email, null otherwise.\n */\nexport function getUniversityFromEmail(email: string): University | null {\n    const split = email.split(\"@\");\n    if (split.length > 0) {\n        const domain = split[1].trim();\n        return PARTNER_UNIVERSITIES.find((uni: University) => uni.domain == domain) || null;\n    }\n    return null;\n}\n","import {extractNamesFromEmail} from \"../../model/utils\";\nimport {\n    AuthState,\n    AuthAction,\n    LogInSuccessAction,\n    RegisterFailureAction,\n    LogInFailureAction,\n    RegisterBeginAction,\n    RegisterSuccessAction,\n    ValidateAccountSuccessAction,\n    SetOnboardingValuesAction,\n    AUTH_ACTION_TYPES,\n    SetOnboardingOfferValueAction,\n} from \"../types\";\n\nexport const initialState: AuthState = {\n    authenticated: false,\n    token: null,\n    connecting: false,\n    validated: false,\n    verificationToken: null, // TODO temporary\n    registerEmail: \"\",\n    registerFailure: false,\n    registerErrors: [],\n    validatedEmail: null,\n    loginErrors: [],\n    onboarded: false,\n    onboarding: {\n        firstname: \"\",\n        lastname: \"\",\n        birthdate: null,\n        gender: null,\n        nationality: null,\n        role: null,\n        degree: null,\n        staffRole: null,\n        languages: [],\n        offerValues: {},\n        interestIds: [],\n    },\n};\n\nexport const authReducer = (state: AuthState = initialState, action: AuthAction): AuthState => {\n    switch (action.type) {\n        case AUTH_ACTION_TYPES.REGISTER_BEGIN: {\n            const {email} = <RegisterBeginAction>action;\n            return {\n                ...state,\n                registerFailure: false,\n                registerErrors: [],\n                registerEmail: email,\n            };\n        }\n        case AUTH_ACTION_TYPES.REGISTER_FAILURE: {\n            const {errors} = <RegisterFailureAction>action;\n            return {...state, registerFailure: true, registerErrors: errors};\n        }\n        case AUTH_ACTION_TYPES.REGISTER_SUCCESS: {\n            const {\n                user: {verificationToken, onboarded},\n            } = <RegisterSuccessAction>action;\n            return {\n                ...state,\n                registerFailure: false,\n                registerErrors: [],\n                verificationToken,\n                onboarded,\n            };\n        }\n        case AUTH_ACTION_TYPES.VALIDATE_ACCOUNT_SUCCESS: {\n            const {email} = <ValidateAccountSuccessAction>action;\n            return {...state, validated: true, validatedEmail: email};\n        }\n        case AUTH_ACTION_TYPES.VALIDATE_ACCOUNT_FAILURE: {\n            return {...state, validated: false};\n        }\n        case AUTH_ACTION_TYPES.LOG_IN_BEGIN: {\n            return {...state, connecting: true, loginErrors: []};\n        }\n        case AUTH_ACTION_TYPES.LOG_IN_FAILURE: {\n            const {errors} = <LogInFailureAction>action;\n            return {...state, connecting: false, loginErrors: errors};\n        }\n        case AUTH_ACTION_TYPES.LOG_IN_SUCCESS: {\n            const {\n                token,\n                user: {onboarded, email},\n            } = <LogInSuccessAction>action;\n\n            // Pre-fill some of the on-boarding values\n            const onboarding = {...state.onboarding};\n            if (!onboarded) {\n                const names = extractNamesFromEmail(email);\n                if (names) {\n                    onboarding.firstname = names.firstname;\n                    onboarding.lastname = names.lastname;\n                }\n            }\n\n            return {\n                ...state,\n                connecting: false,\n                authenticated: true,\n                loginErrors: [],\n                token,\n                onboarded,\n                onboarding,\n            };\n        }\n        case AUTH_ACTION_TYPES.LOG_OUT: {\n            return {...state, token: null, authenticated: false};\n        }\n        case AUTH_ACTION_TYPES.SET_ONBOARDING_VALUES: {\n            const {values} = <SetOnboardingValuesAction>action;\n            return {...state, onboarding: {...state.onboarding, ...values}};\n        }\n        case AUTH_ACTION_TYPES.SET_ONBOARDING_OFFER_VALUE: {\n            const {id, value} = <SetOnboardingOfferValueAction>action;\n            return {\n                ...state,\n                onboarding: {\n                    ...state.onboarding,\n                    offerValues: {\n                        ...state.onboarding.offerValues,\n                        [id]: {\n                            ...(state.onboarding.offerValues[id] || {\n                                id,\n                                allowFemale: true,\n                                allowMale: true,\n                                allowOther: true,\n                                allowStaff: true,\n                                allowStudent: true,\n                            }),\n                            ...value,\n                        },\n                    },\n                },\n            };\n        }\n        default:\n            return state;\n    }\n};\n","/**\n * University education fields as specified by the International Standard Classification of Education (ISCED), 2013.\n * @see {@link https://ec.europa.eu/eurostat/statistics-explained/index.php/International_Standard_Classification_of_Education_(ISCED)}\n * See translations for the actual name of each field.\n */\nexport const EDUCATION_FIELDS = [\n    \"field-00\",\n    \"field-01\",\n    \"field-02\",\n    \"field-03\",\n    \"field-04\",\n    \"field-05\",\n    \"field-06\",\n    \"field-07\",\n    \"field-08\",\n    \"field-09\",\n    \"field-10\",\n    /*\n    \"natural-and-physical-science\",\n    \"information-technology\",\n    \"engineering-and-related-technology\",\n    \"architecture-and-building\",\n    \"agriculture-environnement\",\n    \"health\",\n    \"education\",\n    \"management-and-commerce\",\n    \"society-and-culture\",\n    \"creatice-art\",\n    \"food-and-hospitality\",\n    */\n];\n\nexport type Degree = \"bsc1\" | \"bsc2\" | \"bsc3\" | \"m1\" | \"m2\" | \"phd\";\nexport const DEGREES: Degree[] = [\"bsc1\", \"bsc2\", \"bsc3\", \"m1\", \"m2\", \"phd\"];\n\nexport type LanguageLevel = \"a1\" | \"a2\" | \"b1\" | \"b2\" | \"c1\" | \"c2\" | \"native\";\nexport const LANGUAGE_LEVELS: LanguageLevel[] = [\"a1\", \"a2\", \"b1\", \"b2\", \"c1\", \"c2\", \"native\"];\n\nexport type Role = \"student\" | \"staff\";\nexport const ROLES: Role[] = [\"student\", \"staff\"];\n\nexport type StaffRole =\n    | \"teaching\"\n    | \"researcher\"\n    | \"supporting\"\n    | \"administrative\"\n    | \"technical\"\n    | \"ambassador\"\n    | \"other\";\nexport const STAFF_ROLES: StaffRole[] = [\n    \"teaching\",\n    \"researcher\",\n    \"supporting\",\n    \"administrative\",\n    \"technical\",\n    \"ambassador\",\n    \"other\",\n];\n\nexport type Gender = \"male\" | \"female\" | \"other\";\nexport const GENDERS: Gender[] = [\"male\", \"female\", \"other\"];\n\nexport const MIN_AGE = 18;\n","import * as Yup from \"yup\";\nimport {DEGREES} from \"../constants/profile-constants\";\nimport {PARTNER_UNIVERSITIES, University} from \"../constants/universities\";\n\nexport const MIN_PASSWORD_LENGTH = 8;\n\n// TODO move this validation to back-end\nconst VALID_EMAIL_DOMAINS = PARTNER_UNIVERSITIES.map((uni: University) => uni.domain);\n\nexport const VALIDATOR_EMAIL_SIGNUP = Yup.string()\n    .required(\"validation.required\")\n    .email(\"validation.email.invalid\")\n    .test(\"email-domain\", \"validation.email.invalidDomain\", (value: string | null | undefined) => {\n        return value !== null && value !== undefined && VALID_EMAIL_DOMAINS.some((domain) => value.endsWith(domain));\n    });\n\nexport const VALIDATOR_PASSWORD_SIGNUP = Yup.string()\n    .required(\"validation.required\")\n    .min(MIN_PASSWORD_LENGTH, \"validation.password.tooShort\")\n    // At least one digit\n    .matches(/(?=.*\\d)/, \"validation.password.noDigit\")\n    // At least one lower-case character\n    .matches(/(?=.*[a-z])/, \"validation.password.noLowerCase\")\n    // At least one upper-case character\n    .matches(/(?=.*[A-Z])/, \"validation.password.noUpperCase\")\n    // At least one symbol\n    .matches(/(?=.*[#@$!%*?&])/, \"validation.password.noSymbol\");\n\nexport const VALIDATOR_PASSWORD_REPEAT = Yup.string()\n    .required(\"validation.required\")\n    .oneOf([Yup.ref(\"password\")], \"validation.password.repeatWrong\");\n\nexport const VALIDATOR_EMAIL_LOGIN = Yup.string().required(\"validation.required\").email(\"validation.email.invalid\");\nexport const VALIDATOR_PASSWORD_LOGIN = Yup.string().required(\"validation.required\");\n\nexport const VALIDATOR_FIRSTNAME = Yup.string().trim().required(\"validation.required\");\n\nexport const VALIDATOR_LASTNAME = Yup.string().trim().required(\"validation.required\");\n\nexport const VALIDATOR_ONBOARDING_BIRTHDATE = Yup.date().nullable().required(\"validation.required\"); // make it nullable so we can use null to represent a non given value (will fail the 'required' test anyway)\nexport const VALIDATOR_ONBOARDING_GENDER = Yup.string().nullable().required(\"validation.required\");\nexport const VALIDATOR_ONBOARDING_NATIONALITY = Yup.string().nullable().required(\"validation.required\");\nexport const VALIDATOR_ONBOARDING_DEGREE = Yup.string().oneOf(DEGREES, \"validation.required\");\nexport const VALIDATOR_ONBOARDING_LANGUAGES = Yup.array().required(\"validation.addAtLeastOne\");\n","import {MIN_PASSWORD_LENGTH} from \"../validators\";\n\nexport default {\n    en: {\n        welcome: \"Welcome\",\n        // Component-related\n        picker: {\n            callToAction: \"Select (%d selected)\",\n        },\n\n        login: \"Log in\",\n        tablogin: \"Log in\",\n        tabsignup: \"Sign up\",\n        emailAddress: \"Email address\",\n        password: \"Password\",\n        passwordRepeat: \"Repeat password\",\n        send: \"Send\",\n        forgotPassword: \"Forgot Password\",\n        newPassword: \"New Password\",\n        forgotPasswordExplanation:\n            \"Enter the email address associated with your account below. Instructions for choosing a new password will be sent shortly.\",\n        cancel: \"Cancel\",\n        signupWelcome: \"We can't wait for you to join our community!\\n\\nJust one more step.\",\n        firstname: \"First name\",\n        lastname: \"Last name\",\n        tos: {\n            modal: {\n                disclaimer1:\n                    \"Please understand that you will not be able to use our services if you decide to decline the terms of service.\",\n                disclaimer2: \"Declining will abort the profile creation process.\",\n            },\n            decline: \"Decline\",\n            accept: \"Accept\",\n            readMore: [\"Read more about our terms of service \", \"here\", \".\"],\n        },\n        privacy: {\n            readMore: [\"Read more about our privacy policy \", \"here\", \".\"],\n        },\n        emailNotificationsLabel: \"Send me useful notifications by email.\",\n        emailValidation: {\n            validating: \"Validating\",\n            success: [\"Your account has been validated! You may now \", \"log in\"],\n        },\n        createAccount: \"Create account\",\n        validation: {\n            required: \"Required field.\",\n            atLeastOne: \"Please select at least one.\",\n            addAtLeastOne: \"Please add at least one.\",\n            email: {\n                invalid: \"Please provide a valid email address.\",\n                invalidDomain: \"Your email address must match one of our partner universities.\",\n            },\n            password: {\n                tooShort: `Your password must have at least ${MIN_PASSWORD_LENGTH} characters.`,\n                noDigit: \"Your password must contain at least one digit.\",\n                noUpperCase: \"Your password must contain at least one upper case character.\",\n                noLowerCase: \"Your password must contain at least one lower case character.\",\n                noSymbol: \"Your password must contain at least one symbol (#@$!%*?&).\",\n                repeatWrong: \"These passwords don't match.\",\n            },\n            languages: {\n                multiple: \"You cannot add two entries for the same language.\",\n            },\n        },\n        pageNotFound: \"404: Page not found.\",\n        pageDoesntExist: \"This page doesn't exist.\",\n        goHome: \"Go to home screen\",\n        tabs: {\n            discover: \"Discover\",\n            matching: \"Matching\",\n            messaging: \"Messaging\",\n            profile: \"Profile\",\n            notifications: \"Notifications\",\n        },\n        myProfile: \"My Profile\",\n        editProfile: \"Edit profile\",\n        educationFieldsPicker: {\n            placeholder: \"Select fields\",\n            searchPlaceholder: \"Search\",\n            multiple: \"%d selected\",\n        },\n        educationFields: {\n            \"field-00\": \"Generic programmes and qualifications\",\n            \"field-01\": \"Education\",\n            \"field-02\": \"Arts and humanities\",\n            \"field-03\": \"Social sciences, journalism and information\",\n            \"field-04\": \"Business, administration and law\",\n            \"field-05\": \"Natural sciences, mathematics and statistics\",\n            \"field-06\": \"Information and Communication Technologies\",\n            \"field-07\": \"Engineering, manufacturing and construction\",\n            \"field-08\": \"Agriculture, forestry, fisheries and veterinary\",\n            \"field-09\": \"Health and welfare\",\n            \"field-10\": \"Services\",\n        },\n        levelOfStudy: \"Level of study\",\n        degrees: {\n            bsc1: \"BSC1\",\n            bsc2: \"BSC2\",\n            bsc3: \"BSC3\",\n            m1: \"M1\",\n            m2: \"M2\",\n            phd: \"PhD\",\n        },\n        nationality: \"Nationality\",\n        search: \"Search\",\n        selectCountry: \"Select country\",\n        countryPickerLanguageCode: \"common\", // see TranslationLanguageCode from react-native-country-picker-modal\n        role: \"Role\",\n        roles: {\n            student: \"Student\",\n            staff: \"Staff\",\n        },\n        staffRoles: {\n            teaching: \"Teaching\",\n            researcher: \"Researcher\",\n            supporting: \"Supporting\",\n            administrative: \"Administrative\",\n            technical: \"Technical\",\n            ambassador: \"SEA-EU Ambassador\",\n            other: \"Other\",\n        },\n        gender: \"Gender\",\n        genders: {\n            male: \"Male\",\n            female: \"Female\",\n            other: \"Other\",\n        },\n        dateOfBirth: \"Date of birth\",\n        months: {\n            0: \"January\",\n            1: \"February\",\n            2: \"March\",\n            3: \"April\",\n            4: \"May\",\n            5: \"June\",\n            6: \"July\",\n            7: \"August\",\n            8: \"September\",\n            9: \"October\",\n            10: \"November\",\n            11: \"December\",\n        },\n        fieldsOfEducation: \"Fields of education\",\n        apply: \"Apply\",\n        universities: {\n            \"univ-cadiz\": \"University of Cádiz\",\n            \"univ-brest\": \"University of Western Brittany\",\n            \"univ-gdansk\": \"University of Gdańsk\",\n            \"univ-malta\": \"University of Malta\",\n            \"univ-kiel\": \"University of Kiel\",\n            \"univ-split\": \"University of Split\",\n        },\n        universitiesPicker: {\n            placeholder: \"Select universities\",\n            searchPlaceholder: \"Search\",\n            multiple: \"%d selected\",\n        },\n        logOut: \"Log out\",\n        onboarding: {\n            name: {\n                title: \"Welcome\",\n                subtitle:\n                    \"Before we start, we need to know a little bit more about you to ensure the best possible recommendations.\",\n            },\n            personalInfo: {\n                title: \"Profile\",\n            },\n            language: {\n                title: \"Languages\",\n            },\n            interests: {\n                title: \"Interests\",\n            },\n            role: {\n                title: \"I am a...\",\n            },\n            roleSpecific1: {\n                student: {\n                    title: \"Student information\",\n                },\n                staff: {\n                    title: \"Staff position\",\n                },\n            },\n            offers1: {\n                title: \"Meet\",\n                subtitle: \"Meet up with new friends in real life.\",\n            },\n            offers2: {\n                title: \"Discover\",\n                subtitle: \"Find out about other cultures.\",\n            },\n            offers3: {\n                title: \"Collaborate\",\n                subtitle: \"Find people to work on projects, academic or not.\",\n            },\n            tos: {\n                title: \"Terms of service\",\n                subtitle:\n                    \"I am aware that I am entering a space of intercultural exchange and I am committed to caring and respectful exchanges with other members. My name and surname will be visible by other users.\",\n            },\n            privacy: {\n                title: \"Privacy policy\",\n                subtitle:\n                    \"I am entering a university community. I agree to provide some personal data, that will not be shared with anyone but the SEA-EU Around community.\",\n            },\n        },\n        spokenLanguages: \"Spoken languages\",\n        languagePicker: {\n            placeholderSingle: \"Language\",\n            placeholderMultiple: \"Select languages\",\n            searchPlaceholder: \"Search for languages\",\n            multiple: \"%d selected\",\n        },\n        languageLevelPicker: {\n            placeholder: \"Level\",\n        },\n        languageLevels: {\n            a1: \"A1\",\n            a2: \"A2\",\n            b1: \"B1\",\n            b2: \"B2\",\n            c1: \"C1\",\n            c2: \"C2\",\n            native: \"native\",\n        },\n        languageNames: {\n            aa: \"Afar\",\n            ab: \"Abkhazian\",\n            ae: \"Avestan\",\n            af: \"Afrikaans\",\n            ak: \"Akan\",\n            am: \"Amharic\",\n            an: \"Aragonese\",\n            ar: \"Arabic\",\n            as: \"Assamese\",\n            av: \"Avaric\",\n            ay: \"Aymara\",\n            az: \"Azerbaijani\",\n            ba: \"Bashkir\",\n            be: \"Belarusian\",\n            bg: \"Bulgarian\",\n            bh: \"Bihari languages\",\n            bi: \"Bislama\",\n            bm: \"Bambara\",\n            bn: \"Bengali\",\n            bo: \"Tibetan\",\n            br: \"Breton\",\n            bs: \"Bosnian\",\n            ca: \"Catalan / Valencian\",\n            ce: \"Chechen\",\n            ch: \"Chamorro\",\n            co: \"Corsican\",\n            cr: \"Cree\",\n            cs: \"Czech\",\n            cu: \"Old Bulgarian / Church Slavic / Slavonic\",\n            cv: \"Chuvash\",\n            cy: \"Welsh\",\n            da: \"Danish\",\n            de: \"German\",\n            dv: \"Divehi / Dhivehi / Maldivian\",\n            dz: \"Dzongkha\",\n            ee: \"Ewe\",\n            el: \"Greek\",\n            en: \"English\",\n            eo: \"Esperanto\",\n            es: \"Spanish\",\n            et: \"Estonian\",\n            eu: \"Basque\",\n            fa: \"Persian\",\n            ff: \"Fulah\",\n            fi: \"Finnish\",\n            fj: \"Fijian\",\n            fo: \"Faroese\",\n            fr: \"French\",\n            fy: \"Western Frisian\",\n            ga: \"Irish\",\n            gd: \"Scottish Gaelic\",\n            gl: \"Galician\",\n            gn: \"Guarani\",\n            gu: \"Gujarati\",\n            gv: \"Manx\",\n            ha: \"Hausa\",\n            he: \"Hebrew\",\n            hi: \"Hindi\",\n            ho: \"Hiri Motu\",\n            hr: \"Croatian\",\n            ht: \"Haitian Creole\",\n            hu: \"Hungarian\",\n            hy: \"Armenian\",\n            hz: \"Herero\",\n            ia: \"Interlingua\",\n            id: \"Indonesian\",\n            ie: \"Interlingue / Occidental\",\n            ig: \"Igbo\",\n            ii: \"Sichuan Yi / Nuosu\",\n            ik: \"Inupiaq\",\n            io: \"Ido\",\n            is: \"Icelandic\",\n            it: \"Italian\",\n            iu: \"Inuktitut\",\n            ja: \"Japanese\",\n            jv: \"Javanese\",\n            ka: \"Georgian\",\n            kg: \"Kongo\",\n            ki: \"Kikuyu / Gikuyu\",\n            kj: \"Kuanyama / Kwanyama\",\n            kk: \"Kazakh\",\n            kl: \"Kalaallisut / Greenlandic\",\n            km: \"Central Khmer\",\n            kn: \"Kannada\",\n            ko: \"Korean\",\n            kr: \"Kanuri\",\n            ks: \"Kashmiri\",\n            ku: \"Kurdish\",\n            kv: \"Komi\",\n            kw: \"Cornish\",\n            ky: \"Kirghiz / Kyrgyz\",\n            la: \"Latin\",\n            lb: \"Luxembourgish / Letzeburgesch\",\n            lg: \"Ganda\",\n            li: \"Limburgan / Limburger / Limburgish\",\n            ln: \"Lingala\",\n            lo: \"Lao\",\n            lt: \"Lithuanian\",\n            lu: \"Luba-Katanga\",\n            lv: \"Latvian\",\n            mg: \"Malagasy\",\n            mh: \"Marshallese\",\n            mi: \"Maori\",\n            mk: \"Macedonian\",\n            ml: \"Malayalam\",\n            mn: \"Mongolian\",\n            mr: \"Marathi\",\n            ms: \"Malay\",\n            mt: \"Maltese\",\n            my: \"Burmese\",\n            na: \"Nauru\",\n            nb: \"Norwegian Bokmål\",\n            nd: \"North Ndebele\",\n            ne: \"Nepali\",\n            ng: \"Ndonga\",\n            nl: \"Dutch / Flemish\",\n            nn: \"Norwegian Nynorsk\",\n            no: \"Norwegian\",\n            nr: \"South Ndebele\",\n            nv: \"Navajo / Navaho\",\n            ny: \"Chichewa / Chewa / Nyanja\",\n            oc: \"Occitan\",\n            oj: \"Ojibwa\",\n            om: \"Oromo\",\n            or: \"Oriya\",\n            os: \"Ossetian / Ossetic\",\n            pa: \"Punjabi / Panjabi\",\n            pi: \"Pali\",\n            pl: \"Polish\",\n            ps: \"Pashto / Pushto\",\n            pt: \"Portuguese\",\n            qu: \"Quechua\",\n            rc: \"Reunionese\",\n            rm: \"Romansh\",\n            rn: \"Rundi\",\n            ro: \"Romanian / Moldavian\",\n            ru: \"Russian\",\n            rw: \"Kinyarwanda\",\n            sa: \"Sanskrit\",\n            sc: \"Sardinian\",\n            sd: \"Sindhi\",\n            se: \"Northern Sami\",\n            sg: \"Sango\",\n            sh: \"Serbo-Croatian\",\n            si: \"Sinhala / Sinhalese\",\n            sk: \"Slovak\",\n            sl: \"Slovenian\",\n            sm: \"Samoan\",\n            sn: \"Shona\",\n            so: \"Somali\",\n            sq: \"Albanian\",\n            sr: \"Serbian\",\n            ss: \"Swati\",\n            st: \"Southern Sotho\",\n            su: \"Sundanese\",\n            sv: \"Swedish\",\n            sw: \"Swahili\",\n            ta: \"Tamil\",\n            te: \"Telugu\",\n            tg: \"Tajik\",\n            th: \"Thai\",\n            ti: \"Tigrinya\",\n            tk: \"Turkmen\",\n            tl: \"Tagalog\",\n            tn: \"Tswana\",\n            to: \"Tonga (Tonga Islands)\",\n            tr: \"Turkish\",\n            ts: \"Tsonga\",\n            tt: \"Tatar\",\n            tw: \"Twi\",\n            ty: \"Tahitian\",\n            ug: \"Uighur / Uyghur\",\n            uk: \"Ukrainian\",\n            ur: \"Urdu\",\n            uz: \"Uzbek\",\n            ve: \"Venda\",\n            vi: \"Vietnamese\",\n            vo: \"Volapük\",\n            wa: \"Walloon\",\n            wo: \"Wolof\",\n            xh: \"Xhosa\",\n            yi: \"Yiddish\",\n            yo: \"Yoruba\",\n            za: \"Zhuang / Chuang\",\n            zh: \"Chinese\",\n            zu: \"Zulu\",\n        },\n        interests: \"Interests\",\n        chooseInterests: \"Choose interests\",\n        interestsPicker: {\n            placeholder: \"Select interests\",\n            searchPlaceholder: \"Search\",\n            multiple: \"%d selected\",\n        },\n        interestNames: {\n            \"language-exchange\": \"Language exchange\",\n            \"second-hand-apparel\": \"Second hand apparel\",\n            \"board-games\": \"Board games\",\n            \"road-trips\": \"Road trips\",\n            \"tango\": \"Tango\",\n            \"sneakers\": \"Sneakers\",\n            \"sports\": \"Sports\",\n            \"baking\": \"Baking\",\n            \"tarot\": \"Tarot\",\n            \"art\": \"Art\",\n            \"tea\": \"Tea\",\n            \"picnicking\": \"Picnicking\",\n            \"motorcycles\": \"Motorcycles\",\n            \"parties\": \"Parties\",\n            \"shopping\": \"Shopping\",\n            \"netflix\": \"Netflix\",\n            \"cooking\": \"Cooking\",\n            \"vegan\": \"Vegan\",\n            \"couchsurfing\": \"Couchsurfing\",\n            \"brunch\": \"Brunch\",\n            \"motor-sports\": \"Motor sports\",\n            \"grab-a-drink\": \"Grab a drink\",\n            \"working-out\": \"Working out\",\n            \"start-ups\": \"Start ups\",\n            \"street-food\": \"Street food\",\n            \"craft-beer\": \"Craft beer\",\n            \"amateur-cook\": \"Amateur cook\",\n            \"happy-hour\": \"Happy hour\",\n            \"vintage-fashion\": \"Vintage fashion\",\n            \"walking-my-dog\": \"Walking my dog\",\n            \"second-hand-shopping\": \"Second hand shopping\",\n            \"politics\": \"Politics\",\n            \"bbq\": \"BBQ\",\n            \"surfing\": \"Surfing\",\n            \"spirituality\": \"Spirituality\",\n            \"gardening\": \"Gardening\",\n            \"astrology\": \"Astrology\",\n            \"climbing\": \"Climbing\",\n            \"tennis\": \"Tennis\",\n            \"writer\": \"Writer\",\n            \"comedy\": \"Comedy\",\n            \"wine\": \"Wine\",\n            \"diy\": \"Diy\",\n            \"coffee\": \"Coffee\",\n            \"sailing\": \"Sailing\",\n            \"music\": \"Music\",\n            \"cycling\": \"Cycling\",\n            \"activism\": \"Activism\",\n            \"trivia\": \"Trivia\",\n            \"travel\": \"Travel\",\n            \"instagram\": \"Instagram\",\n            \"museum\": \"Museum\",\n            \"karaoke\": \"Karaoke\",\n            \"fashion\": \"Fashion\",\n            \"disney\": \"Disney\",\n            \"blogging\": \"Blogging\",\n            \"yoga\": \"Yoga\",\n            \"investing\": \"Investing\",\n            \"petanque\": \"Petanque\",\n            \"theater\": \"Theater\",\n            \"environmentalism\": \"Environmentalism\",\n            \"crossfit\": \"Crossfit\",\n            \"dancing\": \"Dancing\",\n            \"hiking\": \"Hiking\",\n            \"running\": \"Running\",\n            \"golf\": \"Golf\",\n            \"photography\": \"Photography\",\n            \"vlogging\": \"Vlogging\",\n            \"volunteering\": \"Volunteering\",\n            \"tattoos\": \"Tattoos\",\n            \"outdoors\": \"Outdoors\",\n            \"esports\": \"Esports\",\n            \"snowboarding\": \"Snowboarding\",\n            \"athlete\": \"Athlete\",\n            \"extrovert\": \"Extrovert\",\n            \"podcasts\": \"Podcasts\",\n            \"walking\": \"Walking\",\n            \"vegetarian\": \"Vegetarian\",\n            \"reading\": \"Reading\",\n            \"movies\": \"Movies\",\n            \"foodie\": \"Foodie\",\n            \"soccer\": \"Soccer\",\n            \"skiing\": \"Skiing\",\n            \"sushi\": \"Sushi\",\n            \"introvert\": \"Introvert\",\n            \"skateboarder\": \"Skateboarder\",\n            \"festivals\": \"Festivals\",\n            \"fishing\": \"Fishing\",\n            \"swimming\": \"Swimming\",\n            \"expositions\": \"Expositions\",\n            \"gamer\": \"Gamer\",\n            \"piano\": \"Piano\",\n            \"foodie-tour\": \"Foodie Tour\",\n            \"dog-lover\": \"Dog Lover\",\n            \"cat-lover\": \"Cat Lover\",\n        },\n        offers: {\n            \"have-a-drink\": {\n                name: \"Have a drink\",\n                help: \"I am open to having a drink with the people I meet on this platform.\",\n            },\n            \"visit-campus\": {\n                name: \"Visit my campus\",\n                help: \"I am open to helping someone visit my campus.\",\n            },\n            \"provide-couch\": {\n                name: \"Provide a couch\",\n                help: \"I am open to letting someone sleep on my couch.\",\n            },\n        },\n    },\n    fr: {\n        welcome: \"Bienvenue\",\n        login: \"Connexion\",\n        signup: \"Inscription\",\n        emailAddress: \"Adresse email\",\n        password: \"Mot de passe\",\n        forgotPassword: \"Mot de passe oublié\",\n        educationFields: {\n            \"field-00\": \"Programmes et certifications génériques\",\n            \"field-01\": \"Éducation\",\n            \"field-02\": \"Lettres et arts\",\n            \"field-03\": \"Sciences sociales, journalisme et information\",\n            \"field-04\": \"Commerce, administration et droit\",\n            \"field-05\": \"Sciences naturelles, mathématiques et statistiques\",\n            \"field-06\": \"Technologies de l’information et de la communication\",\n            \"field-07\": \"Ingénierie, industries de transformation et construction \",\n            \"field-08\": \"Agriculture, sylviculture, halieutique et sciences vétérinaires\",\n            \"field-09\": \"Santé et protection sociale\",\n            \"field-10\": \"Services\",\n        },\n        countryPickerLanguageCode: \"fra\", // see TranslationLanguageCode from react-native-country-picker-modal\n    },\n};\n","import * as Localization from \"expo-localization\";\nimport i18n from \"i18n-js\";\nimport translations from \"./constants/translations\";\n\nexport type SupportedLocale = \"en\" | \"fr\";\nexport const SUPPORTED_LOCALES: SupportedLocale[] = [\"en\", \"fr\"];\n\nexport function getDefaultLocale(): SupportedLocale {\n    return SUPPORTED_LOCALES.find((l: SupportedLocale) => l == Localization.locale) || \"en\";\n}\n\nexport default function configureLocalization(): void {\n    // Set the key-value pairs for the supported languages.\n    i18n.translations = translations;\n\n    // Set the locale on startup\n    i18n.locale = getDefaultLocale();\n\n    // When a value is missing from a language, fallback to another language with the key present.\n    i18n.fallbacks = true;\n}\n","// ISO 639-1 Language codes\nexport const LANGUAGES_CODES: string[] = [\n    \"de\",\n    \"en\",\n    \"hr\",\n    \"es\",\n    \"fr\",\n    \"mt\",\n    \"pl\",\n    \"aa\",\n    \"ab\",\n    \"ae\",\n    \"af\",\n    \"ak\",\n    \"am\",\n    \"an\",\n    \"ar\",\n    \"as\",\n    \"av\",\n    \"ay\",\n    \"az\",\n    \"ba\",\n    \"be\",\n    \"bg\",\n    \"bh\",\n    \"bi\",\n    \"bm\",\n    \"bn\",\n    \"bo\",\n    \"br\",\n    \"bs\",\n    \"ca\",\n    \"ce\",\n    \"ch\",\n    \"co\",\n    \"cr\",\n    \"cs\",\n    \"cu\",\n    \"cv\",\n    \"cy\",\n    \"da\",\n    \"dv\",\n    \"dz\",\n    \"ee\",\n    \"el\",\n    \"eo\",\n    \"et\",\n    \"eu\",\n    \"fa\",\n    \"ff\",\n    \"fi\",\n    \"fj\",\n    \"fo\",\n    \"fy\",\n    \"ga\",\n    \"gd\",\n    \"gl\",\n    \"gn\",\n    \"gu\",\n    \"gv\",\n    \"ha\",\n    \"he\",\n    \"hi\",\n    \"ho\",\n    \"ht\",\n    \"hu\",\n    \"hy\",\n    \"hz\",\n    \"ia\",\n    \"id\",\n    \"ie\",\n    \"ig\",\n    \"ii\",\n    \"ik\",\n    \"io\",\n    \"is\",\n    \"it\",\n    \"iu\",\n    \"ja\",\n    \"jv\",\n    \"ka\",\n    \"kg\",\n    \"ki\",\n    \"kj\",\n    \"kk\",\n    \"kl\",\n    \"km\",\n    \"kn\",\n    \"ko\",\n    \"kr\",\n    \"ks\",\n    \"ku\",\n    \"kv\",\n    \"kw\",\n    \"ky\",\n    \"la\",\n    \"lb\",\n    \"lg\",\n    \"li\",\n    \"ln\",\n    \"lo\",\n    \"lt\",\n    \"lu\",\n    \"lv\",\n    \"mg\",\n    \"mh\",\n    \"mi\",\n    \"mk\",\n    \"ml\",\n    \"mn\",\n    \"mo\",\n    \"mr\",\n    \"ms\",\n    \"my\",\n    \"na\",\n    \"nb\",\n    \"nd\",\n    \"ne\",\n    \"ng\",\n    \"nl\",\n    \"nn\",\n    \"no\",\n    \"nr\",\n    \"nv\",\n    \"ny\",\n    \"oc\",\n    \"oj\",\n    \"om\",\n    \"or\",\n    \"os\",\n    \"pa\",\n    \"pi\",\n    \"ps\",\n    \"pt\",\n    \"qu\",\n    \"rc\",\n    \"rm\",\n    \"rn\",\n    \"ro\",\n    \"ru\",\n    \"rw\",\n    \"sa\",\n    \"sc\",\n    \"sd\",\n    \"se\",\n    \"sg\",\n    \"sh\",\n    \"si\",\n    \"sk\",\n    \"sl\",\n    \"sm\",\n    \"sn\",\n    \"so\",\n    \"sq\",\n    \"sr\",\n    \"ss\",\n    \"st\",\n    \"su\",\n    \"sv\",\n    \"sw\",\n    \"ta\",\n    \"te\",\n    \"tg\",\n    \"th\",\n    \"ti\",\n    \"tk\",\n    \"tl\",\n    \"tn\",\n    \"to\",\n    \"tr\",\n    \"ts\",\n    \"tt\",\n    \"tw\",\n    \"ty\",\n    \"ug\",\n    \"uk\",\n    \"ur\",\n    \"uz\",\n    \"ve\",\n    \"vi\",\n    \"vo\",\n    \"wa\",\n    \"wo\",\n    \"xh\",\n    \"yi\",\n    \"yo\",\n    \"za\",\n    \"zh\",\n    \"zu\",\n];\n\n/* Mining translations from https://www.loc.gov/standards/iso639-2/php/code_list.php */\n/*\nlet entries = {};\nlet items = $(\"body > table > tbody > tr > td > table:nth-child(6) tbody\").children;\nfor(const tr of items) {\n    const code = tr.children[1].innerText.trim();\n    if(code.length == 2) {\n        const english = tr.children[2].innerText.trim();\n        const french = tr.children[3].innerText.trim();\n        const german = tr.children[4].innerText.trim();\n        entries[code] = english;\n    }\n}\nconsole.log(entries);\n*/\n\n/* Mining translations from https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes */\n/*\nlet entries = {};\n$(\"#Table > tbody\").children().each((i,tr) => {\n    const code = tr.children[4].innerText.trim();\n    if(code.length == 2) {\n        const english = tr.children[2].innerText.trim();\n        entries[code] = english;\n    }\n});\nconsole.log(entries);\n*/\n","import {getDefaultLocale, SupportedLocale} from \"../../localization\";\nimport {LANGUAGES_CODES} from \"../../model/languages\";\nimport {SettingsState, SettingsAction, SetThemeAction, SetLocaleAction, SETTINGS_ACTION_TYPES} from \"../types\";\nimport translations from \"../../constants/translations\";\n\nfunction getLocalizedLanguageItems(locale: SupportedLocale) {\n    const trans = (translations as {[key: string]: {[key: string]: unknown}})[locale];\n    const languageNames = trans.languageNames as {[key: string]: string};\n    return LANGUAGES_CODES.slice(0, 20).map((code: string) => ({\n        label: languageNames[code], //i18n.t(`languageNames.${code}`), // Cannot rely on i18n as it is not initialized yet\n        value: code,\n    }));\n}\n\nexport const initialState: SettingsState = {\n    theme: \"light\",\n    locale: getDefaultLocale(),\n    localizedLanguageItems: getLocalizedLanguageItems(getDefaultLocale()),\n};\n\nexport const settingsReducer = (state: SettingsState = initialState, action: SettingsAction): SettingsState => {\n    switch (action.type) {\n        case SETTINGS_ACTION_TYPES.SET_THEME:\n            const {theme} = <SetThemeAction>action;\n            return {...state, theme};\n        case SETTINGS_ACTION_TYPES.SET_LOCALE:\n            const {locale} = <SetLocaleAction>action;\n            return {...state, locale, localizedLanguageItems: getLocalizedLanguageItems(locale)};\n        default:\n            return state;\n    }\n};\n","import {UserProfileDto} from \"../../api/dto\";\nimport {\n    ProfileState,\n    ProfileAction,\n    SetProfileFieldsAction,\n    PROFILE_ACTION_TYPES,\n    LoadProfileOffersSuccessAction,\n    LoadProfileInterestsSuccessAction,\n    FetchProfilesSuccessAction,\n} from \"../types\";\n\nexport const initialState: ProfileState = {\n    user: {\n        email: \"fred.roger@univ-brest.fr\",\n        onboarded: false,\n        role: \"student\",\n        active: true,\n        verificationToken: \"\",\n        profile: {\n            id: \"fr1FgS3qfqGfqdkiumpi8LP5qfS9Af0Bqf1Jzaf8Ofq\",\n            firstName: \"Fred\",\n            lastName: \"Roger\",\n            university: \"univ-brest\",\n            degree: \"phd\",\n            nationality: \"FR\",\n            gender: \"male\",\n            birthdate: new Date(1999, 6, 2),\n            interests: [\"netflix\"],\n            languages: [],\n            avatarUri: \"\",\n            educationFields: [\"field-06\", \"field-07\"],\n        } as UserProfileDto,\n    },\n    offers: [],\n    interests: [],\n    fetchedProfiles: [],\n    fetchingProfiles: false,\n    fetchingPage: 1,\n};\n\nexport const profileReducer = (state: ProfileState = initialState, action: ProfileAction): ProfileState => {\n    switch (action.type) {\n        case PROFILE_ACTION_TYPES.PROFILE_SET_FIELDS: {\n            const {fields} = <SetProfileFieldsAction>action;\n            return {...state, user: {...state.user, profile: {...state.user.profile, ...fields}}};\n        }\n        case PROFILE_ACTION_TYPES.LOAD_PROFILE_OFFERS_SUCCESS: {\n            const {offers} = <LoadProfileOffersSuccessAction>action;\n            return {...state, offers};\n        }\n        case PROFILE_ACTION_TYPES.LOAD_PROFILE_INTERESTS_SUCCESS: {\n            const {interests} = <LoadProfileInterestsSuccessAction>action;\n            // Sort alphabetically\n            interests.sort((a, b) => (a.id > b.id ? 1 : -1));\n            return {...state, interests};\n        }\n        case PROFILE_ACTION_TYPES.FETCH_PROFILES_BEGIN: {\n            return {...state, fetchingProfiles: true};\n        }\n        case PROFILE_ACTION_TYPES.FETCH_PROFILES_FAILURE: {\n            return {...state, fetchingProfiles: false};\n        }\n        case PROFILE_ACTION_TYPES.FETCH_PROFILES_SUCCESS: {\n            const {profiles} = <FetchProfilesSuccessAction>action;\n            return {\n                ...state,\n                fetchedProfiles: state.fetchedProfiles.concat(profiles),\n                fetchingProfiles: false,\n                fetchingPage: state.fetchingPage + 1,\n            };\n        }\n        default:\n            return state;\n    }\n};\n","import {DEGREES} from \"../../constants/profile-constants\";\nimport {PARTNER_UNIVERSITIES, University} from \"../../constants/universities\";\nimport {\n    MatchingState,\n    MatchingAction,\n    MATCHING_ACTION_TYPES,\n    SetOfferFilterAction,\n    SetMatchingFiltersAction,\n} from \"../types\";\n\nexport const initialState: MatchingState = {\n    filters: {\n        offers: {},\n        universities: [],\n        degrees: DEGREES,\n        languages: [],\n    },\n};\n\nexport const matchingReducer = (state: MatchingState = initialState, action: MatchingAction): MatchingState => {\n    switch (action.type) {\n        case MATCHING_ACTION_TYPES.SET_OFFER_FILTER: {\n            const {offerId, value} = <SetOfferFilterAction>action;\n            return {\n                ...state,\n                filters: {\n                    ...state.filters,\n                    offers: {...state.filters.offers, [offerId]: value},\n                },\n            };\n        }\n        case MATCHING_ACTION_TYPES.SET_FILTERS: {\n            const {filters} = <SetMatchingFiltersAction>action;\n            return {\n                ...state,\n                filters: {...state.filters, ...filters},\n            };\n        }\n        case MATCHING_ACTION_TYPES.RESET_MATCHING_FILTERS: {\n            return {\n                ...state,\n                filters: {\n                    offers: {},\n                    universities: PARTNER_UNIVERSITIES.map((univ: University) => univ.key),\n                    degrees: DEGREES,\n                    languages: [],\n                },\n            };\n        }\n        default:\n            return state;\n    }\n};\n","import * as React from \"react\";\nimport {NavigationContainerRef} from \"@react-navigation/native\";\nimport {NavigatorRoute} from \"./types\";\n\n// Store a ref to several navigators\nexport const rootNavigationRef = React.createRef<NavigationContainerRef>();\n\nexport function rootNavigate(route: NavigatorRoute): void {\n    rootNavigationRef.current?.navigate(route as string);\n}\n","import {AnyAction, Middleware, MiddlewareAPI, Dispatch} from \"redux\";\nimport {rootNavigate} from \"../navigation/utils\";\nimport {AppState, AUTH_ACTION_TYPES, PROFILE_ACTION_TYPES} from \"./types\";\n\nexport const navigationMiddleware: Middleware<unknown, AppState> = (store: MiddlewareAPI<Dispatch, AppState>) => (\n    next: Dispatch<AnyAction>,\n) => (action: AnyAction) => {\n    const state: AppState = store.getState();\n\n    // TODO action printing\n    console.log(action.type);\n\n    switch (action.type) {\n        case PROFILE_ACTION_TYPES.PROFILE_CREATE_SUCCESS: {\n            rootNavigate(\"MainScreen\");\n            break;\n        }\n        case AUTH_ACTION_TYPES.LOG_IN_SUCCESS: {\n            rootNavigate(state.auth.onboarded ? \"MainScreen\" : \"OnboardingScreen\");\n            break;\n        }\n        case AUTH_ACTION_TYPES.REGISTER_SUCCESS: {\n            rootNavigate(\"ValidationEmailSentScreen\");\n            break;\n        }\n    }\n\n    next(action);\n};\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {authReducer} from \"./auth/reducer\";\nimport {settingsReducer} from \"./settings/reducer\";\nimport {profileReducer} from \"./profile/reducer\";\nimport {matchingReducer} from \"./matching/reducer\";\nimport thunk from \"redux-thunk\";\nimport {navigationMiddleware} from \"./navigation-middleware\";\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    settings: settingsReducer,\n    profile: profileReducer,\n    matching: matchingReducer,\n});\n\nexport default createStore(rootReducer, applyMiddleware(thunk, navigationMiddleware));\n","import {BACKEND_URL} from \"../constants/config\";\nimport store from \"../state/store\";\n\nexport type Primitive = string | number | boolean;\nexport type URLParams = {[key: string]: Primitive};\nexport type URLBodyParams = {[key: string]: Primitive | Primitive[] | URLBodyParams | URLBodyParams[]};\nexport type RequestResponse = {success: boolean; codes: string[]} & {[key: string]: unknown};\n\n/**\n * Encode parameters for an HTTP request (e.g. param1=value1&param2=value2)\n * @param args - A map that contains argument keys and associated values.\n * @returns the given arguments, formatted into a HTTP request suffix.\n */\nexport function encodeRequestParams(args: URLParams): string {\n    const keys = Object.keys(args);\n    if (keys.length == 0) return \"\";\n    else {\n        return keys.map((key: string) => `${key}=${encodeURIComponent(args[key])}`).join(\"&\");\n    }\n}\n\n/**\n * Send a request to the backend.\n * @param endpoint - Which endpoint to hit (e.g. auth/login)\n * @param method - Which HTTP method to use (GET, PUT, POST, ...)\n * @param params - The URL parameters (?param1=value1&param2=value2 ...)\n * @param body - The body of the request.\n * @param auth - Whether or not this request should be authenticated.\n */\nexport async function requestBackend(\n    endpoint: string,\n    method = \"GET\",\n    params: URLParams = {},\n    body: URLBodyParams = {},\n    auth = false,\n    verbose = true,\n): Promise<RequestResponse> {\n    const headers: {[key: string]: string} = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    };\n\n    if (auth) {\n        const token = store.getState().auth.token;\n        if (token) headers.Authorization = `Bearer ${token.accessToken}`;\n        else console.error(`Cannot authentify request to ${endpoint} : no auth token available.`);\n    }\n\n    const formattedParams = encodeRequestParams(params);\n\n    try {\n        if (verbose) {\n            console.log(`Sending request: ${method} /${endpoint}?${formattedParams}`);\n            console.log(`  headers: ${JSON.stringify(headers)}`);\n            console.log(`  body   : ${JSON.stringify(body)}`);\n        }\n\n        const response = await fetch(`${BACKEND_URL}/${endpoint}?${formattedParams}`, {\n            method,\n            headers,\n            ...(method == \"GET\" ? {} : {body: JSON.stringify(body)}),\n        });\n\n        const json = await response.json();\n        /*if (verbose) {\n            console.log(`Response from endpoint ${endpoint}:`);\n            console.log(json);\n        }*/\n\n        return json;\n    } catch (error) {\n        console.error(\n            `An unexpected error occured with a request to ${endpoint}. ` +\n                `Method = ${method}, auth = ${auth}, params=${JSON.stringify(params)}, body=${JSON.stringify(body)}`,\n        );\n        return {success: false, codes: [\"error.unknown\"]};\n    }\n}\n","import {\n    AppThunk,\n    SetProfileFieldsAction,\n    CreateProfileSuccessAction,\n    PROFILE_ACTION_TYPES,\n    LoadProfileOffersSuccessAction,\n    LoadProfileInterestsSuccessAction,\n    FetchProfilesSuccessAction,\n    BeginFetchProfilesAction,\n    FetchProfilesFailureAction,\n    ProfileState,\n} from \"../types\";\nimport {CreateProfileDto, InterestDto, OfferDto, UserProfileDto} from \"../../api/dto\";\nimport {requestBackend} from \"../../api/utils\";\nimport store from \"../store\";\n\nexport const setProfileFields = (fields: Partial<UserProfileDto>): SetProfileFieldsAction => ({\n    type: PROFILE_ACTION_TYPES.PROFILE_SET_FIELDS,\n    fields,\n});\n\nexport const createProfileSuccess = (): CreateProfileSuccessAction => ({\n    type: PROFILE_ACTION_TYPES.PROFILE_CREATE_SUCCESS,\n});\n\nexport const createProfile = (profile: CreateProfileDto): AppThunk => async (dispatch) => {\n    const response = await requestBackend(\"profiles\", \"POST\", {}, profile, true);\n    if (response.success || true) {\n        // TODO remove createprofile bypass\n        dispatch(createProfileSuccess());\n    }\n    /* else {\n        \n    }*/\n};\n\nexport const loadProfileOffers = (): AppThunk => async (dispatch) => {\n    const response = await requestBackend(\"offers\", \"GET\");\n    if (response.success) {\n        dispatch(loadProfileOffersSuccess(response.data as OfferDto[]));\n    }\n    /* else {\n        \n    }*/\n};\n\nexport const loadProfileOffersSuccess = (offers: OfferDto[]): LoadProfileOffersSuccessAction => ({\n    type: PROFILE_ACTION_TYPES.LOAD_PROFILE_OFFERS_SUCCESS,\n    offers,\n});\n\nexport const loadProfileInterests = (): AppThunk => async (dispatch) => {\n    console.log(\"loadProfileInterests\");\n    const response = await requestBackend(\"interests\", \"GET\");\n    console.log(\"loadProfileInterests - success =\", response.success);\n    if (response.success) {\n        dispatch(loadProfileInterestsSuccess(response.data as InterestDto[]));\n    }\n    /* else {\n        \n    }*/\n};\n\nexport const loadProfileInterestsSuccess = (interests: InterestDto[]): LoadProfileInterestsSuccessAction => ({\n    type: PROFILE_ACTION_TYPES.LOAD_PROFILE_INTERESTS_SUCCESS,\n    interests,\n});\n\nexport const beginFetchProfiles = (): BeginFetchProfilesAction => ({\n    type: PROFILE_ACTION_TYPES.FETCH_PROFILES_BEGIN,\n});\n\nexport const fetchProfiles = (): AppThunk => async (dispatch) => {\n    const state: ProfileState = store.getState().profile;\n    if (state.fetchingProfiles) return;\n\n    dispatch(beginFetchProfiles());\n\n    const response = await requestBackend(\"profiles\", \"GET\", {page: state.fetchingPage, limit: 5}, {}, true, true);\n\n    // TODO temp fake profiles\n    const testProfiles: UserProfileDto[] = [\n        {\n            id: \"SpGiGSsGDdGSpogjQgsfGhfSdDFPFhGdShD\",\n            firstName: \"John\",\n            lastName: \"Doe\",\n            university: \"univ-brest\",\n            degree: \"bsc3\",\n            nationality: \"FR\",\n            birthdate: new Date(),\n            gender: \"male\",\n            interests: [\"netflix\"],\n            avatarUri: \"\",\n            languages: [\n                {code: \"fr\", level: \"native\"},\n                {code: \"en\", level: \"c2\"},\n            ],\n            educationFields: [],\n        },\n        {\n            id: \"FQSFDPSfpgsdsdfPIUJIjGSfgpQgqujpgodREjPGS\",\n            firstName: \"Matt\",\n            lastName: \"Brooks\",\n            university: \"univ-cadiz\",\n            degree: \"m2\",\n            nationality: \"FR\",\n            birthdate: new Date(),\n            gender: \"male\",\n            interests: [\"netflix\"],\n            avatarUri: \"\",\n            languages: [\n                {code: \"es\", level: \"native\"},\n                {code: \"en\", level: \"c1\"},\n                {code: \"fr\", level: \"b2\"},\n            ],\n            educationFields: [],\n        },\n    ];\n    //response.data = testProfiles;\n\n    if (response.success) dispatch(fetchProfilesSuccess(response.data as UserProfileDto[]));\n    else dispatch(fetchProfilesFailure());\n};\n\nexport const fetchProfilesFailure = (): FetchProfilesFailureAction => ({\n    type: PROFILE_ACTION_TYPES.FETCH_PROFILES_FAILURE,\n});\n\nexport const fetchProfilesSuccess = (profiles: UserProfileDto[]): FetchProfilesSuccessAction => ({\n    type: PROFILE_ACTION_TYPES.FETCH_PROFILES_SUCCESS,\n    profiles,\n});\n","const tintColorLight = \"#2f95dc\";\nconst tintColorDark = \"#fff\";\n\nexport default {\n    light: {\n        id: \"light\",\n        text: \"#000\",\n        textLight: \"#666\",\n        textInverted: \"#fff\",\n        background: \"#f9f9f9\",\n        accent: \"#003da5\", // Pantone 293c\n        accentSlight: \"#ccd8ea\",\n        accentSecondary: \"#009ace\", // Pantone 801c\n        accentTernary: \"#fbe122\", // Pantone 207c\n        tint: tintColorLight,\n        error: \"#ff4a6a\",\n        actionNeutral: \"#555555\",\n        okay: \"#00b16a\",\n        tabIconDefault: \"#ccc\",\n        tabIconSelected: tintColorLight,\n        componentBorder: \"#eee\",\n    },\n    dark: {\n        id: \"dark\",\n        text: \"#fff\",\n        textLight: \"#ccc\",\n        textInverted: \"#111\",\n        background: \"#333\",\n        accent: \"#009ace\", // Pantone 801c\n        accentSlight: \"#ccd8ea\",\n        accentSecondary: \"#003da5\", // Pantone 293c\n        accentTernary: \"#fbe122\", // Pantone 207c\n        tint: tintColorDark,\n        error: \"#f9819d\",\n        actionNeutral: \"#777\",\n        okay: \"#00b16a\",\n        tabIconDefault: \"#ccc\",\n        tabIconSelected: tintColorDark,\n        componentBorder: \"#ccc\", // TODO\n    },\n};\n","import {ImageStyle, TextStyle, ViewStyle} from \"react-native\";\nimport themes from \"../constants/themes\";\nimport {Theme} from \"../types\";\n\ntype NamedStyles<T> = {[P in keyof T]: ViewStyle | TextStyle | ImageStyle};\ntype ThemedStyles<T extends NamedStyles<T>> = (theme: Theme) => T;\n\n/** Tool to pre-generate stylesheet variations for each theme.  */\nexport function preTheme<T extends NamedStyles<T>>(generator: ThemedStyles<T>): ThemedStyles<T> {\n    // Pre-generate the styles in a key:value map\n    const styles: {[key: string]: T} = {};\n    Object.values(themes).forEach((theme: Theme) => (styles[theme.id] = generator(theme)));\n    // Wrap the map as a function\n    return (theme: Theme) => styles[theme.id];\n}\n","import {StackScreenProps} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport {StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {RootNavigatorScreens} from \"../navigation/types\";\nimport {ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\nexport type NotFoundScreenProps = StackScreenProps<RootNavigatorScreens, \"NotFoundScreen\"> & ThemeProps;\n\nclass NotFoundScreen extends React.Component<NotFoundScreenProps> {\n    render(): JSX.Element {\n        const {navigation, theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <Text style={styles.title}>{i18n.t(\"pageNotFound\")}</Text>\n                <Text style={styles.subtitle}>{i18n.t(\"pageDoesntExist\")}</Text>\n                <TouchableOpacity onPress={() => navigation.replace(\"LoginScreen\")} style={styles.link}>\n                    <Text style={styles.linkText}>{i18n.t(\"goHome\")}</Text>\n                </TouchableOpacity>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            backgroundColor: \"#fff\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            padding: 20,\n        },\n        title: {\n            fontSize: 64,\n            fontWeight: \"100\",\n        },\n        subtitle: {\n            fontSize: 20,\n            fontWeight: \"bold\",\n            marginTop: 50,\n        },\n        link: {\n            paddingVertical: 10,\n        },\n        linkText: {\n            fontSize: 14,\n            color: \"#2e78b7\",\n        },\n    });\n});\n\nexport default withTheme(NotFoundScreen);\n","import {\n    LogOutAction,\n    LogInBeginAction,\n    LogInSuccessAction,\n    LogInFailureAction,\n    AppThunk,\n    RegisterBeginAction,\n    RegisterSuccessAction,\n    RegisterFailureAction,\n    ValidateAccountSuccessAction,\n    ValidateAccountFailureAction,\n    OnboardingState,\n    SetOnboardingValuesAction,\n    AUTH_ACTION_TYPES,\n    SetOnboardingOfferValueAction,\n} from \"../types\";\nimport {LoginDto, OfferValueDto, TokenDto, UserDto} from \"../../api/dto\";\nimport {requestBackend} from \"../../api/utils\";\nimport store from \"../store\";\nimport {createProfile} from \"../profile/actions\";\n\n// Register actions\n\nexport const registerBegin = (email: string, password: string): RegisterBeginAction => ({\n    type: AUTH_ACTION_TYPES.REGISTER_BEGIN,\n    email,\n    password,\n});\n\n// Redux-thunk asynchronous action creator\nexport const requestRegister = (email: string, password: string): AppThunk => async (dispatch) => {\n    dispatch(registerBegin(email, password));\n    const response = await requestBackend(\"auth/register\", \"POST\", {}, {email, password});\n\n    if (response.success) dispatch(registerSuccess(response.data as UserDto));\n    else dispatch(registerFailure(response.codes));\n};\n\nexport const registerSuccess = (user: UserDto): RegisterSuccessAction => ({\n    type: AUTH_ACTION_TYPES.REGISTER_SUCCESS,\n    user,\n});\n\nexport const registerFailure = (errors: string[]): RegisterFailureAction => ({\n    type: AUTH_ACTION_TYPES.REGISTER_FAILURE,\n    errors,\n});\n\n// Log in actions\n\nexport const loginBegin = (email: string, password: string): LogInBeginAction => ({\n    type: AUTH_ACTION_TYPES.LOG_IN_BEGIN,\n    email,\n    password,\n});\n\nexport const loginSuccess = (token: TokenDto, user: UserDto): LogInSuccessAction => ({\n    type: AUTH_ACTION_TYPES.LOG_IN_SUCCESS,\n    token,\n    user,\n});\n\nexport const loginFailure = (errors: string[]): LogInFailureAction => ({\n    type: AUTH_ACTION_TYPES.LOG_IN_FAILURE,\n    errors,\n});\n\nexport const requestLogin = (email: string, password: string): AppThunk => async (dispatch) => {\n    dispatch(loginBegin(email, password));\n\n    const response = await requestBackend(\"auth/login\", \"POST\", {}, {email, password});\n    if (response.success) {\n        const payload = response.data as LoginDto;\n        dispatch(loginSuccess(payload.token, payload.user));\n    } else dispatch(loginFailure(response.codes));\n};\n\nexport const logout = (): LogOutAction => ({\n    type: AUTH_ACTION_TYPES.LOG_OUT,\n});\n\n// Account validation actions\n\nexport const requestValidateAccount = (validationToken: string, email: string): AppThunk => async (dispatch) => {\n    // TODO remove the email from here\n    const response = await requestBackend(\"auth/verify\", \"POST\", {}, {token: validationToken, email});\n\n    if (response.success) {\n        const {email} = response.data as {email: string};\n        dispatch(validateAccountSuccess(email));\n    } else {\n        dispatch(validateAccountFailure(response.codes));\n    }\n};\n\nexport const validateAccountSuccess = (email: string): ValidateAccountSuccessAction => ({\n    type: AUTH_ACTION_TYPES.VALIDATE_ACCOUNT_SUCCESS,\n    email,\n});\n\nexport const validateAccountFailure = (errors: string[]): ValidateAccountFailureAction => ({\n    type: AUTH_ACTION_TYPES.VALIDATE_ACCOUNT_FAILURE,\n    errors,\n});\n\n// Onboarding actions\n\nexport const setOnboardingValues = (values: Partial<OnboardingState>): SetOnboardingValuesAction => ({\n    type: AUTH_ACTION_TYPES.SET_ONBOARDING_VALUES,\n    values,\n});\n\nexport const setOnboardingOfferValue = (id: string, value: Partial<OfferValueDto>): SetOnboardingOfferValueAction => ({\n    type: AUTH_ACTION_TYPES.SET_ONBOARDING_OFFER_VALUE,\n    id,\n    value,\n});\n\nexport const debugConnect = (): AppThunk => async (dispatch) => {\n    const email = `test${Math.round(Math.random() * 1e6)}.test@univ-brest.fr`;\n    const password = \"PASSword$1\";\n\n    await dispatch(requestRegister(email, password));\n    const {verificationToken} = store.getState().auth;\n\n    if (verificationToken) {\n        await dispatch(requestValidateAccount(verificationToken, email));\n        await dispatch(requestLogin(email, password));\n        await dispatch(\n            createProfile({\n                type: \"student\",\n                birthdate: new Date().toJSON(),\n                firstName: \"Test\",\n                lastName: \"Test\",\n                degree: \"m1\",\n                gender: \"male\",\n                languages: [\n                    {code: \"fr\", level: \"native\"},\n                    {code: \"en\", level: \"b1\"},\n                ],\n                nationality: \"FR\",\n                interests: [],\n                profileOffers: [\n                    {offerId: \"provide-a-couch\", allowMale: true, allowFemale: true, allowOther: true, allowStaff: false, allowStudent: true},\n                    {offerId: \"grab-a-drink\", allowMale: true, allowFemale: true, allowOther: true, allowStaff: false, allowStudent: true},\n                    {offerId: \"talk-a-bot\", allowMale: true, allowFemale: true, allowOther: true, allowStaff: true, allowStudent: true},\n                    {offerId: \"chat-to-practice\", allowMale: true, allowFemale: true, allowOther: true, allowStaff: true, allowStudent: false},\n                ],\n                educationField: \"natural-and-physical-science\", // TODO update education field\n            }),\n        );\n    }\n};\n","import * as React from \"react\";\nimport {Text, View, StyleSheet, Linking, Platform, ActivityIndicator} from \"react-native\";\nimport {AppState, MyThunkDispatch} from \"../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {requestValidateAccount} from \"../state/auth/actions\";\nimport {rootNavigate} from \"../navigation/utils\";\nimport i18n from \"i18n-js\";\nimport {ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\n\nconst mapStateToProps = (state: AppState) => ({\n    validated: state.auth.validated,\n    registerEmail: state.auth.registerEmail,\n    verificationToken: state.auth.verificationToken,\n});\nconst reduxConnector = connect(mapStateToProps);\n\ntype ValidateEmailScreenProps = ConnectedProps<typeof reduxConnector> & ThemeProps;\n\nclass ValidateEmailScreen extends React.Component<ValidateEmailScreenProps> {\n    componentDidMount() {\n        if (Platform.OS == \"web\") {\n            // Get the URL\n            Linking.getInitialURL().then((url: string | null) => {\n                // Extract the validation token out of the URL\n                console.log(url);\n            });\n        }\n\n        // TODO remove this: temporary email validation request\n        const {dispatch, verificationToken, registerEmail} = this.props;\n        if (verificationToken) (dispatch as MyThunkDispatch)(requestValidateAccount(verificationToken, registerEmail));\n    }\n\n    render(): JSX.Element {\n        const {theme, validated} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <View style={styles.wrapper}>\n                    {!validated && (\n                        <>\n                            <Text style={styles.title}>{i18n.t(\"emailValidation.validating\")}</Text>\n                            <ActivityIndicator size=\"large\" color={theme.accentSecondary} />\n                        </>\n                    )}\n                    {validated && (\n                        <>\n                            <Text style={styles.successText}>\n                                {i18n.t(\"emailValidation.success\")[0]}\n                                <Text onPress={() => rootNavigate(\"TabLogin\")} style={{color: theme.accent}}>\n                                    {i18n.t(\"emailValidation.success\")[1]}\n                                </Text>\n                            </Text>\n                        </>\n                    )}\n                </View>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n        },\n        wrapper: {\n            width: \"70%\",\n        },\n        title: {\n            fontSize: 20,\n            marginVertical: 20,\n            textAlign: \"center\",\n        },\n        successText: {\n            fontSize: 18,\n            lineHeight: 40,\n            textAlign: \"center\",\n        },\n    });\n});\n\nexport default reduxConnector(ValidateEmailScreen);\n","import * as React from \"react\";\nimport {Text, View, StyleSheet, TouchableOpacity} from \"react-native\";\nimport {AppState} from \"../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {rootNavigate} from \"../navigation/utils\";\nimport {ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\n// Map props from state\nconst mapStateToProps = (state: AppState) => ({\n    registerEmail: state.auth.registerEmail,\n});\nconst reduxConnector = connect(mapStateToProps);\n\ntype ValidationEmailSentScreenProps = ConnectedProps<typeof reduxConnector> & ThemeProps;\n\nclass ValidationEmailSentScreen extends React.Component<ValidationEmailSentScreenProps> {\n    render(): JSX.Element {\n        const {registerEmail, theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <View style={styles.wrapper}>\n                    <Text style={{marginVertical: 100, textAlign: \"center\"}}>image here</Text>\n                    <Text style={styles.description}>\n                        To validate your account, click the link in the email we just sent to\n                    </Text>\n                    <Text style={styles.email}>{registerEmail}</Text>\n\n                    <TouchableOpacity\n                        onPress={() => {\n                            rootNavigate(\"ValidateEmailScreen\");\n                        }}\n                    >\n                        <Text style={{marginVertical: 30, textAlign: \"center\", fontSize: 16, color: \"blue\"}}>\n                            debug: click here\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n        },\n        wrapper: {\n            width: \"70%\",\n        },\n        description: {\n            fontSize: 16,\n            textAlign: \"center\",\n        },\n        email: {\n            fontSize: 16,\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n        },\n        okButton: {\n            height: 50,\n            marginVertical: 20,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(ValidationEmailSentScreen));\n","import * as Linking from \"expo-linking\";\n\nexport default {\n    prefixes: [Linking.makeUrl(\"/\")],\n    config: {\n        screens: {\n            LoginScreen: {\n                screens: {\n                    login: {\n                        screens: {\n                            LoginForm: \"login\",\n                            ForgotPassword: \"forgot-password\",\n                        },\n                    },\n                    signup: {\n                        screens: {\n                            SignupForm: \"signup\",\n                        },\n                    },\n                },\n            },\n            ValidationEmailSentScreen: \"validation-sent\",\n            MainScreen: {\n                screens: {\n                    TabDiscover: {\n                        screens: {\n                            TabDiscoverScreen: \"discover\",\n                        },\n                    },\n                    TabMatching: {\n                        screens: {\n                            TabMatchingScreen: \"match\",\n                            MAtchFilteringScren: \"match/filters\",\n                        },\n                    },\n                    TabMessaging: {\n                        screens: {\n                            TabMessagingScreen: \"messaging\",\n                        },\n                    },\n                    TabProfile: {\n                        screens: {\n                            TabProfileScreen: \"profile\",\n                        },\n                    },\n                    TabNotifications: {\n                        screens: {\n                            TabNotificationsScreen: \"notifications\",\n                        },\n                    },\n                },\n            },\n            ValidateEmailScreen: \"validate\",\n            NotFoundScreen: \"*\",\n        },\n    },\n};\n","import React from \"react\";\nimport {MaterialTopTabBarProps} from \"@react-navigation/material-top-tabs\";\nimport {View, Text, StyleSheet} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport Animated from \"react-native-reanimated\";\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\nimport {withTheme} from \"react-native-elements\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\n\n// Component props\ntype LoginTabBarProps = ThemeProps & MaterialTopTabBarProps;\n\nclass TabBarComponent extends React.Component<LoginTabBarProps> {\n    onPress(route: {name: string; key: string}, index: number): void {\n        const {navigation} = this.props;\n        const isFocused = index == this.props.state.index;\n\n        const event = navigation.emit({\n            type: \"tabPress\",\n            target: route.key,\n            canPreventDefault: true,\n        });\n\n        if (!isFocused && !event.defaultPrevented) {\n            navigation.navigate(route.name);\n        }\n    }\n\n    onLongPress(route: {name: string; key: string}): void {\n        const {navigation} = this.props;\n        navigation.emit({\n            type: \"tabLongPress\",\n            target: route.key,\n        });\n    }\n\n    render(): JSX.Element {\n        const {state, descriptors, position, theme} = this.props;\n        const styles = themedStyles(theme);\n\n        // <Image source={waveImage} resizeMode=\"contain\" style={styles.waveImageStyle} />\n        return (\n            <View style={styles.tabBarWrapper}>\n                {/*<Text style={styles.appTitle}>SEA-EU Around</Text>*/}\n                <View style={styles.tabBar}>\n                    {state.routes.map((route, index) => {\n                        const {options} = descriptors[route.key];\n                        const label = i18n.t(route.name.toLowerCase());\n                        const isFocused = state.index === index;\n\n                        const inputRange = state.routes.map((_, i) => i);\n                        const opacity = Animated.interpolate(position, {\n                            inputRange,\n                            outputRange: inputRange.map((i) => (i === index ? 0.15 : 0)),\n                        });\n\n                        return (\n                            <View key={index} style={styles.tabButton}>\n                                <Animated.View style={[styles.tabButtonBg, {opacity}]} />\n                                <TouchableOpacity\n                                    accessibilityRole=\"button\"\n                                    accessibilityLabel={options.tabBarAccessibilityLabel}\n                                    testID={options.tabBarTestID}\n                                    onPress={() => this.onPress(route, index)}\n                                    onLongPress={() => this.onLongPress(route)}\n                                >\n                                    <Text style={[styles.tabButtonText, isFocused ? styles.tabButtonTextFocused : {}]}>\n                                        {label}\n                                    </Text>\n                                </TouchableOpacity>\n                            </View>\n                        );\n                    })}\n                </View>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        tabBarWrapper: {\n            height: \"30%\",\n            backgroundColor: theme.accent,\n            alignItems: \"center\",\n            justifyContent: \"flex-end\",\n            shadowColor: \"#000\",\n            shadowOffset: {\n                width: 0,\n                height: 6,\n            },\n            shadowOpacity: 0.37,\n            shadowRadius: 7.49,\n            elevation: 12,\n        },\n        tabBar: {\n            width: \"100%\",\n            maxWidth: 400,\n            height: 40,\n            flexDirection: \"row\",\n        },\n        tabButton: {\n            flex: 1,\n        },\n        tabButtonBg: {\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: theme.accentSecondary,\n        },\n        tabButtonText: {\n            fontSize: 18,\n            lineHeight: 40,\n            letterSpacing: 1,\n            textTransform: \"capitalize\",\n            textAlign: \"center\",\n            color: \"white\",\n        },\n        tabButtonTextFocused: {\n            fontWeight: \"bold\",\n        },\n        waveImageStyle: {\n            position: \"absolute\",\n            bottom: 0,\n            padding: 0,\n            margin: 0,\n            maxWidth: \"100%\",\n            width: \"100%\",\n            height: 200,\n        },\n        /*appTitle: {\n            fontSize: 16,\n            color: theme.textInverted,\n            letterSpacing: 2,\n            marginBottom: 70,\n            fontFamily: \"sans-serif-thin\",\n        },*/\n    });\n});\n\nexport default withTheme(TabBarComponent);\n","import * as React from \"react\";\nimport {Text, TextProps, StyleSheet} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\nimport {Theme, ThemeProps} from \"../types\";\n\n// Component props\nexport type InputLabelProps = ThemeProps & TextProps;\n\nclass InputLabel extends React.Component<InputLabelProps> {\n    render(): JSX.Element {\n        const {theme, style, ...otherProps} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <Text {...otherProps} style={[styles.text, style]}>\n                {this.props.children}\n            </Text>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        text: {\n            color: theme.textLight,\n            textTransform: \"uppercase\",\n            letterSpacing: 1,\n            fontSize: 12,\n        },\n    });\n});\n\nexport default withTheme(InputLabel);\n","import * as React from \"react\";\nimport {Text, TextProps, StyleSheet} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\n\n// Component props\nexport type InputErrorTextProps = ThemeProps & TextProps & {error: string | string[] | null | undefined};\n\nclass InputErrorText extends React.Component<InputErrorTextProps> {\n    render(): JSX.Element {\n        const {theme, style, error, ...otherProps} = this.props;\n        const styles = themedStyles(theme);\n\n        const errorStr: string | null = error ? (typeof error === \"string\" ? error : error[0]) : null;\n\n        return (\n            <Text {...otherProps} style={[styles.text, style]}>\n                {errorStr ? i18n.t(errorStr) : \"\"}\n            </Text>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        text: {\n            fontSize: 12,\n            marginTop: 2,\n            marginBottom: -12, // prevents an offset from appearing when there is an error\n            color: theme.error,\n        },\n    });\n});\n\nexport default withTheme(InputErrorText);\n","import React from \"react\";\nimport {TextStyle, StyleProp, View, TextInputProps} from \"react-native\";\nimport {TextInput} from \"react-native-gesture-handler\";\nimport InputLabel from \"./InputLabel\";\nimport InputErrorText from \"./InputErrorText\";\n\nexport type ValidatedTextInputProps = {\n    value: string;\n    showErrorText?: boolean;\n    error?: string;\n    untouched?: boolean;\n    label?: string;\n    style?: StyleProp<TextStyle>;\n    wrapperStyle?: StyleProp<TextStyle>;\n    errorStyle?: StyleProp<TextStyle>;\n    validStyle?: StyleProp<TextStyle>;\n    focusedStyle?: StyleProp<TextStyle>;\n    errorTextStyle?: StyleProp<TextStyle>;\n    labelStyle?: StyleProp<TextStyle>;\n} & Partial<TextInputProps>;\n\ntype ValidatedTextInputState = {\n    focused: boolean;\n};\n\n/**\n * An improved TextInput that supports better styling (including specific focused style) and displays validation errors.\n */\nexport class ValidatedTextInput extends React.Component<ValidatedTextInputProps, ValidatedTextInputState> {\n    static defaultProps = {\n        untouched: false,\n        style: [],\n        wrapperStyle: [],\n        errorStyle: [],\n        validStyle: [],\n        focusedStyle: [],\n        errorTextStyle: [],\n        labelStyle: [],\n    };\n\n    constructor(props: ValidatedTextInputProps) {\n        super(props);\n        this.state = {focused: false} as ValidatedTextInputState;\n    }\n\n    render(): JSX.Element {\n        const {\n            showErrorText,\n            style,\n            wrapperStyle,\n            error,\n            value,\n            label,\n            untouched,\n            errorStyle,\n            validStyle,\n            focusedStyle,\n            errorTextStyle,\n            labelStyle,\n            onBlur,\n            onFocus,\n            ...otherProps\n        } = this.props;\n\n        return (\n            <View style={[wrapperStyle, {width: \"100%\", flexDirection: \"column\", position: \"relative\"}]}>\n                {label && <InputLabel style={labelStyle}>{label}</InputLabel>}\n                <TextInput\n                    style={[\n                        style,\n                        this.state.focused ? focusedStyle : {},\n                        untouched ? {} : error ? errorStyle : value.length > 0 ? validStyle : {},\n                    ]}\n                    onBlur={(e) => {\n                        if (onBlur) onBlur(e);\n                        this.setState({focused: false});\n                    }}\n                    onFocus={(e) => {\n                        if (onFocus) onFocus(e);\n                        this.setState({focused: true});\n                    }}\n                    value={value}\n                    {...otherProps}\n                />\n                {showErrorText && !untouched && error && <InputErrorText style={errorTextStyle} error={error} />}\n            </View>\n        );\n    }\n}\n","import React from \"react\";\nimport {ValidatedTextInput, ValidatedTextInputProps} from \"./ValidatedTextInput\";\n\n// Component props\nexport type FormTextInputProps = {\n    field: string;\n    touched: boolean | undefined;\n    showErrorText?: boolean;\n    handleChange<T = string | React.ChangeEvent<unknown>>(\n        field: T,\n    ): T extends React.ChangeEvent<unknown> ? void : (e: string | React.ChangeEvent<unknown>) => void;\n    handleBlur<T = string | unknown>(fieldOrEvent: T): T extends string ? (e: unknown) => void : void;\n} & ValidatedTextInputProps;\n\n/**\n * An improved TextInput for less verbose Formik usage.\n */\nexport class FormTextInput extends React.Component<FormTextInputProps> {\n    static defaultProps = {\n        showErrorText: true,\n        /* eslint-disable @typescript-eslint/no-empty-function */\n        handleChange: (): void => {},\n        handleBlur: (): void => {},\n        /* eslint-ensable @typescript-eslint/no-empty-function */\n    };\n\n    render(): JSX.Element {\n        const {field, touched, handleChange, handleBlur, error, onBlur, onChangeText, ...otherProps} = this.props;\n        return (\n            <ValidatedTextInput\n                error={touched ? error : undefined}\n                untouched={!touched}\n                onChangeText={(value: string) => {\n                    if (onChangeText) onChangeText(value);\n                    handleChange(field)(value);\n                }}\n                onBlur={(e) => {\n                    if (onBlur) onBlur(e);\n                    handleBlur(this.props.field)(e);\n                }}\n                {...otherProps}\n            />\n        );\n    }\n}\n","import {SetLocaleAction, SetThemeAction, SETTINGS_ACTION_TYPES} from \"../types\";\nimport {ThemeKey} from \"../../types\";\nimport {SupportedLocale} from \"../../localization\";\nimport i18n from \"i18n-js\";\n\nexport const setTheme = (theme: ThemeKey): SetThemeAction =>\n    ({type: SETTINGS_ACTION_TYPES.SET_THEME, theme} as SetThemeAction);\n\nexport const setLocale = (locale: SupportedLocale): SetLocaleAction => {\n    i18n.locale = locale;\n    return {type: SETTINGS_ACTION_TYPES.SET_THEME, locale} as SetLocaleAction;\n};\n","import {StyleSheet, Platform, TextStyle} from \"react-native\";\nimport {Theme} from \"../types\";\nimport {FormTextInputProps} from \"../components/FormTextInput\";\nimport {FormCheckBoxProps} from \"../components/FormCheckBox\";\nimport {preTheme} from \"./utils\";\n\nexport const formStyle = StyleSheet.create({\n    inputErrorText: {\n        fontSize: 12,\n        marginTop: 2,\n        marginBottom: -12, // prevents an offset from appearing when there is an error\n    },\n    inputRow: {\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        width: \"100%\",\n    },\n    actionRow: {\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        marginTop: 25,\n    },\n    buttonMajor: {\n        justifyContent: \"center\",\n        height: 60,\n        borderRadius: 5,\n\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    },\n    buttonMajorText: {\n        color: \"white\",\n        textAlign: \"center\",\n        fontSize: 16,\n        letterSpacing: 1,\n        textTransform: \"uppercase\",\n    },\n});\n\nexport function getLoginTextInputsStyleProps(theme: Theme, wrapperVerticalMargin = 0): Partial<FormTextInputProps> {\n    const focusedStyle = Platform.OS === \"web\" ? ({outline: \"none\"} as TextStyle) : null;\n\n    const commonStyle = StyleSheet.create({\n        textInputWrapper: {\n            width: \"100%\",\n            marginVertical: wrapperVerticalMargin,\n        },\n        textInput: {\n            width: \"100%\",\n            height: 60,\n            paddingHorizontal: 20,\n            borderRadius: 5,\n            borderWidth: 0,\n            backgroundColor: theme.accentSlight,\n        },\n        textInputError: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.error,\n        },\n        textInputValid: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.okay,\n        },\n    });\n\n    return {\n        placeholderTextColor: \"#222\",\n        wrapperStyle: commonStyle.textInputWrapper,\n        style: commonStyle.textInput,\n        errorStyle: commonStyle.textInputError,\n        validStyle: commonStyle.textInputValid,\n        focusedStyle: focusedStyle,\n    };\n}\n\nexport function getLoginCheckBoxStyleProps(theme: Theme): Partial<FormCheckBoxProps> {\n    const commonStyle = StyleSheet.create({\n        checkboxWrapper: {\n            width: \"100%\",\n            marginVertical: 5,\n        },\n        checkboxLabel: {\n            fontSize: 14,\n        },\n    });\n\n    return {\n        wrapperStyle: commonStyle.checkboxWrapper,\n        labelStyle: [commonStyle.checkboxLabel, {color: theme.text}],\n    };\n}\n\nexport const loginTabsStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: 0,\n            backgroundColor: theme.background,\n        },\n        formWrapper: {\n            flex: 1,\n            width: \"70%\",\n            maxWidth: 400,\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n    });\n});\n\nexport function getOnboardingTextInputsStyleProps(theme: Theme): Partial<FormTextInputProps> {\n    const focusedStyle =\n        Platform.OS === \"web\"\n            ? ({\n                  backgroundColor: \"transparent\",\n                  outline: \"none\",\n              } as TextStyle)\n            : null;\n\n    const commonStyle = StyleSheet.create({\n        textInputWrapper: {\n            width: \"100%\",\n            marginVertical: 10,\n        },\n        textInput: {\n            width: \"100%\",\n            height: 60,\n            borderRadius: 0,\n            borderWidth: 0,\n            borderBottomWidth: 1,\n            borderBottomColor: theme.accentTernary,\n            backgroundColor: \"transparent\",\n            fontSize: 20,\n        },\n        textInputError: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.error,\n        },\n        textInputValid: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.okay,\n        },\n    });\n\n    return {\n        wrapperStyle: commonStyle.textInputWrapper,\n        style: commonStyle.textInput,\n        errorStyle: commonStyle.textInputError,\n        validStyle: commonStyle.textInputValid,\n        focusedStyle: focusedStyle,\n    };\n}\n","import * as React from \"react\";\n\nimport {Text, View, ViewProps, StyleSheet} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../../styles/utils\";\nimport {Theme, ThemeProps} from \"../../types\";\n\n// Component props\nexport type FormErrorProps = ThemeProps & {\n    error: string;\n} & ViewProps;\n\nclass FormError extends React.Component<FormErrorProps> {\n    render(): JSX.Element {\n        const {error, theme, style, ...otherProps} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={[styles.wrapper, style]} {...otherProps}>\n                <Text style={[styles.text]}>{error}</Text>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        wrapper: {\n            marginVertical: 10,\n        },\n        text: {\n            fontSize: 14,\n            color: theme.error,\n        },\n    });\n});\n\nexport default withTheme(FormError);\n","import * as React from \"react\";\nimport {ActivityIndicator, StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {Formik, FormikProps} from \"formik\";\nimport {FormTextInput} from \"../FormTextInput\";\nimport {StackNavigationProp} from \"@react-navigation/stack\";\nimport {LoginTabNavigatorScreens} from \"../../navigation/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState, MyThunkDispatch} from \"../../state/types\";\nimport {setTheme} from \"../../state/settings/actions\";\nimport {VALIDATOR_EMAIL_LOGIN, VALIDATOR_PASSWORD_LOGIN} from \"../../validators\";\nimport {formStyle, getLoginTextInputsStyleProps} from \"../../styles/forms\";\nimport {requestLogin} from \"../../state/auth/actions\";\nimport FormError from \"./FormError\";\nimport {FormProps, Theme, ThemeProps} from \"../../types\";\nimport {preTheme} from \"../../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\ntype LoginFormState = {\n    email: string;\n    password: string;\n};\n\n// Use Yup to create the validation schema\nconst LoginFormSchema = Yup.object().shape({\n    email: VALIDATOR_EMAIL_LOGIN,\n    password: VALIDATOR_PASSWORD_LOGIN,\n});\n\n// Map props from the store\nconst mapStateToProps = (state: AppState) => ({\n    themeName: state.settings.theme,\n    connecting: state.auth.connecting,\n    remoteErrors: state.auth.loginErrors,\n    validatedEmail: state.auth.validatedEmail,\n});\nconst reduxConnector = connect(mapStateToProps);\n\n// Component props\ntype LoginFormProps = ConnectedProps<typeof reduxConnector> &\n    ThemeProps &\n    FormProps<LoginFormState> & {navigation: StackNavigationProp<LoginTabNavigatorScreens, \"LoginScreen\">};\n\nclass LoginFormComponent extends React.Component<LoginFormProps> {\n    setFieldValue: null | ((field: string, value: string, shouldValidate?: boolean | undefined) => void) = null;\n\n    componentDidUpdate(oldProps: LoginFormProps) {\n        const {validatedEmail} = this.props;\n        if (this.setFieldValue && validatedEmail && oldProps.validatedEmail != validatedEmail)\n            this.setFieldValue(\"email\", validatedEmail);\n    }\n\n    submit(values: LoginFormState) {\n        console.log(\"Login form submitted\", values);\n        (this.props.dispatch as MyThunkDispatch)(requestLogin(values.email, values.password));\n        if (this.props.onSuccessfulSubmit !== undefined) this.props.onSuccessfulSubmit(values);\n    }\n\n    render(): JSX.Element {\n        const {theme, themeName, dispatch, navigation, connecting, remoteErrors} = this.props;\n\n        const styles = themedStyles(theme);\n\n        return (\n            <Formik\n                initialValues={{email: \"\", password: \"\"} as LoginFormState}\n                validationSchema={LoginFormSchema}\n                validateOnBlur={false}\n                onSubmit={(values: LoginFormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<LoginFormState>) => {\n                    const {\n                        handleSubmit,\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        setFieldValue,\n                    } = formikProps;\n                    const textInputProps = {handleChange, handleBlur, ...getLoginTextInputsStyleProps(theme, 15)};\n                    this.setFieldValue = setFieldValue;\n\n                    return (\n                        <React.Fragment>\n                            <FormTextInput\n                                field=\"email\"\n                                placeholder={i18n.t(\"emailAddress\")}\n                                error={errors.email}\n                                value={values.email}\n                                touched={touched.email}\n                                keyboardType=\"email-address\"\n                                autoCompleteType=\"email\"\n                                {...textInputProps}\n                            />\n\n                            <FormTextInput\n                                field=\"password\"\n                                placeholder={i18n.t(\"password\")}\n                                error={errors.password}\n                                value={values.password}\n                                touched={touched.password}\n                                secureTextEntry={true}\n                                autoCompleteType=\"password\"\n                                {...textInputProps}\n                            />\n\n                            <View style={formStyle.actionRow}>\n                                <TouchableOpacity\n                                    accessibilityRole=\"button\"\n                                    accessibilityLabel={i18n.t(\"login\")}\n                                    onPress={() => handleSubmit()}\n                                    style={[styles.loginButton]}\n                                    disabled={connecting}\n                                >\n                                    {!connecting && <Text style={formStyle.buttonMajorText}>{i18n.t(\"login\")}</Text>}\n                                    {connecting && <ActivityIndicator size=\"large\" color={theme.accentSecondary} />}\n                                </TouchableOpacity>\n                            </View>\n\n                            <FormError error={remoteErrors.length > 0 ? remoteErrors[0] : \"\"} />\n\n                            <TouchableOpacity\n                                accessibilityRole=\"link\"\n                                accessibilityLabel={i18n.t(\"forgotPassword\")}\n                                onPress={() => {\n                                    navigation.navigate(\"ForgotPassword\");\n                                }}\n                                style={styles.forgotPwdLink}\n                            >\n                                <Text style={styles.forgotPasswordText}>{i18n.t(\"forgotPassword\")}</Text>\n                            </TouchableOpacity>\n\n                            <TouchableOpacity\n                                accessibilityRole=\"link\"\n                                accessibilityLabel={\"Toggle theme\"}\n                                onPress={() => {\n                                    dispatch(setTheme(themeName == \"light\" ? \"dark\" : \"light\"));\n                                }}\n                                style={styles.forgotPwdLink}\n                            >\n                                <Text style={styles.forgotPasswordText}>Toggle Theme</Text>\n                            </TouchableOpacity>\n                        </React.Fragment>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        loginButton: {\n            ...formStyle.buttonMajor,\n            width: \"60%\",\n            backgroundColor: theme.accent,\n        },\n        forgotPwdLink: {\n            marginTop: 40,\n            padding: 8, // make the button larger to click on\n        },\n        forgotPasswordText: {\n            fontSize: 14,\n            letterSpacing: 0.5,\n            color: theme.textLight,\n        },\n    });\n});\n\nexport const LoginForm = reduxConnector(withTheme(LoginFormComponent));\n","import * as React from \"react\";\nimport {Text, TouchableOpacity, View, StyleSheet} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {Formik, FormikProps} from \"formik\";\nimport {FormTextInput} from \"../FormTextInput\";\nimport {StackNavigationProp} from \"@react-navigation/stack\";\nimport {LoginTabNavigatorScreens} from \"../../navigation/types\";\nimport {formStyle, getLoginTextInputsStyleProps} from \"../../styles/forms\";\nimport {Theme, ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {VALIDATOR_EMAIL_LOGIN} from \"../../validators\";\nimport {preTheme} from \"../../styles/utils\";\n\ntype ForgotPasswordFormState = {\n    email: string;\n};\n\n// Use Yup to create the validation schema\nconst ForgotPasswordFormSchema = Yup.object().shape({\n    email: VALIDATOR_EMAIL_LOGIN,\n});\n\n// Component props\nexport type ForgotPasswordFormProps = ThemeProps & {\n    navigation: StackNavigationProp<LoginTabNavigatorScreens, \"ForgotPassword\">;\n};\n\nclass ForgotPasswordForm extends React.Component<ForgotPasswordFormProps> {\n    // Form submission handler\n    submitForm({email}: ForgotPasswordFormState) {\n        console.log(\"Reset Password form submitted\", email);\n    }\n\n    render(): JSX.Element {\n        const {theme, navigation} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <React.Fragment>\n                <View style={styles.titleWrapper}>\n                    <Text style={styles.title}>{i18n.t(\"newPassword\")}</Text>\n                    <Text style={styles.description}>{i18n.t(\"forgotPasswordExplanation\")}</Text>\n                </View>\n                <Formik\n                    initialValues={{email: \"\"} as ForgotPasswordFormState}\n                    validationSchema={ForgotPasswordFormSchema}\n                    validateOnBlur={false}\n                    onSubmit={this.submitForm}\n                >\n                    {(formikCfg: FormikProps<ForgotPasswordFormState>) => {\n                        const {handleSubmit, values, errors, touched, handleChange, handleBlur} = formikCfg;\n                        const textInputProps = {handleChange, handleBlur, ...getLoginTextInputsStyleProps(theme)};\n\n                        return (\n                            <React.Fragment>\n                                <FormTextInput\n                                    field=\"email\"\n                                    placeholder={i18n.t(\"emailAddress\")}\n                                    error={errors.email}\n                                    value={values.email}\n                                    touched={touched.email}\n                                    keyboardType=\"email-address\"\n                                    autoCompleteType=\"email\"\n                                    {...textInputProps}\n                                />\n\n                                <View style={formStyle.actionRow}>\n                                    <TouchableOpacity\n                                        accessibilityRole=\"button\"\n                                        accessibilityLabel={i18n.t(\"cancel\")}\n                                        onPress={() => navigation.goBack()}\n                                        style={[formStyle.buttonMajor, styles.buttonCancel]}\n                                    >\n                                        <Text style={formStyle.buttonMajorText}>{i18n.t(\"cancel\")}</Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity\n                                        accessibilityRole=\"button\"\n                                        accessibilityLabel={i18n.t(\"send\")}\n                                        onPress={() => handleSubmit()}\n                                        style={[formStyle.buttonMajor, styles.buttonSend]}\n                                    >\n                                        <Text style={formStyle.buttonMajorText}>{i18n.t(\"send\")}</Text>\n                                    </TouchableOpacity>\n                                </View>\n                            </React.Fragment>\n                        );\n                    }}\n                </Formik>\n            </React.Fragment>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        titleWrapper: {\n            width: \"100%\",\n            flexDirection: \"column\",\n            justifyContent: \"flex-start\",\n            marginBottom: 20,\n        },\n        title: {\n            fontSize: 22,\n            color: theme.text,\n        },\n        description: {\n            textAlign: \"justify\",\n            fontSize: 16,\n            marginTop: 10,\n            color: theme.textLight,\n        },\n        buttonSend: {\n            flex: 1,\n            backgroundColor: theme.accent,\n            marginLeft: 6,\n        },\n        buttonCancel: {\n            flex: 1,\n            backgroundColor: theme.actionNeutral,\n            marginRight: 6,\n        },\n    });\n});\n\nexport default withTheme(ForgotPasswordForm);\n","import * as React from \"react\";\nimport {View, KeyboardAvoidingView, Text} from \"react-native\";\nimport {StackScreenProps} from \"@react-navigation/stack\";\nimport {LoginTabNavigatorScreens} from \"../navigation/types\";\nimport {MyThunkDispatch} from \"../state/types\";\nimport {LoginForm} from \"../components/forms/LoginForm\";\nimport ForgotPasswordForm from \"../components/forms/ForgotPasswordForm\";\nimport {loginTabsStyles} from \"../styles/forms\";\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\nimport {debugConnect} from \"../state/auth/actions\";\nimport {rootNavigate} from \"../navigation/utils\";\nimport {ThemeProps} from \"../types\";\nimport store from \"../state/store\";\nimport {withTheme} from \"react-native-elements\";\n\ntype TabLoginScreenProps = ThemeProps & StackScreenProps<LoginTabNavigatorScreens, \"LoginScreen\">;\n\nclass LoginTabComponent extends React.Component<TabLoginScreenProps> {\n    render(): JSX.Element {\n        const {theme, navigation} = this.props;\n        const styles = loginTabsStyles(theme);\n\n        return (\n            <KeyboardAvoidingView behavior=\"height\" style={styles.container}>\n                <View style={styles.formWrapper}>\n                    <LoginForm navigation={navigation}></LoginForm>\n                    <View style={{flexDirection: \"row\"}}>\n                        <Text style={{fontSize: 20}}>debug:&nbsp;&nbsp;&nbsp;</Text>\n                        <TouchableOpacity onPress={() => rootNavigate(\"MainScreen\")}>\n                            <Text style={{fontSize: 20}}>access</Text>\n                        </TouchableOpacity>\n                        <Text style={{fontSize: 20}}> | </Text>\n                        <TouchableOpacity\n                            onPress={() => {\n                                (store.dispatch as MyThunkDispatch)(debugConnect());\n                            }}\n                        >\n                            <Text style={{fontSize: 20}}>register</Text>\n                        </TouchableOpacity>\n                        <Text style={{fontSize: 20}}> | </Text>\n                        <TouchableOpacity onPress={() => navigation.navigate(\"OnboardingScreen\")}>\n                            <Text style={{fontSize: 20}}>on-boarding</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </KeyboardAvoidingView>\n        );\n    }\n}\n\ntype TabForgotPasswordProps = ThemeProps & StackScreenProps<LoginTabNavigatorScreens, \"ForgotPassword\">;\n\nclass ForgotPasswordTabComponent extends React.Component<TabForgotPasswordProps> {\n    render(): JSX.Element {\n        const {theme, navigation} = this.props;\n        const styles = loginTabsStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <View style={styles.formWrapper}>\n                    <ForgotPasswordForm navigation={navigation}></ForgotPasswordForm>\n                </View>\n            </View>\n        );\n    }\n}\n\nexport const SubTabLogin = withTheme(LoginTabComponent);\nexport const SubTabForgotPassword = withTheme(ForgotPasswordTabComponent);\n","import * as React from \"react\";\nimport {Alert, StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {Formik, FormikProps} from \"formik\";\nimport {FormTextInput} from \"../FormTextInput\";\nimport {AppState, MyThunkDispatch} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {VALIDATOR_EMAIL_SIGNUP, VALIDATOR_PASSWORD_SIGNUP, VALIDATOR_PASSWORD_REPEAT} from \"../../validators\";\nimport {formStyle, getLoginTextInputsStyleProps} from \"../../styles/forms\";\nimport {FormProps, Theme, ThemeProps} from \"../../types\";\nimport {requestRegister} from \"../../state/auth/actions\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../../styles/utils\";\n\nexport type SignupFormState = {\n    email: string;\n    password: string;\n    passwordRepeat: string;\n};\n\nconst initialState = (): SignupFormState => ({\n    email: `kevin${Math.round(Math.random() * 1e6)}.test@univ-brest.fr`,\n    password: \"PASSword$1\",\n    passwordRepeat: \"PASSword$1\",\n});\n\n// Use Yup to create the validation schema\nconst SignupFormSchema = Yup.object().shape({\n    email: VALIDATOR_EMAIL_SIGNUP,\n    password: VALIDATOR_PASSWORD_SIGNUP,\n    passwordRepeat: VALIDATOR_PASSWORD_REPEAT,\n});\n\n// Map props from the store\nconst mapStateToProps = (state: AppState) => ({\n    registerFailure: state.auth.registerFailure,\n    registerErrors: state.auth.registerErrors,\n});\nconst reduxConnector = connect(mapStateToProps);\n\n// Component props\ntype SignupFormProps = FormProps<SignupFormState> & ConnectedProps<typeof reduxConnector> & ThemeProps;\n\nclass SignupForm extends React.Component<SignupFormProps> {\n    submit(values: SignupFormState) {\n        console.log(\"Signup form submitted\", values);\n        (this.props.dispatch as MyThunkDispatch)(requestRegister(values.email, values.password));\n        if (this.props.onSuccessfulSubmit !== undefined) this.props.onSuccessfulSubmit(values);\n    }\n\n    componentDidUpdate(/*prevProps: SignupFormProps*/) {\n        if (this.props.registerFailure) {\n            /*const errorTexts = this.props.registerErrors.map((err: string, i: number) => (\n                <Text key={i} style={[formStyle.errorText, {color: this.props.theme.error}]}>\n                    {err}\n                </Text>\n            ));*/\n\n            Alert.alert(\"Unable to register\", this.props.registerErrors[0], [\n                {text: \"OK\", onPress: () => console.log(\"OK Pressed\")},\n            ]);\n        }\n    }\n\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <React.Fragment>\n                <View style={styles.titleWrapper}>\n                    <Text style={styles.title}>{i18n.t(\"signupWelcome\")}</Text>\n                </View>\n                <Formik\n                    initialValues={initialState()}\n                    validationSchema={SignupFormSchema}\n                    validateOnChange={true}\n                    validateOnBlur={false}\n                    onSubmit={(values: SignupFormState) => this.submit(values)}\n                >\n                    {(formikProps: FormikProps<SignupFormState>) => {\n                        const {handleSubmit, values, errors, touched, handleChange, handleBlur} = formikProps;\n                        const textInputProps = {handleChange, handleBlur, ...getLoginTextInputsStyleProps(theme, 15)};\n\n                        return (\n                            <React.Fragment>\n                                <FormTextInput\n                                    field=\"email\"\n                                    placeholder={i18n.t(\"emailAddress\")}\n                                    error={errors.email}\n                                    value={values.email}\n                                    touched={touched.email}\n                                    keyboardType=\"email-address\"\n                                    autoCompleteType=\"email\"\n                                    {...textInputProps}\n                                />\n\n                                <FormTextInput\n                                    field=\"password\"\n                                    placeholder={i18n.t(\"password\")}\n                                    error={errors.password}\n                                    value={values.password}\n                                    touched={touched.password}\n                                    secureTextEntry={true}\n                                    autoCompleteType=\"password\"\n                                    {...textInputProps}\n                                />\n\n                                <FormTextInput\n                                    field=\"passwordRepeat\"\n                                    placeholder={i18n.t(\"passwordRepeat\")}\n                                    error={errors.passwordRepeat}\n                                    value={values.passwordRepeat}\n                                    touched={touched.passwordRepeat}\n                                    secureTextEntry={true}\n                                    autoCompleteType=\"password\"\n                                    {...textInputProps}\n                                />\n\n                                <View style={formStyle.actionRow}>\n                                    <TouchableOpacity\n                                        accessibilityRole=\"button\"\n                                        accessibilityLabel={i18n.t(\"createAccount\")}\n                                        onPress={() => handleSubmit()}\n                                        style={styles.createAccountButton}\n                                    >\n                                        <Text style={formStyle.buttonMajorText}>{i18n.t(\"createAccount\")}</Text>\n                                    </TouchableOpacity>\n                                </View>\n                            </React.Fragment>\n                        );\n                    }}\n                </Formik>\n            </React.Fragment>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        titleWrapper: {\n            width: \"100%\",\n            flexDirection: \"column\",\n            justifyContent: \"flex-start\",\n            marginBottom: 20,\n        },\n        title: {\n            fontSize: 22,\n            color: theme.text,\n        },\n        inlineInputs: {\n            flex: 1,\n        },\n        inlineInputLeft: {\n            marginRight: 5,\n        },\n        inlineInputRight: {\n            marginLeft: 5,\n        },\n        createAccountButton: {\n            ...formStyle.buttonMajor,\n            width: \"60%\",\n            backgroundColor: theme.accent,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(SignupForm));\n","import * as React from \"react\";\nimport {View} from \"react-native\";\nimport {ScrollView} from \"react-native-gesture-handler\";\nimport {AppState} from \"../state/types\";\nimport themes from \"../constants/themes\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport SignupForm from \"../components/forms/SignupForm\";\nimport {loginTabsStyles} from \"../styles/forms\";\n\nconst mapStateToProps = (state: AppState) => ({\n    theme: themes[state.settings.theme],\n});\nconst reduxConnector = connect(mapStateToProps);\n\ntype SignupFormProps = ConnectedProps<typeof reduxConnector>;\n\nclass SignupTabComponent extends React.Component<SignupFormProps> {\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const styles = loginTabsStyles(theme);\n\n        return (\n            <ScrollView contentContainerStyle={{paddingVertical: 50, backgroundColor: theme.background}}>\n                <View style={[styles.container]}>\n                    <View style={styles.formWrapper}>\n                        <SignupForm />\n                    </View>\n                </View>\n            </ScrollView>\n        );\n    }\n}\n\nexport default reduxConnector(SignupTabComponent);\n","import {createStackNavigator} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport {createMaterialTopTabNavigator} from \"@react-navigation/material-top-tabs\";\nimport {LoginNavigatorTabs, LoginTabNavigatorScreens} from \"../navigation/types\";\nimport LoginTabBar from \"../components/LoginTabBar\";\nimport {SubTabLogin, SubTabForgotPassword} from \"../screens/TabLoginScreen\";\nimport TabSignupFormScreen from \"../screens/TabSignupFormScreen\";\n\nconst LoginTabStack = createStackNavigator<LoginTabNavigatorScreens>();\nconst SignupTabStack = createStackNavigator();\nconst Tab = createMaterialTopTabNavigator<LoginNavigatorTabs>();\n\nfunction LoginTabNavigator(): JSX.Element {\n    return (\n        <LoginTabStack.Navigator initialRouteName=\"LoginForm\">\n            <LoginTabStack.Screen name=\"LoginForm\" component={SubTabLogin} options={{headerShown: false}} />\n            <LoginTabStack.Screen\n                name=\"ForgotPassword\"\n                component={SubTabForgotPassword}\n                options={{headerShown: false}}\n            />\n        </LoginTabStack.Navigator>\n    );\n}\n\nfunction SignupTabNavigator(): JSX.Element {\n    return (\n        <SignupTabStack.Navigator>\n            <SignupTabStack.Screen name=\"SignupForm\" component={TabSignupFormScreen} options={{headerShown: false}} />\n        </SignupTabStack.Navigator>\n    );\n}\n\nexport default function LoginNavigator(): JSX.Element {\n    return (\n        <Tab.Navigator initialRouteName=\"TabLogin\" tabBar={(props) => <LoginTabBar {...props} />}>\n            <Tab.Screen name=\"TabLogin\" component={LoginTabNavigator} />\n            <Tab.Screen name=\"TabSignup\" component={SignupTabNavigator} />\n        </Tab.Navigator>\n    );\n}\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {Text, TextStyle, TouchableOpacity, StyleSheet} from \"react-native\";\nimport {logout} from \"../state/auth/actions\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\n// Map props from store\nconst reduxConnector = connect();\n\n// Component props\nexport type LogOutButtonProps = {\n    onLogOut: () => void;\n    style: TextStyle;\n} & ConnectedProps<typeof reduxConnector> &\n    ThemeProps;\n\nclass LogOutButton extends React.Component<LogOutButtonProps> {\n    render(): JSX.Element {\n        const {dispatch, theme, onLogOut, style} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <TouchableOpacity\n                onPress={() => {\n                    dispatch(logout());\n                    if (onLogOut) onLogOut();\n                }}\n            >\n                <Text style={[styles.text, style]}>{i18n.t(\"logOut\")}</Text>\n            </TouchableOpacity>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        text: {\n            fontSize: 20,\n            color: theme.error,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(LogOutButton));\n","import {FontAwesome5} from \"@expo/vector-icons\";\nimport * as React from \"react\";\nimport {StyleSheet, Text, View} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport LogOutButton from \"../components/LogOutButton\";\nimport {rootNavigate} from \"../navigation/utils\";\nimport {preTheme} from \"../styles/utils\";\nimport {ThemeProps} from \"../types\";\n\nexport type TabNotImplementedScreenProps = ThemeProps;\n\nclass TabNotImplementedScreen extends React.Component<TabNotImplementedScreenProps> {\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <FontAwesome5 style={styles.constructionIcon} name=\"hard-hat\"></FontAwesome5>\n                <Text style={styles.title}>Under construction</Text>\n                <View style={styles.separator} />\n                <LogOutButton style={styles.logoutButton} onLogOut={() => rootNavigate(\"LoginScreen\")} />\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            width: \"100%\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n        title: {\n            width: \"100%\",\n            textAlign: \"center\",\n            fontSize: 20,\n            fontWeight: \"bold\",\n        },\n        constructionIcon: {\n            color: \"#eecc00\",\n            fontSize: 40,\n        },\n        separator: {\n            marginVertical: 30,\n            height: 1,\n            width: \"80%\",\n            backgroundColor: \"#eee\",\n        },\n        logoutButton: {\n            marginVertical: 20,\n        },\n    });\n});\n\nexport default withTheme(TabNotImplementedScreen);\n","import {Theme} from \"../types\";\nimport {StyleSheet, ViewStyle} from \"react-native\";\nimport {preTheme} from \"./utils\";\n\nexport const pickerStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        overlay: {\n            width: \"90%\",\n            height: \"70%\",\n            overflow: \"hidden\",\n        },\n        dropdownWrapper: {\n            flex: 1,\n        },\n        dropdownContainerStyle: {height: 50},\n        dropdownStyle: {backgroundColor: \"#fafafa\"},\n        dropdownItemStyle: {justifyContent: \"flex-start\"} as ViewStyle,\n        dropdownActiveItemStyle: {},\n        dropdownActiveLabelStyle: {color: theme.accentSecondary},\n        dropdownLabelStyle: {fontSize: 16},\n        okButton: {\n            width: \"100%\",\n            height: 50,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginVertical: 5,\n            paddingVertical: 20,\n            backgroundColor: theme.accent,\n        },\n        okButtonText: {\n            fontSize: 20,\n            color: theme.textInverted,\n        },\n        openButton: {\n            width: \"100%\",\n            height: 30,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            paddingVertical: 20,\n            paddingHorizontal: 20,\n            borderWidth: 1,\n            borderStyle: \"solid\",\n            borderRadius: 2,\n            backgroundColor: theme.background,\n            borderColor: theme.componentBorder,\n        },\n        openButtonText: {\n            fontSize: 14,\n            color: theme.text,\n        },\n        selectedItemView: {\n            width: \"100%\",\n            height: 20,\n            marginTop: 5,\n            fontSize: 12,\n            overflow: \"hidden\",\n        },\n    });\n});\n","import * as React from \"react\";\nimport {View, ViewProps, LayoutChangeEvent, TouchableOpacity, Text} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport {Overlay, withTheme} from \"react-native-elements\";\nimport {pickerStyles} from \"../styles/picker\";\nimport {ThemeProps} from \"../types\";\nimport {SupportedLocale} from \"../localization\";\n\ntype PickerItem = {\n    value: string;\n    label: string;\n};\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    locale: state.settings.locale,\n}));\n\n// Component props\nexport type MultiPickerProps = ConnectedProps<typeof reduxConnector> & {\n    values: string[];\n    genLabel?: (value: string) => string;\n    onChange?: (values: string[]) => void;\n    selected?: string[];\n    placeholder?: string;\n    multipleText?: string;\n    searchablePlaceholder?: string;\n    showSelected?: boolean;\n} & ViewProps &\n    ThemeProps;\n\n// Component state\nexport type MultiPickerState = {\n    items: Map<SupportedLocale, PickerItem[]>;\n    open: boolean;\n    dropdownWrapperHeight: number;\n};\n\nclass MultiPicker extends React.Component<MultiPickerProps, MultiPickerState> {\n    static defaultProps = {\n        items: [],\n        showSelected: true,\n        selected: [],\n    };\n\n    tempSelected: string[] = [];\n\n    constructor(props: MultiPickerProps) {\n        super(props);\n        this.state = {\n            items: new Map(),\n            open: false,\n            dropdownWrapperHeight: 0,\n        };\n    }\n\n    updateItems() {\n        const locale = this.props.locale;\n        if (!this.state.items.has(locale) || this.state.items.get(locale)?.length != this.props.values.length) {\n            const items = new Map(this.state.items);\n            items.set(\n                locale,\n                this.props.values.map((value: string) => ({\n                    value,\n                    label: this.props.genLabel ? i18n.t(this.props.genLabel(value)) : value,\n                })),\n            );\n            this.setState({...this.state, items});\n        }\n\n        this.tempSelected = this.props.selected || [];\n    }\n\n    componentDidMount() {\n        this.updateItems();\n    }\n\n    componentDidUpdate(oldProps: MultiPickerProps) {\n        if (oldProps.locale != this.props.locale || oldProps.values.length != this.props.values.length) {\n            this.updateItems();\n        }\n    }\n\n    open() {\n        this.tempSelected = this.props.selected || [];\n        this.setState({...this.state, open: true});\n    }\n\n    close() {\n        this.setState({...this.state, open: false});\n        if (this.props.onChange) {\n            this.props.onChange(this.tempSelected);\n        }\n    }\n\n    render(): JSX.Element {\n        const {\n            theme,\n            locale,\n            selected,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onChange,\n            genLabel,\n            placeholder,\n            multipleText,\n            searchablePlaceholder,\n            showSelected,\n            ...viewProps\n        } = this.props;\n        const styles = pickerStyles(theme);\n\n        const selectedItems = selected || [];\n\n        return (\n            <View {...viewProps}>\n                <View>\n                    <TouchableOpacity onPress={() => this.open()} style={styles.openButton}>\n                        <Text style={styles.openButtonText}>\n                            {i18n.t(\"picker.callToAction\").replace(\"%d\", selectedItems.length.toString())}\n                        </Text>\n                    </TouchableOpacity>\n                    <View>\n                        {showSelected &&\n                            selectedItems.map((val: string, i: number) => (\n                                <View key={i} style={styles.selectedItemView}>\n                                    <Text numberOfLines={1}>{genLabel ? i18n.t(genLabel(val)) : val}</Text>\n                                </View>\n                            ))}\n                    </View>\n                </View>\n                {this.state.open && (\n                    <Overlay\n                        overlayStyle={styles.overlay}\n                        isVisible={this.state.open}\n                        onRequestClose={() => this.close()}\n                        onBackdropPress={() => this.close()}\n                    >\n                        <>\n                            <View\n                                style={styles.dropdownWrapper}\n                                onLayout={(e: LayoutChangeEvent) => {\n                                    this.setState({...this.state, dropdownWrapperHeight: e.nativeEvent.layout.height});\n                                }}\n                            >\n                                <DropDownPicker\n                                    items={this.state.items.get(locale) || []}\n                                    multiple={true}\n                                    searchable={true}\n                                    defaultValue={selected}\n                                    onChangeItem={(values: string[]) => {\n                                        this.tempSelected = values;\n                                    }}\n                                    placeholder={placeholder}\n                                    multipleText={multipleText}\n                                    searchablePlaceholder={searchablePlaceholder}\n                                    scrollViewProps={{keyboardShouldPersistTaps: \"always\"}} // ensures items are clickable even when the keyboard is open\n                                    isVisible={true}\n                                    showArrow={false}\n                                    //arrowSize: 20,\n                                    dropDownMaxHeight={this.state.dropdownWrapperHeight - 50}\n                                    // Style props\n                                    containerStyle={styles.dropdownContainerStyle}\n                                    style={styles.dropdownStyle}\n                                    itemStyle={styles.dropdownItemStyle}\n                                    activeItemStyle={styles.dropdownActiveItemStyle}\n                                    activeLabelStyle={styles.dropdownActiveLabelStyle}\n                                    labelStyle={styles.dropdownLabelStyle}\n                                />\n                            </View>\n                            <View>\n                                <TouchableOpacity onPress={() => this.close()} style={styles.okButton}>\n                                    <Text style={styles.okButtonText}>OK</Text>\n                                </TouchableOpacity>\n                            </View>\n                        </>\n                    </Overlay>\n                )}\n            </View>\n        );\n    }\n}\n\nexport default reduxConnector(withTheme(MultiPicker));\n","import * as React from \"react\";\nimport {EDUCATION_FIELDS} from \"../constants/profile-constants\";\nimport i18n from \"i18n-js\";\nimport MultiPicker from \"./MultiPicker\";\n\n// Component props\nexport type EducationFieldPickerProps = {\n    fields?: string[];\n    onChange?: (fields: string[]) => void;\n};\n\nclass EducationFieldPicker extends React.Component<EducationFieldPickerProps> {\n    render(): JSX.Element {\n        const {fields, onChange} = this.props;\n\n        return (\n            <MultiPicker\n                values={EDUCATION_FIELDS}\n                genLabel={(field: string) => `educationFields.${field}`}\n                selected={fields}\n                onChange={(values: string[]) => {\n                    if (onChange) onChange(values);\n                }}\n                placeholder={i18n.t(\"educationFieldsPicker.placeholder\")}\n                multipleText={i18n.t(\"educationFieldsPicker.multiple\")}\n                searchablePlaceholder={i18n.t(\"educationFieldsPicker.searchPlaceholder\")}\n            />\n        );\n    }\n}\n\nexport default EducationFieldPicker;\n","import * as React from \"react\";\nimport {ButtonGroup} from \"react-native-elements\";\nimport i18n from \"i18n-js\";\nimport {Degree, DEGREES} from \"../constants/profile-constants\";\nimport {ViewStyle} from \"react-native\";\n\nexport type DegreeToggleProps = {\n    degree?: Degree;\n    onUpdate?: (degree?: Degree) => void;\n    style?: ViewStyle;\n};\n\nclass DegreeToggle extends React.Component<DegreeToggleProps> {\n    render(): JSX.Element {\n        const buttonLabels = DEGREES.map((d: string) => i18n.t(`degrees.${d}`));\n        const {degree, style} = this.props;\n\n        return (\n            <ButtonGroup\n                onPress={(idx: number) => {\n                    if (this.props.onUpdate) this.props.onUpdate(idx == -1 ? undefined : DEGREES[idx]);\n                }}\n                selectedIndex={degree ? DEGREES.indexOf(degree) : -1}\n                buttons={buttonLabels}\n                containerStyle={[{height: 35, marginLeft: 0, marginRight: 0}, style]}\n            />\n        );\n    }\n}\n\nexport default DegreeToggle;\n","import * as React from \"react\";\nimport {StyleSheet} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {Role, ROLES} from \"../constants/profile-constants\";\nimport {ButtonGroup, ButtonGroupProps, withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\nimport {ThemeProps} from \"../types\";\n\nexport type RoleToggleProps = {\n    role: Role;\n    onSelect?: (role: Role) => void;\n} & Partial<ButtonGroupProps> &\n    ThemeProps;\n\nfunction RoleToggle(props: RoleToggleProps): JSX.Element {\n    const {role, onSelect, theme, ...otherProps} = props;\n    const styles = themedStyles(theme);\n\n    const buttonLabels = ROLES.map((r: string) => i18n.t(`roles.${r}`));\n\n    return (\n        <ButtonGroup\n            onPress={(idx: number) => {\n                if (onSelect) onSelect(ROLES[idx]);\n            }}\n            selectedIndex={ROLES.indexOf(role)}\n            buttons={buttonLabels}\n            containerStyle={styles.container}\n            {...otherProps}\n        />\n    );\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            height: 35,\n            marginLeft: 0,\n            marginRight: 0,\n        },\n    });\n});\n\nexport default withTheme(RoleToggle);\n","import * as React from \"react\";\nimport {View} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {StaffRole, STAFF_ROLES} from \"../constants/profile-constants\";\nimport {Picker} from \"react-native\";\n\n// Component props\nexport type StaffRoleToggleProps = {\n    staffRole: StaffRole | null;\n    onSelect?: (staffRole: StaffRole) => void;\n};\n\nexport default function StaffRoleToggle(props: StaffRoleToggleProps): JSX.Element {\n    const {staffRole} = props;\n\n    const onSelect = (value: string) => {\n        if (props.onSelect) props.onSelect(value as StaffRole);\n    };\n\n    const pickerItems = STAFF_ROLES.map((r) => <Picker.Item key={r} label={i18n.t(`staffRoles.${r}`)} value={r} />);\n\n    return (\n        <View style={{width: \"100%\"}}>\n            <Picker selectedValue={staffRole} onValueChange={onSelect}>\n                {pickerItems}\n            </Picker>\n        </View>\n    );\n}\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {Gender, GENDERS} from \"../constants/profile-constants\";\nimport {ButtonGroup} from \"react-native-elements\";\n\n// Component props\nexport type GenderToggleProps = {\n    gender?: Gender | null;\n    onSelect?: (gender: Gender) => void;\n};\n\nexport function GenderToggle(props: GenderToggleProps): JSX.Element {\n    const buttonLabels = GENDERS.map((r: string) => i18n.t(`genders.${r}`));\n    const {gender} = props;\n\n    const onUpdate = (idx: number) => {\n        if (props.onSelect) props.onSelect(GENDERS[idx]);\n    };\n\n    return (\n        <ButtonGroup\n            onPress={onUpdate}\n            selectedIndex={gender !== undefined && gender !== null ? GENDERS.indexOf(gender) : -1}\n            buttons={buttonLabels}\n            containerStyle={{height: 35, marginLeft: 0, marginRight: 0}}\n        />\n    );\n}\n","import * as React from \"react\";\nimport {Platform} from \"react-native\";\nimport {MIN_AGE} from \"../constants/profile-constants\";\nimport DateTimePicker, {Event} from \"@react-native-community/datetimepicker\";\n\n// Component props\nexport type BirthDatePickerProps = {\n    date?: Date;\n    open: boolean;\n    onSelect?: (date: Date) => void;\n    onHide?: () => void;\n};\n\n// Component state\nexport type BirthDatePickerState = {\n    open: boolean;\n};\n\nclass BirthDatePicker extends React.Component<BirthDatePickerProps, BirthDatePickerState> {\n    constructor(props: BirthDatePickerProps) {\n        super(props);\n        this.state = {\n            open: props.open,\n        };\n    }\n\n    componentDidUpdate(oldProps: BirthDatePickerProps): void {\n        if (!oldProps.open && this.props.open) this.showModal();\n        if (oldProps.open && !this.props.open) this.hideModal();\n    }\n\n    showModal(): void {\n        if (!this.state.open) this.setState({...this.state, open: true});\n    }\n\n    hideModal(): void {\n        if (this.state.open) {\n            this.setState({...this.state, open: false});\n            if (this.props.onHide !== undefined) this.props.onHide();\n        }\n    }\n\n    onChange(date: Date | undefined): void {\n        if (Platform.OS != \"ios\") this.hideModal();\n        if (date && this.props.onSelect) this.props.onSelect(date);\n    }\n\n    render(): JSX.Element {\n        const {date} = this.props;\n        const {open} = this.state;\n\n        const maxDate = new Date(Date.now());\n        maxDate.setFullYear(maxDate.getFullYear() - MIN_AGE);\n\n        return (\n            <>\n                {open && (\n                    <DateTimePicker\n                        minimumDate={new Date(1900, 0, 0)}\n                        maximumDate={maxDate}\n                        value={date || maxDate}\n                        onChange={(e: Event, date: Date | undefined) => this.onChange(date)}\n                        mode=\"date\"\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default BirthDatePicker;\n","import {MaterialIcons} from \"@expo/vector-icons\";\nimport * as React from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as Permissions from \"expo-permissions\";\nimport {Platform, StyleSheet} from \"react-native\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\n// Component props\nexport type AvatarEditButtonProps = ThemeProps & {\n    onPictureSelected?: (uri: string) => void;\n};\n\nclass AvatarEditButton extends React.Component<AvatarEditButtonProps> {\n    ensurePermission = async () => {\n        if (Platform.OS !== \"web\") {\n            let {status} = await Permissions.getAsync(Permissions.CAMERA_ROLL);\n            if (status !== \"granted\") {\n                status = await (await Permissions.askAsync(Permissions.CAMERA_ROLL)).status;\n                /*if (status !== \"granted\") {\n                    alert(\"Sorry, we need camera roll permissions to make this work!\");\n                }*/\n                return status === \"granted\";\n            }\n        }\n        return true;\n    };\n\n    showPicker = async () => {\n        const authorized = this.ensurePermission();\n\n        if (authorized) {\n            try {\n                const result = await ImagePicker.launchImageLibraryAsync({\n                    mediaTypes: ImagePicker.MediaTypeOptions.All,\n                    allowsEditing: true,\n                    aspect: [1, 1],\n                    quality: 1,\n                });\n                if (!result.cancelled) {\n                    if (this.props.onPictureSelected) this.props.onPictureSelected(result.uri);\n                }\n                console.log(result);\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    };\n\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return <MaterialIcons onPress={() => this.showPicker()} size={24} style={styles.buttonStyle} name=\"image\" />;\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        buttonStyle: {\n            position: \"absolute\",\n            bottom: 0,\n            right: 0,\n            borderRadius: 20,\n            padding: 4,\n            backgroundColor: \"#eee\",\n            color: theme.accentSecondary,\n        },\n    });\n});\n\nexport default withTheme(AvatarEditButton);\n","import * as React from \"react\";\nimport {Modal, Text, TouchableOpacity, TouchableOpacityProps, View, StyleSheet} from \"react-native\";\nimport {formStyle} from \"../../styles/forms\";\nimport i18n from \"i18n-js\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {Schema, ValidationError} from \"yup\";\nimport {Theme} from \"../../types\";\nimport {preTheme} from \"../../styles/utils\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport themes from \"../../constants/themes\";\n\n// Map props from the store\nconst mapStateToProps = (state: AppState) => ({\n    theme: themes[state.settings.theme],\n});\nconst reduxConnector = connect(mapStateToProps);\n\n// Component props\ntype FormRowProps<T> = ConnectedProps<typeof reduxConnector> & {\n    label: string;\n    children: React.ReactNode;\n    display?: JSX.Element;\n    noModal: boolean;\n    overrideModal?: (hide: () => void) => JSX.Element;\n    renderInput: (value: T, error: string | null, onChange: (value: T) => void) => JSX.Element;\n    validator?: Schema<T>;\n    initialValue: T;\n    apply?: (value: T) => void;\n    locked: boolean;\n} & TouchableOpacityProps;\n\n// Component state\ntype FormRowState<T> = {\n    modalOpen: boolean;\n    error: string | null;\n    value: T;\n};\n\nclass FormRowComponent<T> extends React.Component<FormRowProps<T>, FormRowState<T>> {\n    constructor(props: FormRowProps<T>) {\n        super(props);\n        this.state = {\n            modalOpen: false,\n            error: null,\n            value: props.initialValue,\n        };\n    }\n\n    setModal(modalOpen: boolean): void {\n        // Reset to initial value when opening the modal\n        this.setState({...this.state, modalOpen, value: this.props.initialValue, error: null});\n    }\n\n    setError(error: string | null): void {\n        this.setState({...this.state, error});\n    }\n\n    onChange(value: T): void {\n        this.setState({...this.state, value}, () => {\n            this.validate();\n        });\n    }\n\n    validate(): boolean {\n        const {validator} = this.props;\n        if (!validator) return true;\n        try {\n            validator.validateSync(this.state.value);\n            this.setError(null);\n            return true;\n        } catch (err) {\n            this.setError((err as ValidationError).errors[0]);\n            return false;\n        }\n    }\n\n    apply(): void {\n        if (this.validate()) {\n            this.setModal(false);\n            if (this.props.apply) this.props.apply(this.state.value);\n        }\n    }\n\n    renderModalContent = (): JSX.Element => {\n        const {label, theme} = this.props;\n        const {value, error} = this.state;\n\n        const styles = themedStyles(theme);\n\n        return (\n            <TouchableOpacity style={styles.modalTouchable} onPress={() => this.setModal(false)} activeOpacity={1}>\n                <View style={styles.modalWrapper}>\n                    <Text style={styles.modalLabel}>{label}</Text>\n                    {this.props.renderInput(value, error, (value: T) => this.onChange(value))}\n                    <Text style={styles.modalErrorText}>{/*touched && */ error ? i18n.t(error) : \"\"}</Text>\n                    <View style={styles.modalActions}>\n                        <TouchableOpacity\n                            accessibilityRole=\"button\"\n                            accessibilityLabel=\"CANCEL\"\n                            onPress={() => this.setModal(false)}\n                            style={styles.modalCancel}\n                        >\n                            <Text style={styles.modalActionText}>{i18n.t(\"cancel\")}</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity\n                            accessibilityRole=\"button\"\n                            accessibilityLabel=\"OK\"\n                            onPress={() => this.apply()}\n                            style={styles.modalOk}\n                        >\n                            <Text style={styles.modalActionText}>{i18n.t(\"apply\")}</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    };\n\n    render(): JSX.Element {\n        const {theme, label, children, display, overrideModal, noModal, style, locked, ...otherProps} = this.props;\n        const {modalOpen} = this.state;\n\n        const styles = themedStyles(theme);\n\n        return (\n            <>\n                <TouchableOpacity\n                    style={[styles.cardWrapper, style]}\n                    activeOpacity={0.9}\n                    disabled={noModal}\n                    onPress={() => {\n                        if (!locked) this.setModal(true);\n                    }}\n                    {...otherProps}\n                >\n                    <View style={styles.cardContent}>\n                        <Text style={styles.cardLabel}>{label}</Text>\n                        <View>\n                            {display !== undefined && display}\n                            {display === undefined && children}\n                        </View>\n                    </View>\n                    {!noModal && (\n                        <View style={styles.rightIconContainer}>\n                            <MaterialIcons\n                                name={locked ? \"lock\" : \"keyboard-arrow-right\"}\n                                size={locked ? 30 : 40}\n                                style={styles.rightIcon}\n                            ></MaterialIcons>\n                        </View>\n                    )}\n                </TouchableOpacity>\n                {!noModal && (\n                    <React.Fragment>\n                        {overrideModal !== undefined && modalOpen && overrideModal(() => this.setModal(false))}\n                        {overrideModal === undefined && modalOpen && (\n                            <Modal transparent={true} visible={modalOpen} animationType=\"slide\">\n                                {this.renderModalContent()}\n                            </Modal>\n                        )}\n                    </React.Fragment>\n                )}\n            </>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        modalTouchable: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n        },\n        modalWrapper: {\n            width: \"80%\",\n            maxWidth: 500,\n            backgroundColor: \"#fff\",\n            paddingHorizontal: 10,\n            paddingVertical: 20,\n            borderRadius: 4,\n            borderColor: \"#ccc\",\n            borderWidth: 0.5,\n            borderStyle: \"solid\",\n        },\n        modalErrorText: {\n            fontSize: 12,\n            color: theme.error,\n        },\n        modalLabel: {\n            color: theme.textLight,\n            textTransform: \"uppercase\",\n            letterSpacing: 1.5,\n            fontSize: 13,\n            marginBottom: 12,\n        },\n        modalActions: {\n            ...formStyle.actionRow,\n            height: 50,\n            marginTop: 20,\n        },\n        modalCancel: {\n            ...formStyle.buttonMajor,\n            flex: 1,\n            backgroundColor: theme.actionNeutral,\n            marginRight: 6,\n            height: 50,\n        },\n        modalOk: {\n            ...formStyle.buttonMajor,\n            flex: 1,\n            backgroundColor: theme.accent,\n            marginLeft: 6,\n            height: 50,\n        },\n        modalActionText: {\n            ...formStyle.buttonMajorText,\n            lineHeight: 50,\n        },\n        cardWrapper: {\n            width: \"100%\",\n            flexDirection: \"row\",\n            backgroundColor: \"#fff\",\n            paddingHorizontal: 10,\n            elevation: 1,\n            justifyContent: \"space-evenly\",\n            paddingVertical: 15,\n            minHeight: 80,\n        },\n        cardContent: {\n            flex: 1,\n            flexDirection: \"column\",\n            //justifyContent: \"space-evenly\",\n            justifyContent: \"space-between\",\n        },\n        cardLabel: {\n            color: theme.textLight,\n            textTransform: \"uppercase\",\n            letterSpacing: 1,\n            fontSize: 11,\n            marginBottom: 10,\n        },\n        rightIconContainer: {justifyContent: \"center\"},\n        rightIcon: {color: theme.textLight},\n    });\n});\n\nexport default reduxConnector(FormRowComponent);\n","import * as React from \"react\";\n\nimport {Text, TextProps} from \"react-native\";\nimport i18n from \"i18n-js\";\n\n// Component props\nexport type FormattedDateProps = {\n    date?: Date;\n} & TextProps;\n\nexport function FormattedDate(props: FormattedDateProps): JSX.Element {\n    const {date, ...otherProps} = props;\n\n    if (date) {\n        const localizedMonth = i18n.t(`months.${date.getMonth()}`);\n        const paddedDay = ((date.getDate() + \"\").length == 1 ? \"0\" : \"\") + date.getDate();\n        const formattedDate = `${paddedDay} ${localizedMonth} ${date.getFullYear()}`;\n\n        return <Text {...otherProps}>{formattedDate}</Text>;\n    } else return <></>;\n}\n","import * as React from \"react\";\nimport {StyleSheet} from \"react-native\";\nimport CountryPicker, {Country, CountryCode, TranslationLanguageCode} from \"react-native-country-picker-modal\";\nimport i18n from \"i18n-js\";\nimport {ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\n\n// Component props\nexport type NationalityPickerProps = ThemeProps & {\n    nationality?: CountryCode;\n    open?: boolean;\n    onSelect?: (countryCode: CountryCode) => void;\n    onHide?: () => void;\n};\n\n// Component state\nexport type NationalityPickerState = {\n    open: boolean;\n};\n\nclass NationalityPicker extends React.Component<NationalityPickerProps, NationalityPickerState> {\n    constructor(props: NationalityPickerProps) {\n        super(props);\n        this.state = {\n            open: props.open === undefined ? true : props.open,\n        };\n    }\n\n    componentDidUpdate(oldProps: NationalityPickerProps) {\n        if (!oldProps.open && this.props.open) this.showModal();\n        if (oldProps.open && !this.props.open) this.hideModal();\n    }\n\n    showModal(): void {\n        if (!this.state.open) this.setState({...this.state, open: true});\n    }\n\n    hideModal(): void {\n        if (this.state.open) {\n            this.setState({...this.state, open: false});\n            if (this.props.onHide !== undefined) this.props.onHide();\n        }\n    }\n\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const {open} = this.state;\n        const styles = themedStyles(theme);\n\n        return (\n            <CountryPicker\n                countryCode={this.props.nationality || \"FR\"}\n                filterProps={{placeholder: i18n.t(\"search\")}}\n                withFlag={true}\n                withFilter={true}\n                withEmoji={false}\n                onSelect={(country: Country) => {\n                    if (this.props.onSelect) this.props.onSelect(country.cca2);\n                }}\n                onClose={() => this.hideModal()}\n                translation={i18n.t(\"countryPickerLanguageCode\") as TranslationLanguageCode}\n                visible={open}\n                containerButtonStyle={styles.pickerContainerButton}\n            ></CountryPicker>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        pickerContainerButton: {\n            display: \"none\",\n        },\n    });\n});\n\nexport default withTheme(NationalityPicker);\n","import * as React from \"react\";\nimport {Text, TextProps, View} from \"react-native\";\nimport {CountryCode, Flag, TranslationLanguageCode} from \"react-native-country-picker-modal\";\nimport {CountryInfo, getCountryInfoAsync} from \"react-native-country-picker-modal/lib/CountryService\";\nimport i18n from \"i18n-js\";\n\n// Component props\nexport type FormattedNationalityProps = {\n    countryCode: CountryCode;\n    flagSize?: number;\n} & TextProps;\n\n// Component state\nexport type FormattedNationalityState = {\n    countryName: string;\n};\n\nexport class FormattedNationality extends React.Component<FormattedNationalityProps, FormattedNationalityState> {\n    constructor(props: FormattedNationalityProps) {\n        super(props);\n        this.state = {\n            countryName: \"\",\n        };\n        this.updateCountryName();\n    }\n\n    updateCountryName(): void {\n        const {countryCode} = this.props;\n        const translation = i18n.t(\"countryPickerLanguageCode\") as TranslationLanguageCode;\n        getCountryInfoAsync({countryCode, translation}).then((info: CountryInfo) => {\n            this.setState({countryName: info.countryName});\n        });\n    }\n\n    componentDidUpdate(prevProps: FormattedNationalityProps): void {\n        if (this.props.countryCode != prevProps.countryCode) {\n            this.updateCountryName();\n        }\n    }\n\n    render(): JSX.Element {\n        const {countryCode, ...otherProps} = this.props;\n        const {countryName} = this.state;\n\n        const flagSize = this.props.flagSize || 20;\n\n        return (\n            <View style={{flexDirection: \"row\"}}>\n                <Flag countryCode={countryCode} flagSize={flagSize} withEmoji={false}></Flag>\n                <Text {...otherProps}>{countryName}</Text>\n            </View>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Text, TextProps, View, ViewStyle} from \"react-native\";\nimport {Flag} from \"react-native-country-picker-modal\";\nimport i18n from \"i18n-js\";\nimport {University} from \"../constants/universities\";\n\n// Component props\nexport type FormattedUniversityProps = {\n    university: University | null;\n    containerStyle: ViewStyle;\n} & TextProps;\n\nexport class FormattedUniversity extends React.Component<FormattedUniversityProps> {\n    render(): JSX.Element {\n        const {university, ...otherProps} = this.props;\n\n        return (\n            <View style={[{flexDirection: \"row\"}, this.props.containerStyle]}>\n                {university && (\n                    <>\n                        <Flag countryCode={university.country} flagSize={18} withEmoji={false}></Flag>\n                        <Text {...otherProps}>{i18n.t(`universities.${university.key}`)}</Text>\n                    </>\n                )}\n            </View>\n        );\n    }\n}\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport {InterestDto} from \"../api/dto\";\nimport MultiPicker from \"./MultiPicker\";\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    allInterests: state.profile.interests,\n}));\n\nlet values: string[] = [];\n\n// Component props\nexport type InterestsPickerProps = ConnectedProps<typeof reduxConnector> & {\n    interests: string[];\n    onChange?: (interests: string[]) => void;\n};\n\nclass InterestsPicker extends React.Component<InterestsPickerProps> {\n    componentDidMount() {\n        if (values.length == 0) this.updateValues();\n    }\n\n    componentDidUpdate(oldProps: InterestsPickerProps) {\n        if (oldProps.allInterests.length != this.props.allInterests.length) this.updateValues();\n    }\n\n    updateValues() {\n        values = this.props.allInterests.map((interest: InterestDto) => interest.id);\n\n        console.log(\"Interests : \" + this.props.allInterests.length);\n        this.forceUpdate();\n    }\n\n    render(): JSX.Element {\n        const {interests, onChange} = this.props;\n\n        return (\n            <MultiPicker\n                values={values}\n                genLabel={(interestId: string) => `interestNames.${interestId}`}\n                selected={interests}\n                onChange={(values: string[]) => {\n                    if (onChange) onChange(values);\n                }}\n                placeholder={i18n.t(\"interestsPicker.placeholder\")}\n                multipleText={i18n.t(\"interestsPicker.multiple\")}\n                searchablePlaceholder={i18n.t(\"interestsPicker.searchPlaceholder\")}\n            />\n        );\n    }\n}\n\nexport default reduxConnector(InterestsPicker);\n","import * as React from \"react\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport i18n from \"i18n-js\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport {View, ViewProps, StyleSheet} from \"react-native\";\nimport {ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    languageItems: state.settings.localizedLanguageItems,\n}));\n\n// Component props\nexport type LanguagePickerProps = ConnectedProps<typeof reduxConnector> & {\n    languages: string[];\n    single: boolean;\n    onChange?: (languages: string[]) => void;\n} & ViewProps &\n    ThemeProps;\n\ntype PickerItem = {\n    value: string;\n    label: string;\n};\n\nclass LanguagePicker extends React.Component<LanguagePickerProps> {\n    static defaultProps = {\n        languages: [],\n    };\n\n    render(): JSX.Element {\n        const {onChange, languageItems, single, languages, theme, ...viewProps} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View {...viewProps}>\n                <DropDownPicker\n                    items={languageItems}\n                    multiple={!single}\n                    searchable={true}\n                    placeholder={i18n.t(`languagePicker.placeholder${single ? \"Single\" : \"Multiple\"}`)}\n                    searchablePlaceholder={i18n.t(\"languagePicker.searchPlaceholder\")}\n                    onChangeItem={(items: PickerItem | PickerItem[]) => {\n                        const languages = (Array.isArray(items) ? items : [items]).map((it: PickerItem) => it.value);\n                        if (onChange) onChange(languages);\n                    }}\n                    defaultValue={single ? languages[0] : languages}\n                    style={styles.picker}\n                    itemStyle={styles.pickerItem}\n                    labelStyle={styles.pickerLabel}\n                    containerStyle={styles.containerStyle}\n                    dropDownMaxHeight={300}\n                    arrowSize={20}\n                ></DropDownPicker>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        picker: {\n            backgroundColor: \"#fafafa\",\n            // just setting borderRadius won't work.\n            // See https://github.com/hossein-zare/react-native-dropdown-picker#borderradius\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n        containerStyle: {height: 50},\n        pickerItem: {justifyContent: \"flex-start\"},\n        pickerLabel: {fontSize: 16},\n    });\n});\n\nexport default reduxConnector(withTheme(LanguagePicker));\n","import * as React from \"react\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport i18n from \"i18n-js\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport {View, ViewProps, StyleSheet} from \"react-native\";\nimport {LanguageLevel, LANGUAGE_LEVELS} from \"../constants/profile-constants\";\nimport {ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\nimport {SupportedLocale} from \"../localization\";\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    locale: state.settings.locale,\n}));\n\n// Component props\nexport type LanguageLevelPickerProps = {\n    level: LanguageLevel;\n    onChange?: (level: LanguageLevel) => void;\n} & ViewProps &\n    ThemeProps &\n    ConnectedProps<typeof reduxConnector>;\n\ntype PickerItem = {\n    value: LanguageLevel;\n    label: string;\n};\n\nconst items: Map<SupportedLocale, PickerItem[]> = new Map();\n\nfunction updateItems(locale: SupportedLocale) {\n    if (!items.has(locale)) {\n        items.set(\n            locale,\n            LANGUAGE_LEVELS.map((code: LanguageLevel) => ({\n                label: i18n.t(`languageLevels.${code}`),\n                value: code,\n            })),\n        );\n    }\n}\n\nclass LanguageLevelPicker extends React.Component<LanguageLevelPickerProps> {\n    constructor(props: LanguageLevelPickerProps) {\n        super(props);\n        updateItems(this.props.locale);\n    }\n\n    componentDidUpdate(oldProps: LanguageLevelPickerProps) {\n        const locale = this.props.locale;\n        if (oldProps.locale != locale) updateItems(locale);\n    }\n\n    render(): JSX.Element {\n        const {onChange, locale, level, theme, ...viewProps} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View {...viewProps}>\n                <DropDownPicker\n                    items={items.get(locale) || []}\n                    defaultValue={level}\n                    multiple={false}\n                    searchable={false}\n                    placeholder={i18n.t(\"languageLevelPicker.placeholder\")}\n                    onChangeItem={(item: PickerItem) => {\n                        if (onChange) onChange(item.value);\n                    }}\n                    style={styles.picker}\n                    containerStyle={styles.pickerContainer}\n                    itemStyle={styles.pickerItem}\n                    labelStyle={styles.pickerLabel}\n                    dropDownMaxHeight={300}\n                    arrowSize={20}\n                ></DropDownPicker>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        picker: {\n            backgroundColor: \"#fafafa\",\n            // just setting borderRadius won't work.\n            // See https://github.com/hossein-zare/react-native-dropdown-picker#borderradius\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n        pickerContainer: {maxWidth: 120, height: 50, borderRadius: 0},\n        pickerItem: {justifyContent: \"flex-start\"},\n        pickerLabel: {fontSize: 16},\n    });\n});\n\nexport default reduxConnector(withTheme(LanguageLevelPicker));\n","import * as React from \"react\";\nimport {View, StyleSheet, ViewStyle} from \"react-native\";\nimport LanguagePicker from \"./LanguagePicker\";\nimport LanguageLevelPicker from \"./LanguageLevelPicker\";\nimport InputErrorText from \"./InputErrorText\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {LanguageLevel} from \"../constants/profile-constants\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\nimport {SpokenLanguageDto} from \"../api/dto\";\n\n// Component props\nexport type SpokenLanguagesInputProps = ThemeProps & {\n    languages: SpokenLanguageDto[];\n    onChange?: (languages: SpokenLanguageDto[], hasErrors: boolean) => void;\n    style?: ViewStyle;\n};\n\n// Component state\nexport type SpokenLanguagesInputState = {\n    languages: Partial<SpokenLanguageDto>[];\n    errors: (string | boolean)[];\n};\n\n// TODO move\nconst MAX_LANGUAGES = 5;\n\nclass SpokenLanguagesInput extends React.Component<SpokenLanguagesInputProps, SpokenLanguagesInputState> {\n    constructor(props: SpokenLanguagesInputProps) {\n        super(props);\n        const languages = props.languages || [];\n        this.state = {\n            languages,\n            errors: languages.map(() => false),\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.languages.length == 0) this.addRow();\n    }\n\n    onChange(languages: Partial<SpokenLanguageDto>[]) {\n        const errors = this.computeErrors(languages);\n        this.setState({...this.state, languages, errors});\n\n        if (this.props.onChange) {\n            const hasErrors = errors.filter((e: string | boolean) => e !== false).length > 0;\n            this.props.onChange(\n                languages\n                    .filter((l: Partial<SpokenLanguageDto>) => l.code && l.level)\n                    .map((l: Partial<SpokenLanguageDto>) => l as SpokenLanguageDto),\n                hasErrors,\n            );\n        }\n    }\n\n    computeErrors(languages: Partial<SpokenLanguageDto>[]): (string | boolean)[] {\n        return languages.map((sl: Partial<SpokenLanguageDto>) => {\n            const multipleOccurrences =\n                languages.filter((l: Partial<SpokenLanguageDto>) => l.code && l.code == sl.code).length > 1;\n            return multipleOccurrences ? \"validation.languages.multiple\" : !sl.code || !sl.level;\n        });\n    }\n\n    addRow() {\n        if (this.state.languages.length < MAX_LANGUAGES) {\n            const languages = this.state.languages.concat([{code: \"\"}]);\n            this.onChange(languages);\n        }\n    }\n\n    removeRow(idx: number) {\n        if (idx >= 0 && idx < this.state.languages.length) {\n            const languages = this.state.languages.slice(); // copy\n            languages.splice(idx, 1);\n            this.onChange(languages);\n        }\n    }\n\n    setLanguageCode(idx: number, code: string) {\n        const languages = this.state.languages.slice(); // copy\n        languages[idx].code = code;\n        this.onChange(languages);\n    }\n\n    setLanguageLevel(idx: number, level: LanguageLevel) {\n        const languages = this.state.languages.slice(); // copy\n        languages[idx].level = level;\n        this.onChange(languages);\n    }\n\n    render(): JSX.Element {\n        const {theme, style} = this.props;\n        const {languages} = this.state;\n        const styles = themedStyles(theme);\n\n        const rows = languages.map((sl: Partial<SpokenLanguageDto>, i: number) => {\n            const error = this.state.errors[i];\n            return (\n                <View key={i} style={styles.rowContainer}>\n                    <View style={styles.inputRowContainer}>\n                        <LanguagePicker\n                            single={true}\n                            languages={[sl.code]}\n                            style={styles.languagePicker}\n                            pickerStyle={styles.inputs}\n                            onChange={(languageCodes: string[]) => this.setLanguageCode(i, languageCodes[0])}\n                        />\n                        <LanguageLevelPicker\n                            level={sl.level}\n                            style={styles.levelPicker}\n                            onChange={(level: LanguageLevel) => this.setLanguageLevel(i, level)}\n                        ></LanguageLevelPicker>\n                        <MaterialIcons onPress={() => this.removeRow(i)} style={styles.deleteIcon} name=\"delete\" />\n                    </View>\n                    {typeof error === \"string\" && (\n                        <View style={styles.errorRowContainer}>\n                            <InputErrorText error={error} />\n                        </View>\n                    )}\n                </View>\n            );\n        });\n\n        const canAddMore =\n            this.state.languages.length < MAX_LANGUAGES &&\n            this.state.languages.filter((sl: Partial<SpokenLanguageDto>) => !sl.level || !sl.code).length == 0;\n\n        return (\n            <View style={style}>\n                {rows}\n                <View style={styles.plusButtonWrapper}>\n                    {canAddMore && <MaterialIcons onPress={() => this.addRow()} style={styles.plusButton} name=\"add\" />}\n                </View>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        rowContainer: {\n            flexDirection: \"column\",\n            width: \"100%\",\n            marginBottom: 8,\n        },\n        inputRowContainer: {\n            flexDirection: \"row\",\n            alignItems: \"center\",\n        },\n        errorRowContainer: {\n            marginBottom: 8,\n        },\n        plusButtonWrapper: {\n            alignItems: \"center\",\n            marginTop: 10,\n        },\n        plusButton: {\n            width: 36,\n            height: 36,\n            fontSize: 36,\n            borderRadius: 18,\n            color: theme.background,\n            backgroundColor: theme.accent,\n        },\n        deleteIcon: {\n            fontSize: 24,\n            color: theme.error,\n        },\n        inputs: {\n            borderRadius: 0,\n        },\n        languagePicker: {\n            flex: 1,\n            flexGrow: 3,\n        },\n        levelPicker: {\n            flex: 1,\n            flexGrow: 2,\n            marginHorizontal: 5,\n        },\n    });\n});\n\nexport default withTheme(SpokenLanguagesInput);\n","import * as React from \"react\";\nimport {KeyboardAvoidingView, Platform, Text, TextStyle, View} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {Avatar, withTheme} from \"react-native-elements\";\nimport EducationFieldPicker from \"../EducationFieldPicker\";\nimport {ScrollView, StyleSheet} from \"react-native\";\nimport DegreeToggle from \"../DegreeToggle\";\nimport {CountryCode} from \"../../model/country-codes\";\nimport RoleToggle from \"../RoleToggle\";\nimport {Degree, Gender, StaffRole} from \"../../constants/profile-constants\";\nimport StaffRoleToggle from \"../StaffRoleToggle\";\nimport {GenderToggle} from \"../GenderToggle\";\nimport BirthDatePicker from \"../BirthDatePicker\";\nimport AvatarEditButton from \"../AvatarEditButton\";\nimport FormRow from \"./FormRow\";\nimport {ValidatedTextInput} from \"../ValidatedTextInput\";\nimport {FormattedDate} from \"../FormattedDate\";\nimport NationalityPicker from \"../NationalityPicker\";\nimport {FormattedNationality} from \"../FormattedNationality\";\nimport {getUniversityFromEmail} from \"../../model/utils\";\nimport {FormattedUniversity} from \"../FormattedUniversity\";\nimport InterestsPicker from \"../InterestsPicker\";\nimport {SpokenLanguageDto, UserDto, UserProfileDto} from \"../../api/dto\";\nimport {VALIDATOR_ONBOARDING_LANGUAGES} from \"../../validators\";\nimport SpokenLanguagesInput from \"../SpokenLanguagesInput\";\nimport {Theme, ThemeProps} from \"../../types\";\nimport {preTheme} from \"../../styles/utils\";\n\n// Component props\nexport type EditProfileFormProps = ThemeProps & {\n    user: UserDto;\n    onFieldChanged?: (fields: Partial<UserProfileDto>) => void;\n};\n\nfunction FormFieldSpacer(): JSX.Element {\n    return <View style={{height: 30}}></View>;\n}\n\nclass EditProfileForm extends React.Component<EditProfileFormProps> {\n    render() {\n        const {theme, user} = this.props;\n        const styles = themedStyles(theme);\n\n        const profile = user.profile;\n\n        const onFieldChanged = (fields: Partial<UserProfileDto>) => {\n            if (this.props.onFieldChanged !== undefined) this.props.onFieldChanged(fields);\n        };\n\n        // TODO display origin university\n\n        const textInputStyleProps = {\n            placeholderTextColor: \"#222\",\n            style: {\n                width: \"100%\",\n                height: 50,\n                paddingHorizontal: 20,\n                borderRadius: 5,\n                borderWidth: 0,\n                backgroundColor: theme.accentSlight,\n            },\n            errorStyle: {\n                borderBottomWidth: 2,\n                borderBottomColor: theme.error,\n            },\n            validStyle: {\n                borderBottomWidth: 2,\n                borderBottomColor: theme.okay,\n            },\n            focusedStyle: Platform.OS === \"web\" ? ({outlineColor: \"transparent\"} as TextStyle) : null,\n        };\n\n        return (\n            <View style={styles.screenWrapper}>\n                <View style={[styles.topView, {backgroundColor: theme.accent}]}>\n                    <Avatar\n                        size={120}\n                        rounded\n                        title={(profile.firstName[0] + profile.lastName[0]).toUpperCase()}\n                        containerStyle={{backgroundColor: theme.accentSecondary}}\n                        source={profile.avatarUri === \"\" ? undefined : {uri: profile.avatarUri}}\n                    >\n                        <AvatarEditButton\n                            onPictureSelected={(avatarUri: string) => {\n                                onFieldChanged({avatarUri});\n                            }}\n                        />\n                    </Avatar>\n                    <Text style={styles.name}>{profile.firstName + \" \" + profile.lastName}</Text>\n                    <FormattedUniversity\n                        containerStyle={styles.universityContainer}\n                        style={styles.university}\n                        university={getUniversityFromEmail(user.email)}\n                    ></FormattedUniversity>\n                </View>\n                <ScrollView style={styles.scrollWrapper} keyboardShouldPersistTaps=\"always\">\n                    <KeyboardAvoidingView behavior=\"padding\" keyboardVerticalOffset={-100} style={styles.formWrapper}>\n                        <View style={styles.titleWrapper}>\n                            <Text style={styles.title}>{i18n.t(\"myProfile\")}</Text>\n                        </View>\n                        <FormRow\n                            label={i18n.t(\"emailAddress\")}\n                            initialValue={user.email}\n                            // validator={VALIDATOR_EMAIL}\n                            display={<Text>{user.email}</Text>}\n                            renderInput={(value: string, error: string | null, onChange: (value: string) => void) => (\n                                <ValidatedTextInput\n                                    placeholder={i18n.t(\"emailAddress\")}\n                                    value={value}\n                                    error={error || undefined}\n                                    onChangeText={(val) => onChange(val)}\n                                    keyboardType=\"email-address\"\n                                    autoCompleteType=\"email\"\n                                    autoFocus\n                                    {...textInputStyleProps}\n                                />\n                            )}\n                            //apply={(email: string) => onFieldChanged({email})}\n                            locked={true}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"dateOfBirth\")}\n                            initialValue={profile.birthdate}\n                            display={<FormattedDate date={profile.birthdate} />}\n                            overrideModal={(hide: () => void) => (\n                                <BirthDatePicker\n                                    date={profile.birthdate}\n                                    open={true}\n                                    onSelect={(birthdate: Date) => onFieldChanged({birthdate})}\n                                    onHide={hide}\n                                />\n                            )}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"nationality\")}\n                            initialValue={profile.nationality}\n                            display={<FormattedNationality countryCode={profile.nationality} />}\n                            overrideModal={(hide: () => void) => (\n                                <NationalityPicker\n                                    nationality={profile.nationality}\n                                    onSelect={(countryCode: CountryCode) => onFieldChanged({nationality: countryCode})}\n                                    onHide={hide}\n                                />\n                            )}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"gender\")}\n                            initialValue={profile.gender}\n                            display={\n                                <GenderToggle\n                                    gender={profile.gender}\n                                    onSelect={(gender: Gender) => onFieldChanged({gender})}\n                                />\n                            }\n                            noModal={true}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"role\")}\n                            initialValue={user.role}\n                            display={\n                                <React.Fragment>\n                                    <RoleToggle\n                                        role={user.role}\n                                        /*onSelect={(role: Role) => onFieldChanged({role})}*/\n                                        disabled={true}\n                                    />\n                                    {user.role == \"staff\" && (\n                                        <StaffRoleToggle\n                                            staffRole={profile.staffRole || null}\n                                            onSelect={(staffRole: StaffRole) => onFieldChanged({staffRole})}\n                                        />\n                                    )}\n                                    {user.role == \"student\" && (\n                                        <DegreeToggle\n                                            degree={profile.degree}\n                                            onUpdate={(degree?: Degree) => onFieldChanged({degree})}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            }\n                            noModal={true}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"fieldsOfEducation\")}\n                            initialValue={profile.educationFields}\n                            display={<EducationFieldPicker fields={profile.educationFields}></EducationFieldPicker>}\n                            noModal={true}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"interests\")}\n                            initialValue={profile.interests}\n                            display={<InterestsPicker interests={profile.interests}></InterestsPicker>}\n                            noModal={true}\n                        />\n                        <FormFieldSpacer />\n                        <FormRow\n                            label={i18n.t(\"spokenLanguages\")}\n                            initialValue={profile.languages}\n                            validator={VALIDATOR_ONBOARDING_LANGUAGES}\n                            display={\n                                <>\n                                    {profile.languages.map((l: SpokenLanguageDto, i: number) => (\n                                        <View key={i}>\n                                            <Text>\n                                                {i18n.t(`languageNames.${l.code}`)} (\n                                                {i18n.t(`languageLevels.${l.level}`)})\n                                            </Text>\n                                        </View>\n                                    ))}\n                                </>\n                            }\n                            renderInput={(\n                                value: SpokenLanguageDto[],\n                                error: string | null,\n                                onChange: (value: SpokenLanguageDto[]) => void,\n                            ) => (\n                                <>\n                                    <SpokenLanguagesInput\n                                        languages={value}\n                                        onChange={(languages: SpokenLanguageDto[]) => onChange(languages)}\n                                    />\n                                    <FormFieldSpacer />\n                                    <FormFieldSpacer />\n                                    <FormFieldSpacer />\n                                    <FormFieldSpacer />\n                                    <FormFieldSpacer />\n                                    <FormFieldSpacer />\n                                </>\n                            )}\n                            apply={(languages: SpokenLanguageDto[]) => onFieldChanged({languages})}\n                        />\n                    </KeyboardAvoidingView>\n                </ScrollView>\n            </View>\n        );\n    }\n}\n\nexport const themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        titleWrapper: {\n            width: \"100%\",\n            flexDirection: \"column\",\n            justifyContent: \"flex-start\",\n            marginBottom: 20,\n        },\n        title: {\n            fontSize: 22,\n            color: theme.text,\n        },\n        buttonSend: {\n            flex: 1,\n            backgroundColor: theme.accent,\n            marginLeft: 6,\n        },\n        screenWrapper: {\n            backgroundColor: theme.background,\n            width: \"100%\",\n        },\n        topView: {\n            backgroundColor: \"#af645d\",\n            width: \"160%\",\n            height: 260,\n            borderBottomLeftRadius: 200,\n            borderBottomRightRadius: 200,\n            paddingVertical: 50,\n            alignItems: \"center\",\n            alignSelf: \"center\",\n        },\n        scrollWrapper: {\n            width: \"100%\",\n        },\n        formWrapper: {\n            flex: 1,\n            width: \"90%\",\n            maxWidth: 600,\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            alignSelf: \"center\",\n            paddingTop: 40,\n            marginBottom: 300,\n        },\n        name: {\n            fontSize: 30,\n            color: theme.textInverted,\n            marginTop: 10,\n        },\n        university: {\n            fontSize: 14,\n            color: theme.textInverted,\n            paddingLeft: 20,\n        },\n        universityContainer: {\n            marginVertical: 5,\n        },\n        avatarAccessory: {\n            width: 40,\n            height: 40,\n            borderRadius: 20,\n            borderWidth: 0,\n            borderColor: \"transparent\",\n            shadowRadius: 0,\n            textShadowRadius: 0,\n            color: \"#444\",\n        },\n    });\n});\n\nexport default withTheme(EditProfileForm);\n","import {StackScreenProps} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport {StyleSheet, View} from \"react-native\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport {MainNavigatorTabs} from \"../navigation/types\";\nimport EditProfileForm from \"../components/forms/EditProfileForm\";\nimport {setProfileFields} from \"../state/profile/actions\";\nimport {UserProfileDto} from \"../api/dto\";\nimport {preTheme} from \"../styles/utils\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\n\nconst mapStateToProps = (state: AppState) => ({\n    user: state.profile.user,\n});\nconst reduxConnector = connect(mapStateToProps);\n\ntype TabProfileScreenProps = ConnectedProps<typeof reduxConnector> &\n    ThemeProps &\n    StackScreenProps<MainNavigatorTabs, \"TabProfile\">;\n\nclass TabProfileScreen extends React.Component<TabProfileScreenProps> {\n    render(): JSX.Element {\n        const {theme, user, dispatch} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.container}>\n                <EditProfileForm\n                    user={user}\n                    onFieldChanged={(fields: Partial<UserProfileDto>) => {\n                        dispatch(setProfileFields(fields));\n                    }}\n                ></EditProfileForm>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"flex-start\",\n            backgroundColor: theme.background,\n        },\n        title: {\n            fontSize: 20,\n            fontWeight: \"bold\",\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(TabProfileScreen));\n","import * as React from \"react\";\nimport {\n    LayoutChangeEvent,\n    LayoutRectangle,\n    Text,\n    TouchableOpacity,\n    View,\n    ViewStyle,\n    Animated,\n    StyleSheet,\n} from \"react-native\";\nimport i18n from \"i18n-js\";\nimport {Avatar, withTheme} from \"react-native-elements\";\nimport {UserProfileDto} from \"../api/dto\";\nimport {PARTNER_UNIVERSITIES, University} from \"../constants/universities\";\nimport ReAnimated, {Easing} from \"react-native-reanimated\";\nimport Swipeable from \"react-native-gesture-handler/Swipeable\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\n\n// Component props\nexport type ProfilePreviewProps = ThemeProps & {\n    profile: UserProfileDto;\n    style?: ViewStyle;\n    onExpand?: (layout: LayoutRectangle) => void;\n    onSwipeLeft?: () => void;\n    onSwipeRight?: () => void;\n};\n\n// Component state\nexport type ProfilePreviewState = {\n    expanded: boolean;\n    removed: boolean;\n    height: ReAnimated.Value<number>;\n};\n\nclass ProfilePreview extends React.Component<ProfilePreviewProps, ProfilePreviewState> {\n    layout: LayoutRectangle;\n\n    constructor(props: ProfilePreviewProps) {\n        super(props);\n        this.state = {expanded: false, removed: false, height: new ReAnimated.Value(PROFILE_PREVIEW_COLLAPSED_HEIGHT)};\n        this.layout = {x: 0, y: 0, width: 0, height: 0};\n    }\n\n    expand() {\n        // Will change fadeAnim value to 1 in 5 seconds\n        ReAnimated.timing(this.state.height, {\n            toValue: PROFILE_PREVIEW_EXPANDED_HEIGHT,\n            duration: 200,\n            easing: Easing.elastic(1.0),\n        }).start();\n    }\n\n    collapse() {\n        // Will change fadeAnim value to 0 in 5 seconds\n        ReAnimated.timing(this.state.height, {\n            toValue: PROFILE_PREVIEW_COLLAPSED_HEIGHT,\n            duration: 100,\n            easing: Easing.out(Easing.linear),\n        }).start();\n    }\n\n    remove() {\n        this.setState({...this.state, removed: true});\n        setTimeout(() => {\n            ReAnimated.timing(this.state.height, {\n                toValue: 0,\n                duration: 100,\n                easing: Easing.linear,\n            }).start();\n        }, 100);\n    }\n\n    toggleExpanded() {\n        this.setState({...this.state, expanded: !this.state.expanded});\n        if (!this.state.expanded) {\n            this.expand();\n            if (this.props.onExpand) this.props.onExpand(this.layout);\n        } else this.collapse();\n    }\n\n    render() {\n        const {theme, profile, style} = this.props;\n        const {expanded, height} = this.state;\n        const styles = themedStyles(theme);\n\n        const university = PARTNER_UNIVERSITIES.find((univ: University) => univ.key == profile.university);\n\n        return (\n            <ReAnimated.View\n                style={[styles.wrapper, style, {height: height}]}\n                onLayout={(e: LayoutChangeEvent) => {\n                    this.layout = e.nativeEvent.layout;\n                }}\n            >\n                <Swipeable\n                    containerStyle={styles.swipeableContainer}\n                    childrenContainerStyle={styles.swipeable}\n                    onSwipeableRightWillOpen={() => {\n                        if (this.props.onSwipeLeft) this.props.onSwipeLeft();\n                        this.remove();\n                    }}\n                    onSwipeableLeftWillOpen={() => {\n                        if (this.props.onSwipeRight) this.props.onSwipeRight();\n                        this.remove();\n                    }}\n                    //leftThreshold={400}\n                    //rightThreshold={300}\n                    renderRightActions={(\n                        progressAnimatedValue: Animated.AnimatedInterpolation,\n                        dragAnimatedValue: Animated.AnimatedInterpolation,\n                    ) => {\n                        return (\n                            <Animated.View style={[styles.swipeAction, styles.swipeActionRight]}>\n                                <View style={[styles.swipeActionContent, styles.swipeActionContentRight]}>\n                                    <Text style={styles.swipeActionText}>HIDE</Text>\n                                </View>\n                            </Animated.View>\n                        );\n                    }}\n                    renderLeftActions={(\n                        progressAnimatedValue: Animated.AnimatedInterpolation,\n                        dragAnimatedValue: Animated.AnimatedInterpolation,\n                    ) => {\n                        return (\n                            <View style={[styles.swipeAction, styles.swipeActionLeft]}>\n                                <View style={[styles.swipeActionContent, styles.swipeActionContentLeft]}>\n                                    <Text style={styles.swipeActionText}>MATCH</Text>\n                                </View>\n                            </View>\n                        );\n                    }}\n                    useNativeAnimations={false}\n                >\n                    <TouchableOpacity\n                        onPress={() => this.toggleExpanded()}\n                        activeOpacity={0.75}\n                        style={styles.touchable}\n                    >\n                        <View style={styles.avatarContainer}>\n                            <Avatar\n                                size={120}\n                                rounded\n                                title={(profile.firstName[0] + profile.lastName[0]).toUpperCase()}\n                                containerStyle={styles.avatar}\n                                source={\n                                    profile.avatarUri && profile.avatarUri !== \"\" ? {uri: profile.avatarUri} : undefined\n                                }\n                            ></Avatar>\n                        </View>\n                        <View style={styles.infoContainer}>\n                            <Text style={styles.name}>{profile.firstName + \" \" + profile.lastName}</Text>\n                            <Text style={styles.infoText}>{i18n.t(`universities.${profile.university}`)}</Text>\n                            <Text style={styles.infoText}>\n                                {i18n.t(`roles.${profile.staffRole ? \"staff\" : \"student\"}`)} (\n                                {profile.staffRole\n                                    ? i18n.t(`staffRoles.${profile.staffRole}`)\n                                    : i18n.t(`degrees.${profile.degree}`)}\n                                )\n                            </Text>\n                            <Text style={styles.infoText}>{i18n.t(`genders.${profile.gender}`)}</Text>\n                        </View>\n                        {/*expanded && (\n                            <View style={styles.actionContainer}>\n                                <TouchableOpacity style={styles.matchButton}>\n                                    <Text style={styles.matchButtonText}>MATCH</Text>\n                                </TouchableOpacity>\n                            </View>\n                        )*/}\n                    </TouchableOpacity>\n                </Swipeable>\n            </ReAnimated.View>\n        );\n    }\n}\n\n/*\n\n{university && (\n    <FormattedUniversity\n        containerStyle={styles.universityContainer}\n        style={styles.university}\n        university={university}\n    ></FormattedUniversity>\n)}\n\n<InputLabel>{i18n.t(\"dateOfBirth\")}</InputLabel>\n<FormattedDate date={profile.birthdate} />\n\n<Spacer></Spacer>\n<InputLabel>{i18n.t(\"gender\")}</InputLabel>\n<Text>{i18n.t(`genders.${profile.gender}`)}</Text>\n*/\n\n/*\n\n<Spacer></Spacer>\n<InputLabel>{i18n.t(\"nationality\")}</InputLabel>\n<FormattedNationality countryCode={profile.nationality} />\n*/\n\nconst sideMargin = 15;\nconst verticalSpacing = 10;\nconst PROFILE_PREVIEW_COLLAPSED_HEIGHT = 200;\nconst PROFILE_PREVIEW_EXPANDED_HEIGHT = 500;\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        wrapper: {\n            width: \"100%\",\n            overflow: \"hidden\",\n        },\n        swipeableContainer: {\n            width: \"100%\",\n            paddingHorizontal: sideMargin,\n            paddingVertical: verticalSpacing,\n        },\n        swipeable: {\n            width: \"100%\",\n            //borderBottomColor: theme.accent,\n            //borderBottomWidth: 4,\n            borderRadius: 10,\n            elevation: 1,\n            padding: 10,\n            backgroundColor: theme.background,\n        },\n        touchable: {\n            width: \"100%\",\n            height: \"100%\",\n            flexDirection: \"row\",\n        },\n        swipeAction: {\n            width: \"100%\",\n            marginHorizontal: sideMargin,\n            marginVertical: verticalSpacing,\n        },\n        swipeActionLeft: {\n            paddingRight: sideMargin * 2,\n        },\n        swipeActionRight: {\n            paddingLeft: sideMargin * 2,\n        },\n        swipeActionContent: {\n            padding: 20,\n            borderRadius: 10,\n            justifyContent: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n        },\n        swipeActionContentRight: {\n            backgroundColor: theme.accentTernary,\n            alignItems: \"flex-end\",\n        },\n        swipeActionContentLeft: {\n            backgroundColor: theme.accentSlight,\n        },\n        swipeActionText: {\n            fontSize: 24,\n            letterSpacing: 2,\n            fontFamily: \"sans-serif-thin\",\n        },\n\n        // Card content\n\n        avatarContainer: {\n            justifyContent: \"center\",\n        },\n        avatar: {\n            backgroundColor: theme.accentSecondary,\n        },\n        infoContainer: {\n            flex: 1,\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            paddingLeft: 10,\n        },\n        name: {\n            fontSize: 24,\n            letterSpacing: 0.8,\n            color: theme.text,\n        },\n        infoText: {\n            fontSize: 18,\n            color: theme.textLight,\n        },\n        /*university: {\n            fontSize: 14,\n            color: theme.text,\n        },\n        universityContainer: {\n            marginVertical: 5,\n        },*/\n        actionContainer: {\n            flexDirection: \"column\",\n            flex: 1,\n            justifyContent: \"flex-end\",\n        },\n        /*matchButton: {\n            width: \"100%\",\n            paddingVertical: 10,\n            borderRadius: 2,\n            backgroundColor: theme.accent,\n        },\n        matchButtonText: {\n            fontSize: 20,\n            letterSpacing: 2,\n            textAlign: \"center\",\n            color: theme.textInverted,\n        },*/\n    });\n});\n\nexport default withTheme(ProfilePreview);\n","import {StackScreenProps} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport {LayoutRectangle, NativeScrollEvent, NativeSyntheticEvent, ScrollView, StyleSheet, View} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {UserProfileDto} from \"../api/dto\";\nimport ProfilePreview from \"../components/ProfilePreview\";\nimport {TabMatchingParamList} from \"../navigation/types\";\nimport {fetchProfiles} from \"../state/profile/actions\";\nimport {AppState, MyThunkDispatch} from \"../state/types\";\nimport {preTheme} from \"../styles/utils\";\nimport {ThemeProps} from \"../types\";\n\nconst mapStateToProps = (state: AppState) => ({\n    profiles: state.profile.fetchedProfiles,\n    fetchingProfiles: state.profile.fetchingProfiles,\n});\nconst reduxConnector = connect(mapStateToProps);\n\n// Component props\ntype TabMatchingScreenProps = ConnectedProps<typeof reduxConnector> &\n    ThemeProps &\n    StackScreenProps<TabMatchingParamList, \"TabMatchingScreen\">;\n\n// Component state\ntype TabMatchingScreenState = {\n    hiddenProfiles: string[];\n};\n\nconst SCROLL_DISTANCE_TO_LOAD = 50;\n\nclass TabMatchingScreen extends React.Component<TabMatchingScreenProps, TabMatchingScreenState> {\n    scrollViewRef: React.RefObject<ScrollView>;\n\n    constructor(props: TabMatchingScreenProps) {\n        super(props);\n        this.state = {hiddenProfiles: []};\n        this.scrollViewRef = React.createRef<ScrollView>();\n    }\n\n    hideProfile(id: string) {\n        this.setState({...this.state, hiddenProfiles: this.state.hiddenProfiles.concat(id)});\n    }\n\n    componentDidMount() {\n        (this.props.dispatch as MyThunkDispatch)(fetchProfiles());\n    }\n\n    render(): JSX.Element {\n        const {profiles, theme, fetchingProfiles} = this.props;\n        const styles = themedStyles(theme);\n\n        console.log(this.state.hiddenProfiles);\n        const isNotHidden = (profile: UserProfileDto) => this.state.hiddenProfiles.indexOf(profile.id) == -1;\n\n        const previewComponents = profiles\n            .filter((profile) => isNotHidden(profile))\n            .map((profile: UserProfileDto) => (\n                <ProfilePreview\n                    key={profile.id}\n                    profile={profile}\n                    onExpand={(layout: LayoutRectangle) => {\n                        const scroll = this.scrollViewRef.current;\n                        if (scroll) scroll.scrollTo({y: layout.y, animated: true});\n                    }}\n                    onSwipeRight={() => {\n                        //this.hideProfile(profile.id);\n                    }}\n                    onSwipeLeft={() => {\n                        //this.hideProfile(profile.id);\n                    }}\n                    //style={{marginVertical: 10}}\n                />\n            ));\n\n        return (\n            <View style={styles.container}>\n                <ScrollView\n                    ref={this.scrollViewRef}\n                    style={styles.scroller}\n                    scrollToOverflowEnabled={true}\n                    onScroll={(e: NativeSyntheticEvent<NativeScrollEvent>) => {\n                        const {layoutMeasurement, contentOffset, contentSize} = e.nativeEvent;\n                        const distanceToBottom = contentSize.height - contentOffset.y - layoutMeasurement.height;\n                        if (!fetchingProfiles && distanceToBottom < SCROLL_DISTANCE_TO_LOAD)\n                            (this.props.dispatch as MyThunkDispatch)(fetchProfiles());\n                    }}\n                >\n                    <View style={styles.matchContainer}>{previewComponents}</View>\n                </ScrollView>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            height: \"100%\",\n        },\n        topBar: {\n            flexBasis: 90,\n            paddingTop: 40,\n            paddingHorizontal: 20,\n            width: \"100%\",\n        },\n        title: {\n            fontSize: 20,\n            fontWeight: \"bold\",\n        },\n        separator: {\n            marginVertical: 20,\n            height: 1,\n            width: \"100%\",\n        },\n        scroller: {\n            width: \"100%\",\n        },\n        matchContainer: {\n            flex: 1,\n            borderStyle: \"solid\",\n            borderColor: \"red\",\n            borderWidth: 0,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(TabMatchingScreen));\n\n/*\n\n<View style={styles.container}>\n    <View style={styles.topBar}>\n        <View style={{flexDirection: \"row\", justifyContent: \"space-between\"}}>\n            <Text style={styles.title}>Matchingg</Text>\n            <FontAwesome\n                name=\"sliders\"\n                size={30}\n                style={{paddingHorizontal: 4}}\n                onPress={() => {\n                    navigation.navigate(\"MatchFilteringScreen\");\n                }}\n            />\n        </View>\n        <View style={[styles.separator, {backgroundColor: \"#ccc\"}]} />\n    </View>\n    <View style={styles.scroller}>\n        <View style={styles.matchContainer}>\n\n        </View>\n    </View>\n</View>\n\n*/\n","import {Degree, Gender, LanguageLevel, Role, StaffRole} from \"../constants/profile-constants\";\nimport {UniversityKey} from \"../constants/universities\";\nimport {CountryCode} from \"../model/country-codes\";\n\nexport type SpokenLanguageDto = {\n    code: string;\n    level: LanguageLevel;\n};\n\nexport type UserProfileDto = {\n    id: string;\n    firstName: string;\n    lastName: string;\n    nationality: CountryCode;\n    birthdate: Date;\n    gender: Gender;\n    interests: string[];\n    avatarUri: string;\n    languages: SpokenLanguageDto[];\n    educationFields: string[];\n    staffRole?: StaffRole;\n    degree?: Degree;\n    university: UniversityKey;\n};\n\nexport type UserDto = {\n    role: Role;\n    email: string;\n    active: boolean;\n    onboarded: boolean;\n    verificationToken: string; // TODO temporary\n    profile: UserProfileDto;\n};\n\nexport type TokenDto = {\n    expiresIn: number;\n    accessToken: string;\n};\n\nexport type LoginDto = {\n    user: UserDto;\n    token: TokenDto;\n};\n\nexport type CreateProfileDtoCommon = {\n    type: Role;\n    firstName: string;\n    lastName: string;\n    gender: Gender;\n    birthdate: string;\n    nationality: CountryCode;\n    languages: SpokenLanguageDto[];\n    interests: string[];\n    profileOffers: OfferValueDto[];\n};\n\nexport type CreateProfileDtoStudent = CreateProfileDtoCommon & {\n    degree: Degree;\n};\n\nexport type CreateProfileDtoStaff = CreateProfileDtoCommon & {\n    staffRole: string;\n};\n\nexport type CreateProfileDto = CreateProfileDtoStudent | CreateProfileDtoStaff;\n\nexport enum OfferCategory {\n    Discover = \"discover\",\n    Collaborate = \"collaborate\",\n    Meet = \"meet\",\n}\n\nexport type OfferDto = {\n    id: string;\n    category: OfferCategory;\n    allowChooseRole: boolean;\n    allowChooseGender: boolean;\n    allowInterRole: boolean;\n};\n\nexport type OfferValueDto = {\n    offerId: string;\n    allowStaff: boolean;\n    allowStudent: boolean;\n    allowMale: boolean;\n    allowFemale: boolean;\n    allowOther: boolean;\n};\n\nexport type InterestDto = {\n    id: string;\n};\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../state/types\";\nimport MultiPicker, {MultiPickerProps} from \"./MultiPicker\";\nimport {PARTNER_UNIVERSITIES, University} from \"../constants/universities\";\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    //allInterests: state.profile.interests,\n    // TODO add universities here\n}));\n\nlet values: string[] = [];\n\n// Component props\nexport type MultiUniversityPickerProps = ConnectedProps<typeof reduxConnector> & {\n    universities: string[];\n    onChange?: (unis: string[]) => void;\n} & Partial<MultiPickerProps>;\n\nclass MultiUniversityPicker extends React.Component<MultiUniversityPickerProps> {\n    componentDidMount() {\n        if (values.length == 0) this.updateValues();\n    }\n\n    componentDidUpdate(oldProps: MultiUniversityPickerProps) {\n        //if (oldProps.allInterests.length != this.props.allInterests.length) this.updateValues();\n    }\n\n    updateValues() {\n        //values = this.props.allInterests.map((interest: InterestDto) => interest.id);\n        values = PARTNER_UNIVERSITIES.map((uni: University) => uni.key);\n\n        this.forceUpdate();\n    }\n\n    render(): JSX.Element {\n        const {universities, onChange, ...otherProps} = this.props;\n\n        return (\n            <MultiPicker\n                values={values}\n                genLabel={(univKey: string) => `universities.${univKey}`}\n                selected={universities}\n                onChange={(values: string[]) => {\n                    if (onChange) onChange(values);\n                }}\n                placeholder={i18n.t(\"universitiesPicker.placeholder\")}\n                multipleText={i18n.t(\"universitiesPicker.multiple\")}\n                searchablePlaceholder={i18n.t(\"universitiesPicker.searchPlaceholder\")}\n                {...otherProps}\n            />\n        );\n    }\n}\n\nexport default reduxConnector(MultiUniversityPicker);\n","import {\n    SetOfferFilterAction,\n    MATCHING_ACTION_TYPES,\n    ResetMatchingFiltersAction,\n    SetMatchingFiltersAction,\n    MatchingFiltersState,\n} from \"../types\";\n\nexport const setOfferFilter = (offerId: string, value: boolean): SetOfferFilterAction => ({\n    type: MATCHING_ACTION_TYPES.SET_OFFER_FILTER,\n    offerId,\n    value,\n});\n\nexport const setMatchingFilters = (filters: Partial<MatchingFiltersState>): SetMatchingFiltersAction => ({\n    type: MATCHING_ACTION_TYPES.SET_FILTERS,\n    filters,\n});\n\nexport const resetMatchingFilters = (): ResetMatchingFiltersAction => ({\n    type: MATCHING_ACTION_TYPES.RESET_MATCHING_FILTERS,\n});\n","import {ButtonGroupProps} from \"react-native-elements\";\nimport {Theme} from \"../types\";\n\nexport function getToggleStyleProps(nobuttonBariant: boolean, theme: Theme): Partial<ButtonGroupProps> {\n    if (nobuttonBariant) {\n        return {\n            containerStyle: {\n                backgroundColor: \"transparent\",\n                flex: 1,\n                height: 30,\n                borderWidth: 0,\n                marginHorizontal: 0,\n                marginVertical: 2,\n            },\n            innerBorderStyle: {width: 0},\n            buttonContainerStyle: {marginHorizontal: 5},\n            textStyle: {\n                color: theme.textLight,\n                opacity: 0.5,\n            },\n            /*selectedButtonStyle: {\n                backgroundColor: \"transparent\",\n                borderColor: theme.accent,\n                borderStyle: \"dashed\",\n                borderWidth: 1,\n                borderRadius: 20,\n            },*/\n            selectedButtonStyle: {\n                backgroundColor: \"transparent\",\n                borderColor: theme.accent,\n                borderStyle: \"dashed\",\n                borderBottomWidth: 1,\n            },\n            selectedTextStyle: {\n                color: theme.text,\n                opacity: 1,\n            },\n        };\n    } else {\n        return {\n            containerStyle: {\n                height: 35,\n                marginLeft: 0,\n                marginRight: 0,\n            },\n        };\n    }\n}\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {Degree, DEGREES} from \"../constants/profile-constants\";\nimport {ButtonGroup, ButtonGroupProps, withTheme} from \"react-native-elements\";\nimport {getToggleStyleProps} from \"../styles/toggles\";\nimport {ThemeProps} from \"../types\";\nimport {ViewStyle} from \"react-native\";\n\nexport type GenderToggleMultiProps = {\n    degrees: Degree[];\n    onSelect?: (degrees: Degree[]) => void;\n    noButtonVariant?: boolean;\n    style?: ViewStyle;\n} & Partial<ButtonGroupProps> &\n    ThemeProps;\n\nfunction DegreeToggleMulti(props: GenderToggleMultiProps): JSX.Element {\n    const buttonLabels = DEGREES.map((r: string) => i18n.t(`degrees.${r}`));\n    const {theme, style, degrees, noButtonVariant, onSelect, ...otherProps} = props;\n\n    const styleProps = getToggleStyleProps(noButtonVariant || false, theme);\n\n    return (\n        <ButtonGroup\n            onPress={(idx: number) => {\n                if (onSelect) {\n                    const indices: number[] = typeof idx == \"object\" ? (idx as number[]) : [idx];\n                    onSelect(indices.map((i: number) => DEGREES[i]));\n                }\n            }}\n            selectMultiple={true}\n            selectedIndexes={degrees.map((degree: Degree) => DEGREES.indexOf(degree))}\n            buttons={buttonLabels}\n            {...styleProps}\n            containerStyle={[styleProps.containerStyle, style]}\n            {...otherProps}\n        />\n    );\n}\n\nexport default withTheme(DegreeToggleMulti);\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport MultiPicker, {MultiPickerProps} from \"./MultiPicker\";\nimport {LANGUAGES_CODES} from \"../model/languages\";\n\n// Component props\nexport type MultiLanguagePickerProps = {\n    languages?: string[];\n    onChange?: (languages: string[]) => void;\n} & Partial<MultiPickerProps>;\n\nconst values = LANGUAGES_CODES;\n\nclass MultiLanguagePicker extends React.Component<MultiLanguagePickerProps> {\n    render(): JSX.Element {\n        const {languages, onChange, ...otherProps} = this.props;\n\n        return (\n            <MultiPicker\n                values={values}\n                genLabel={(languageId: string) => `languageNames.${languageId}`}\n                selected={languages}\n                onChange={(values: string[]) => {\n                    if (onChange) onChange(values);\n                }}\n                placeholder={i18n.t(\"languagePicker.placeholderMultiple\")}\n                multipleText={i18n.t(\"languagePicker.multiple\")}\n                searchablePlaceholder={i18n.t(\"languagePicker.searchPlaceholder\")}\n                {...otherProps}\n            />\n        );\n    }\n}\n\nexport default MultiLanguagePicker;\n","import * as React from \"react\";\nimport {StyleSheet, Switch, Text, View} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {OfferCategory, OfferDto} from \"../api/dto\";\nimport MultiUniversityPicker from \"../components/MultiUniversityPicker\";\nimport {setMatchingFilters, setOfferFilter} from \"../state/matching/actions\";\nimport {AppState} from \"../state/types\";\nimport {preTheme} from \"../styles/utils\";\nimport {ThemeProps} from \"../types\";\nimport i18n from \"i18n-js\";\nimport DegreeToggleMulti from \"../components/DegreeToggleMulti\";\nimport MultiLanguagePicker from \"../components/MultiLanguagePicker\";\nimport {Degree} from \"../constants/profile-constants\";\n\n// Map props from state\nconst reduxConnector = connect((state: AppState) => ({\n    offers: state.profile.offers,\n    filters: state.matching.filters,\n}));\n\n// Component props\ntype MatchFilteringScreenProps = ThemeProps & ConnectedProps<typeof reduxConnector>;\n\nfunction Separator() {\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: \"rgba(0, 0, 0, 0.1)\",\n                alignSelf: \"center\",\n                marginVertical: 20,\n            }}\n        ></View>\n    );\n}\n\nclass MatchFilteringScreen extends React.Component<MatchFilteringScreenProps> {\n    render(): JSX.Element {\n        const {theme, offers, filters, dispatch} = this.props;\n        const styles = themedStyles(theme);\n\n        const categories = Object.values(OfferCategory);\n        console.log(\"MatchFilteringScreen\", filters);\n\n        const offerSections = categories.map((category: OfferCategory) => (\n            <View key={category} style={styles.sectionContainer}>\n                <Separator></Separator>\n                <Text style={styles.sectionTitle}>{category}</Text>\n                {offers\n                    .filter((o: OfferDto) => o.category == category)\n                    .map((o: OfferDto) => (\n                        <View key={o.id} style={styles.entryContainer}>\n                            <Text style={styles.entryLabel}>{o.id}</Text>\n                            <Switch\n                                value={filters.offers[o.id] || false}\n                                onValueChange={(value: boolean) => dispatch(setOfferFilter(o.id, value))}\n                            ></Switch>\n                        </View>\n                    ))}\n            </View>\n        ));\n\n        return (\n            <View style={styles.container}>\n                <View style={styles.sectionContainer}>\n                    <Text style={styles.sectionTitle}>General</Text>\n                    <View style={styles.entryContainer}>\n                        <Text style={styles.entryLabel}>University</Text>\n                        <MultiUniversityPicker\n                            universities={filters.universities}\n                            showSelected={false}\n                            onChange={(universities: string[]) => dispatch(setMatchingFilters({universities}))}\n                        ></MultiUniversityPicker>\n                    </View>\n                    <View style={styles.entryContainer}>\n                        <Text style={styles.entryLabel}>{i18n.t(\"spokenLanguages\")}</Text>\n                        <MultiLanguagePicker\n                            languages={filters.languages}\n                            showSelected={false}\n                            onChange={(languages: string[]) => dispatch(setMatchingFilters({languages}))}\n                        ></MultiLanguagePicker>\n                    </View>\n                    <View style={styles.twoLineEntryContainer}>\n                        <Text style={styles.entryLabel}>{i18n.t(\"levelOfStudy\")}</Text>\n                        <DegreeToggleMulti\n                            degrees={filters.degrees}\n                            onSelect={(degrees: Degree[]) => dispatch(setMatchingFilters({degrees}))}\n                            style={{width: \"100%\"}}\n                        ></DegreeToggleMulti>\n                    </View>\n                </View>\n                {offerSections}\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme(() => {\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            padding: 40,\n        },\n        sectionContainer: {\n            width: \"100%\",\n        },\n        sectionTitle: {\n            fontSize: 20,\n            letterSpacing: 1,\n            marginBottom: 5,\n        },\n        entryContainer: {\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        twoLineEntryContainer: {\n            flexDirection: \"column\",\n        },\n        entryLabel: {\n            fontSize: 16,\n            marginVertical: 5,\n            marginRight: 10,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(MatchFilteringScreen));\n","import {FontAwesome, MaterialIcons} from \"@expo/vector-icons\";\nimport {createBottomTabNavigator} from \"@react-navigation/bottom-tabs\";\nimport {createStackNavigator, StackNavigationProp, StackScreenProps} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport TabNotImplementedScreen from \"../screens/TabNotImplementedScreen\";\nimport {\n    MainNavigatorTabs,\n    RootNavigatorScreens,\n    TabMessagingParamList,\n    TabMatchingParamList,\n    TabNotificationsParamList,\n    TabDiscoverParamList,\n    TabProfileParamList,\n} from \"../navigation/types\";\nimport {AppState} from \"../state/types\";\nimport themes from \"../constants/themes\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TabProfileScreen from \"../screens/TabProfileScreen\";\nimport i18n from \"i18n-js\";\nimport TabMatchingScreen from \"../screens/TabMatchingScreen\";\nimport MatchFilteringScreen from \"../screens/MatchFilteringScreen\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport store from \"../state/store\";\nimport {resetMatchingFilters} from \"../state/matching/actions\";\n\nconst TabNavigator = createBottomTabNavigator<MainNavigatorTabs>();\n\n// Map props from store\nconst mapStateToProps = (state: AppState) => ({\n    theme: themes[state.settings.theme],\n});\nconst reduxConnector = connect(mapStateToProps);\n\n// Component props\nexport type MainNavigatorProps = ConnectedProps<typeof reduxConnector> &\n    StackScreenProps<RootNavigatorScreens, \"MainScreen\">;\n\nfunction MainNavigatorComponent({theme}: MainNavigatorProps): JSX.Element {\n    return (\n        <TabNavigator.Navigator initialRouteName=\"TabDiscover\" tabBarOptions={{activeTintColor: theme.tint}}>\n            <TabNavigator.Screen\n                name=\"TabDiscover\"\n                component={TabDiscoverNavigator}\n                options={{\n                    title: i18n.t(\"tabs.discover\"),\n                    // eslint-disable-next-line react/display-name, react/prop-types\n                    tabBarIcon: ({color}) => <TabBarIcon name=\"contacts\" color={color} />,\n                }}\n            />\n            <TabNavigator.Screen\n                name=\"TabMatching\"\n                component={TabMatchingNavigator}\n                options={{\n                    title: i18n.t(\"tabs.matching\"),\n                    // eslint-disable-next-line react/display-name, react/prop-types\n                    tabBarIcon: ({color}) => <TabBarIcon name=\"notifications\" color={color} />,\n                }}\n            />\n            <TabNavigator.Screen\n                name=\"TabMessaging\"\n                component={TabMessagingNavigator}\n                options={{\n                    title: i18n.t(\"tabs.messaging\"),\n                    // eslint-disable-next-line react/display-name, react/prop-types\n                    tabBarIcon: ({color}) => <TabBarIcon name=\"notifications\" color={color} />,\n                }}\n            />\n            <TabNavigator.Screen\n                name=\"TabProfile\"\n                component={TabProfileNavigator}\n                options={{\n                    title: i18n.t(\"tabs.profile\"),\n                    // eslint-disable-next-line react/display-name, react/prop-types\n                    tabBarIcon: ({color}) => <TabBarIcon name=\"person\" color={color} />,\n                }}\n            />\n            <TabNavigator.Screen\n                name=\"TabNotifications\"\n                component={TabNotificationsNavigator}\n                options={{\n                    title: i18n.t(\"tabs.notifications\"),\n                    // eslint-disable-next-line react/display-name, react/prop-types\n                    tabBarIcon: ({color}) => <TabBarIcon name=\"notifications\" color={color} />,\n                }}\n            />\n        </TabNavigator.Navigator>\n    );\n}\n\nfunction TabBarIcon(props: {name: string; color: string}): JSX.Element {\n    return <MaterialIcons size={26} style={{marginBottom: -3}} {...props} />;\n}\n\n// Each tab has its own navigation stack.\n// Read more about this pattern here: https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabDiscoverStack = createStackNavigator<TabDiscoverParamList>();\n\nfunction TabDiscoverNavigator(): JSX.Element {\n    return (\n        <TabDiscoverStack.Navigator>\n            <TabDiscoverStack.Screen\n                name=\"TabDiscoverScreen\"\n                component={TabNotImplementedScreen}\n                options={{headerTitle: \"Discover\"}}\n            />\n        </TabDiscoverStack.Navigator>\n    );\n}\n\nconst TabMatchingStack = createStackNavigator<TabMatchingParamList>();\n\nfunction TabMatchingNavigator(): JSX.Element {\n    const filteringHeaderBackImage = (): JSX.Element => {\n        return <MaterialIcons name=\"close\" size={32} />;\n    };\n    const filteringHeaderReset = (): JSX.Element => {\n        //return <MaterialIcons name=\"refresh\" size={32} style={{paddingRight: 10}} />;\n        return (\n            <TouchableOpacity\n                style={{marginRight: 16, padding: 10}}\n                onPress={() => store.dispatch(resetMatchingFilters())}\n            >\n                <Text>reset</Text>\n            </TouchableOpacity>\n        );\n    };\n    const matchingHeaderRight = (\n        navigation: StackNavigationProp<TabMatchingParamList, \"TabMatchingScreen\">,\n    ) => (): JSX.Element => {\n        return (\n            <View style={{flexDirection: \"row\", paddingRight: 10}}>\n                <TouchableOpacity>\n                    <MaterialIcons name=\"refresh\" size={32} />\n                </TouchableOpacity>\n                <TouchableOpacity\n                    onPress={() => {\n                        navigation.navigate(\"MatchFilteringScreen\");\n                    }}\n                >\n                    <FontAwesome name=\"sliders\" size={30} style={{paddingHorizontal: 5}} />\n                </TouchableOpacity>\n            </View>\n        );\n    };\n\n    return (\n        <TabMatchingStack.Navigator>\n            <TabMatchingStack.Screen\n                name=\"TabMatchingScreen\"\n                component={TabMatchingScreen}\n                options={({navigation}) => ({\n                    headerShown: true,\n                    headerLeft: () => null,\n                    headerTitle: \"Matching\",\n                    headerTitleAlign: \"center\",\n                    headerRight: matchingHeaderRight(navigation),\n                })}\n            />\n            <TabMatchingStack.Screen\n                name=\"MatchFilteringScreen\"\n                component={MatchFilteringScreen}\n                options={{\n                    headerShown: true,\n                    headerTitle: \"Filters\",\n                    headerTitleAlign: \"center\",\n                    headerBackImage: filteringHeaderBackImage,\n                    headerRight: filteringHeaderReset,\n                }}\n            />\n        </TabMatchingStack.Navigator>\n    );\n}\n\nconst TabMessagingStack = createStackNavigator<TabMessagingParamList>();\n\nfunction TabMessagingNavigator(): JSX.Element {\n    return (\n        <TabMessagingStack.Navigator>\n            <TabMessagingStack.Screen\n                name=\"TabMessagingScreen\"\n                component={TabNotImplementedScreen}\n                options={{headerTitle: \"Tab Title\"}}\n            />\n        </TabMessagingStack.Navigator>\n    );\n}\n\nconst TabNotificationsStack = createStackNavigator<TabNotificationsParamList>();\n\nfunction TabNotificationsNavigator(): JSX.Element {\n    return (\n        <TabNotificationsStack.Navigator>\n            <TabNotificationsStack.Screen\n                name=\"TabNotificationsScreen\"\n                component={TabNotImplementedScreen}\n                options={{headerTitle: \"Tab Title\"}}\n            />\n        </TabNotificationsStack.Navigator>\n    );\n}\n\nconst TabProfileStack = createStackNavigator<TabProfileParamList>();\n\nfunction TabProfileNavigator(): JSX.Element {\n    return (\n        <TabProfileStack.Navigator>\n            <TabProfileStack.Screen\n                name=\"TabProfileScreen\"\n                component={TabProfileScreen}\n                options={{/*headerTitle: \"Profile\"*/ headerShown: false}}\n            />\n        </TabProfileStack.Navigator>\n    );\n}\n\nexport default reduxConnector(MainNavigatorComponent);\n","import {StyleSheet, TextStyle} from \"react-native\";\nimport {Theme} from \"../types\";\nimport {preTheme} from \"./utils\";\n\nexport const onboardingStyle = preTheme(() => {\n    return StyleSheet.create({\n        slideWrapper: {\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n        },\n        header: {\n            marginBottom: \"20%\",\n        },\n        slideContentWrapper: {\n            width: \"70%\",\n        },\n        slideNavWrapper: {\n            width: \"100%\",\n            flexDirection: \"row\",\n            height: 30,\n            justifyContent: \"center\",\n            position: \"absolute\",\n            bottom: 40,\n        },\n        navButton: {\n            flex: 1,\n        },\n        navButtonText: {\n            fontSize: 20,\n            textAlign: \"center\",\n        },\n        title: {\n            fontFamily: \"sans-serif-thin\",\n            fontSize: 40,\n            letterSpacing: 1.75,\n            marginBottom: 20,\n        } as TextStyle,\n        subtitle: {\n            fontSize: 18,\n            textAlign: \"justify\",\n            letterSpacing: 0.4,\n            lineHeight: 25,\n        } as TextStyle,\n    });\n});\n\nexport const tosSlideStyle = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        actionsWrapper: {\n            flexDirection: \"row\",\n            justifyContent: \"space-around\",\n        },\n        actionButton: {\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n        actionButtonTextDecline: {\n            fontSize: 16,\n            paddingHorizontal: 2,\n            textTransform: \"uppercase\",\n            letterSpacing: 1,\n            color: theme.error,\n        },\n        actionButtonTextAccept: {\n            fontSize: 16,\n            paddingHorizontal: 2,\n            textTransform: \"uppercase\",\n            letterSpacing: 1,\n            color: theme.accentSecondary,\n        },\n        readMoreText: {\n            fontSize: 16,\n            lineHeight: 20,\n            textAlign: \"justify\",\n            marginBottom: 40,\n            letterSpacing: 0.4,\n        },\n    });\n});\n","import * as React from \"react\";\nimport {Text, View, TouchableOpacity} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {onboardingStyle} from \"../../styles/onboarding\";\nimport {ThemeProps} from \"../../types\";\n\nexport type OnboardingScreenProps = {\n    index: number;\n    previous: () => void;\n    next: () => void;\n    hasNext: boolean;\n};\n\nexport type OnboardingSlideProps = {\n    title?: string;\n    subtitle?: string;\n    handleSubmit?: (e?: React.FormEvent<HTMLFormElement> | undefined) => void;\n    hideNavNext?: boolean;\n} & OnboardingScreenProps &\n    ThemeProps;\n\nclass OnboardingSlide extends React.Component<OnboardingSlideProps> {\n    render(): JSX.Element {\n        const {title, subtitle, index, hideNavNext, hasNext, handleSubmit, next, theme} = this.props;\n        const styles = onboardingStyle(theme);\n\n        const hasPrevious = index > 0;\n\n        const navigateRight = () => {\n            if (handleSubmit) handleSubmit();\n            else next();\n        };\n\n        return (\n            <View style={styles.slideWrapper}>\n                <View style={styles.slideContentWrapper}>\n                    <View style={styles.header}>\n                        {title && <Text style={styles.title}>{title}</Text>}\n                        {subtitle && <Text style={styles.subtitle}>{subtitle}</Text>}\n                    </View>\n                    {this.props.children}\n                </View>\n                <View style={styles.slideNavWrapper}>\n                    {hasPrevious && (\n                        <TouchableOpacity style={styles.navButton} onPress={() => this.props.previous()}>\n                            <Text style={styles.navButtonText}>← previous</Text>\n                        </TouchableOpacity>\n                    )}\n                    {!hideNavNext && hasNext && (\n                        <TouchableOpacity\n                            style={styles.navButton}\n                            /*onPress={() => this.props.navigation.navigate(next)}*/ onPress={navigateRight}\n                        >\n                            <Text style={styles.navButtonText}>next →</Text>\n                        </TouchableOpacity>\n                    )}\n                    {!hasNext && (\n                        <TouchableOpacity style={styles.navButton} onPress={navigateRight}>\n                            <Text style={styles.navButtonText}>finish →</Text>\n                        </TouchableOpacity>\n                    )}\n                </View>\n            </View>\n        );\n    }\n}\n\nexport default withTheme(OnboardingSlide);\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport {KeyboardAvoidingView} from \"react-native\";\nimport {FormTextInput} from \"../../components/FormTextInput\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {VALIDATOR_FIRSTNAME, VALIDATOR_LASTNAME} from \"../../validators\";\nimport {getOnboardingTextInputsStyleProps} from \"../../styles/forms\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport {ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    firstname: VALIDATOR_FIRSTNAME,\n    lastname: VALIDATOR_LASTNAME,\n});\n\ntype OnboardingNameScreenProps = ConnectedProps<typeof reduxConnector> & ThemeProps & OnboardingScreenProps;\n\ntype OnboardingNameFormState = {\n    firstname: string;\n    lastname: string;\n};\n\nclass OnboardingNameScreen extends React.Component<OnboardingNameScreenProps> {\n    submit(values: OnboardingNameFormState) {\n        this.props.dispatch(setOnboardingValues(values));\n        this.props.next();\n    }\n\n    render(): JSX.Element {\n        const {theme, onboardingState} = this.props;\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingNameFormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingNameFormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingNameFormState>) => {\n                    const {handleSubmit, values, errors, touched, handleChange, handleBlur} = formikProps;\n                    const textInputProps = (field: string) => ({\n                        field,\n                        value: (values as {[key: string]: string})[field],\n                        error: (errors as {[key: string]: string | undefined})[field],\n                        touched: (touched as {[key: string]: boolean | undefined})[field],\n                        handleChange,\n                        handleBlur,\n                        ...getOnboardingTextInputsStyleProps(theme),\n                    });\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(\"onboarding.name.title\")}\n                            subtitle={i18n.t(\"onboarding.name.subtitle\")}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <KeyboardAvoidingView behavior=\"padding\" keyboardVerticalOffset={200}>\n                                <FormTextInput\n                                    {...textInputProps(\"firstname\")}\n                                    label={i18n.t(\"firstname\")}\n                                    autoCompleteType=\"name\"\n                                />\n\n                                <FormTextInput\n                                    {...textInputProps(\"lastname\")}\n                                    label={i18n.t(\"lastname\")}\n                                    autoCompleteType=\"name\"\n                                />\n                            </KeyboardAvoidingView>\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nexport default reduxConnector(withTheme(OnboardingNameScreen));\n","import * as React from \"react\";\nimport {View, StyleSheet} from \"react-native\";\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\nimport BirthDatePicker from \"./BirthDatePicker\";\nimport {FormattedDate} from \"./FormattedDate\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\n// Component props\nexport type BirthDateControlProps = ThemeProps & {\n    date?: Date;\n    onSelect?: (date: Date) => void;\n    onHide?: () => void;\n};\n\nexport type BirthDateControlState = {\n    open: boolean;\n};\n\nclass BirthDateControl extends React.Component<BirthDateControlProps, BirthDateControlState> {\n    constructor(props: BirthDateControlProps) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n    }\n\n    showModal(): void {\n        if (!this.state.open) this.setState({...this.state, open: true});\n    }\n\n    hideModal(): void {\n        if (this.state.open) {\n            this.setState({...this.state, open: false});\n            if (this.props.onHide) this.props.onHide();\n        }\n    }\n\n    render(): JSX.Element {\n        const {date, onSelect, theme} = this.props;\n        const {open} = this.state;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.wrapper}>\n                <TouchableOpacity style={[styles.button, date ? styles.buttonOk : {}]} onPress={() => this.showModal()}>\n                    {date && <FormattedDate style={styles.dateText} date={date} />}\n                    {/*!date && <Text>Click to change value</Text>*/}\n                </TouchableOpacity>\n                <BirthDatePicker\n                    date={date}\n                    open={open}\n                    onSelect={(value: Date) => {\n                        if (onSelect) onSelect(value);\n                    }}\n                    onHide={() => this.hideModal()}\n                ></BirthDatePicker>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        wrapper: {\n            width: \"100%\",\n        },\n        button: {\n            width: \"100%\",\n            height: 60,\n            borderRadius: 0,\n            borderWidth: 0,\n            borderBottomWidth: 1,\n            borderBottomColor: theme.accentTernary,\n            backgroundColor: \"transparent\",\n            justifyContent: \"center\",\n        },\n        buttonOk: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.okay,\n        },\n        dateText: {\n            fontSize: 20,\n        },\n    });\n});\n\nexport default withTheme(BirthDateControl);\n","import * as React from \"react\";\nimport {TouchableOpacity, View, StyleSheet} from \"react-native\";\nimport NationalityPicker from \"./NationalityPicker\";\nimport {FormattedNationality} from \"./FormattedNationality\";\nimport {CountryCode} from \"../model/country-codes\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {preTheme} from \"../styles/utils\";\nimport {withTheme} from \"react-native-elements\";\n\n// Component props\nexport type NationalityControlProps = ThemeProps & {\n    nationality?: CountryCode;\n    onSelect?: (countryCode: CountryCode) => void;\n    onHide?: () => void;\n};\n\n// Component state\nexport type NationalityControlState = {\n    open: boolean;\n};\n\nclass NationalityControl extends React.Component<NationalityControlProps, NationalityControlState> {\n    constructor(props: NationalityControlProps) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n    }\n\n    showModal(): void {\n        if (!this.state.open) this.setState({...this.state, open: true});\n    }\n\n    hideModal(): void {\n        if (this.state.open) {\n            this.setState({...this.state, open: false});\n            if (this.props.onHide) this.props.onHide();\n        }\n    }\n\n    render(): JSX.Element {\n        const {onSelect, onHide, nationality, theme} = this.props;\n        const {open} = this.state;\n        const styles = themedStyles(theme);\n\n        return (\n            <View style={styles.wrapper}>\n                <TouchableOpacity\n                    style={[styles.button, nationality ? styles.buttonOk : {}]}\n                    onPress={() => this.showModal()}\n                >\n                    {nationality && <FormattedNationality countryCode={nationality} style={styles.nationality} />}\n                    {/*!date && <Text>Click to change value</Text>*/}\n                </TouchableOpacity>\n                <NationalityPicker\n                    nationality={this.props.nationality}\n                    open={open}\n                    onSelect={(country: CountryCode) => {\n                        if (onSelect) onSelect(country);\n                    }}\n                    onHide={() => {\n                        this.hideModal();\n                        if (onHide) onHide();\n                    }}\n                ></NationalityPicker>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        wrapper: {\n            width: \"100%\",\n        },\n        button: {\n            width: \"100%\",\n            height: 60,\n            borderRadius: 0,\n            borderWidth: 0,\n            borderBottomWidth: 1,\n            borderBottomColor: theme.accentTernary,\n            backgroundColor: \"transparent\",\n            justifyContent: \"center\",\n        },\n        buttonOk: {\n            borderBottomWidth: 2,\n            borderBottomColor: theme.okay,\n        },\n        nationality: {\n            fontSize: 20,\n        },\n    });\n});\n\nexport default withTheme(NationalityControl);\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {\n    VALIDATOR_ONBOARDING_BIRTHDATE,\n    VALIDATOR_ONBOARDING_GENDER,\n    VALIDATOR_ONBOARDING_NATIONALITY,\n} from \"../../validators\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport InputLabel from \"../../components/InputLabel\";\nimport BirthDateControl from \"../../components/BirthDateControl\";\nimport InputErrorText from \"../../components/InputErrorText\";\nimport {Gender} from \"../../constants/profile-constants\";\nimport {GenderToggle} from \"../../components/GenderToggle\";\nimport NationalityControl from \"../../components/NationalityControl\";\nimport {CountryCode} from \"../../model/country-codes\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    birthdate: VALIDATOR_ONBOARDING_BIRTHDATE,\n    gender: VALIDATOR_ONBOARDING_GENDER,\n    nationality: VALIDATOR_ONBOARDING_NATIONALITY,\n});\n\ntype OnboardingPersonalInfoScreenProps = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\ntype OnboardingPersonalInfoFormState = {\n    birthdate: Date | null;\n    gender: Gender | null;\n    nationality: CountryCode | null;\n};\n\nclass OnboardingPersonalInfoScreen extends React.Component<OnboardingPersonalInfoScreenProps> {\n    submit(values: OnboardingPersonalInfoFormState) {\n        if (values.birthdate && values.gender && values.nationality) {\n            this.props.dispatch(\n                setOnboardingValues({\n                    birthdate: values.birthdate,\n                    gender: values.gender,\n                    nationality: values.nationality,\n                }),\n            );\n            this.props.next();\n        }\n    }\n\n    render(): JSX.Element {\n        const {onboardingState} = this.props;\n\n        const spacing = 30;\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingPersonalInfoFormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingPersonalInfoFormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingPersonalInfoFormState>) => {\n                    const {handleSubmit, values, errors, touched, setFieldValue} = formikProps;\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(\"onboarding.personalInfo.title\")}\n                            //subtitle={i18n.t(\"onboarding.personalInfo.subtitle\")}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <InputLabel>{i18n.t(\"dateOfBirth\")}</InputLabel>\n                            <BirthDateControl\n                                date={values.birthdate || undefined}\n                                onSelect={(birthdate: Date) => setFieldValue(\"birthdate\", birthdate)}\n                            />\n                            {touched.birthdate && <InputErrorText error={errors.birthdate}></InputErrorText>}\n\n                            <InputLabel style={{marginTop: spacing}}>{i18n.t(\"nationality\")}</InputLabel>\n                            <NationalityControl\n                                nationality={values.nationality || undefined}\n                                onSelect={(nationality: CountryCode) => setFieldValue(\"nationality\", nationality)}\n                            />\n                            {touched.nationality && <InputErrorText error={errors.nationality}></InputErrorText>}\n\n                            <InputLabel style={{marginTop: spacing}}>{i18n.t(\"gender\")}</InputLabel>\n                            <GenderToggle\n                                gender={values.gender}\n                                onSelect={(gender: Gender) => setFieldValue(\"gender\", gender)}\n                            />\n                            {touched.gender && <InputErrorText error={errors.gender}></InputErrorText>}\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingPersonalInfoScreen);\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {VALIDATOR_ONBOARDING_LANGUAGES} from \"../../validators\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport InputLabel from \"../../components/InputLabel\";\nimport InputErrorText from \"../../components/InputErrorText\";\nimport SpokenLanguagesInput from \"../../components/SpokenLanguagesInput\";\nimport {SpokenLanguageDto} from \"../../api/dto\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    languages: VALIDATOR_ONBOARDING_LANGUAGES,\n});\n\ntype OnboardingLanguageScreenProps = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\ntype OnboardingLanguageScreenState = {\n    hasErrors: boolean;\n};\n\ntype OnboardingLanguageFormState = {\n    languages: SpokenLanguageDto[];\n};\n\nclass OnboardingLanguageScreen extends React.Component<OnboardingLanguageScreenProps, OnboardingLanguageScreenState> {\n    constructor(props: OnboardingLanguageScreenProps) {\n        super(props);\n        this.state = {hasErrors: false};\n    }\n\n    submit(values: OnboardingLanguageFormState) {\n        if (!this.state.hasErrors) {\n            this.props.dispatch(setOnboardingValues({languages: values.languages}));\n            this.props.next();\n        }\n    }\n\n    render(): JSX.Element {\n        const {onboardingState} = this.props;\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingLanguageFormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingLanguageFormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingLanguageFormState>) => {\n                    const {handleSubmit, values, errors, touched, setFieldValue} = formikProps;\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(\"onboarding.language.title\")}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <InputLabel style={{marginBottom: 6}}>{i18n.t(\"spokenLanguages\")}</InputLabel>\n                            <SpokenLanguagesInput\n                                languages={values.languages}\n                                onChange={(languages: SpokenLanguageDto[], hasErrors: boolean) => {\n                                    setFieldValue(\"languages\", languages);\n                                    this.setState({...this.state, hasErrors});\n                                }}\n                            ></SpokenLanguagesInput>\n                            {touched.languages && <InputErrorText error={errors.languages}></InputErrorText>}\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingLanguageScreen);\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {VALIDATOR_ONBOARDING_LANGUAGES} from \"../../validators\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport InputLabel from \"../../components/InputLabel\";\nimport InputErrorText from \"../../components/InputErrorText\";\nimport InterestsPicker from \"../../components/InterestsPicker\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    languages: VALIDATOR_ONBOARDING_LANGUAGES,\n});\n\ntype OnboardingInterestsScreenProps = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\ntype OnboardingInterestsScreenState = {\n    hasErrors: boolean;\n};\n\ntype OnboardingInterestsFormState = {\n    interestIds: string[];\n};\n\nclass OnboardingInterestsScreen extends React.Component<\n    OnboardingInterestsScreenProps,\n    OnboardingInterestsScreenState\n> {\n    constructor(props: OnboardingInterestsScreenProps) {\n        super(props);\n        this.state = {hasErrors: false};\n    }\n\n    submit(values: OnboardingInterestsFormState) {\n        if (!this.state.hasErrors) {\n            this.props.dispatch(setOnboardingValues({interestIds: values.interestIds}));\n            this.props.next();\n        }\n    }\n\n    render(): JSX.Element {\n        const {onboardingState} = this.props;\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingInterestsFormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingInterestsFormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingInterestsFormState>) => {\n                    const {handleSubmit, values, errors, touched, setFieldValue} = formikProps;\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(\"onboarding.interests.title\")}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <InputLabel style={{marginBottom: 6}}>{i18n.t(\"chooseInterests\")}</InputLabel>\n                            <InterestsPicker\n                                interests={values.interestIds}\n                                onChange={(interestIds: string[], hasErrors: boolean) => {\n                                    setFieldValue(\"interestIds\", interestIds);\n                                    this.setState({...this.state, hasErrors});\n                                }}\n                            ></InterestsPicker>\n                            {touched.interestIds && <InputErrorText error={errors.interestIds}></InputErrorText>}\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingInterestsScreen);\n","import * as React from \"react\";\nimport {Text, ViewStyle, StyleSheet} from \"react-native\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\nimport {Role} from \"../../constants/profile-constants\";\nimport i18n from \"i18n-js\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {Theme, ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\nimport store from \"../../state/store\";\nimport {preTheme} from \"../../styles/utils\";\n\ntype OnboardingRoleScreenProps = ThemeProps & OnboardingScreenProps;\n\ntype OnboardingRoleFormState = {\n    role: Role;\n};\n\nclass OnboardingRoleScreen extends React.Component<OnboardingRoleScreenProps> {\n    submit(values: OnboardingRoleFormState) {\n        store.dispatch(setOnboardingValues(values));\n        this.props.next();\n    }\n\n    render(): JSX.Element {\n        const {theme} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <OnboardingSlide title={i18n.t(\"onboarding.role.title\")} hideNavNext={true} {...this.props}>\n                <TouchableOpacity style={styles.roleButton} onPress={() => this.submit({role: \"student\"})}>\n                    <MaterialIcons name={\"school\"} style={styles.roleButtonIconStudent}></MaterialIcons>\n                    <Text style={styles.roleButtonTextStudent}>{i18n.t(\"roles.student\")}</Text>\n                </TouchableOpacity>\n                <TouchableOpacity style={styles.roleButton} onPress={() => this.submit({role: \"staff\"})}>\n                    <MaterialIcons name={\"group\"} style={styles.roleButtonIconStaff}></MaterialIcons>\n                    <Text style={styles.roleButtonTextStaff}>{i18n.t(\"roles.staff\")}</Text>\n                </TouchableOpacity>\n            </OnboardingSlide>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    const studentColor = theme.accent;\n    const staffColor = theme.okay;\n\n    const common = StyleSheet.create({\n        roleButtonText: {\n            fontFamily: \"sans-serif-thin\",\n            fontSize: 40,\n            letterSpacing: 1.75,\n        },\n        roleButtonIcon: {\n            fontSize: 50,\n            marginRight: 15,\n        },\n    });\n\n    return StyleSheet.create({\n        roleButton: {\n            height: 100,\n            flexDirection: \"row\",\n            alignItems: \"center\",\n        } as ViewStyle,\n        roleButtonTextStaff: {\n            ...common.roleButtonText,\n            color: staffColor,\n        },\n        roleButtonTextStudent: {\n            ...common.roleButtonText,\n            color: studentColor,\n        },\n        roleButtonIconStaff: {\n            ...common.roleButtonIcon,\n            color: staffColor,\n        },\n        roleButtonIconStudent: {\n            ...common.roleButtonIcon,\n            color: studentColor,\n        },\n    });\n});\n\nexport default withTheme(OnboardingRoleScreen);\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {Gender, GENDERS} from \"../constants/profile-constants\";\nimport {ButtonGroup, ButtonGroupProps, withTheme} from \"react-native-elements\";\nimport {getToggleStyleProps} from \"../styles/toggles\";\nimport {ThemeProps} from \"../types\";\n\nexport type GenderToggleMultiProps = {\n    genders: Gender[];\n    onSelect?: (genders: Gender[]) => void;\n    noButtonVariant?: boolean;\n} & Partial<ButtonGroupProps> &\n    ThemeProps;\n\nfunction GenderToggleMulti(props: GenderToggleMultiProps): JSX.Element {\n    const buttonLabels = GENDERS.map((r: string) => i18n.t(`genders.${r}`));\n    const {theme, genders, noButtonVariant, onSelect, ...otherProps} = props;\n\n    return (\n        <ButtonGroup\n            onPress={(idx: number) => {\n                if (onSelect) {\n                    const indices: number[] = typeof idx == \"object\" ? (idx as number[]) : [idx];\n                    onSelect(indices.map((i: number) => GENDERS[i]));\n                }\n            }}\n            selectMultiple={true}\n            selectedIndexes={genders.map((gender: Gender) => GENDERS.indexOf(gender))}\n            buttons={buttonLabels}\n            {...getToggleStyleProps(noButtonVariant || false, theme)}\n            {...otherProps}\n        />\n    );\n}\n\nexport default withTheme(GenderToggleMulti);\n","import * as React from \"react\";\nimport i18n from \"i18n-js\";\nimport {Role, ROLES} from \"../constants/profile-constants\";\nimport {ButtonGroup, ButtonGroupProps, withTheme} from \"react-native-elements\";\nimport {getToggleStyleProps} from \"../styles/toggles\";\nimport {ThemeProps} from \"../types\";\n\nexport type RoleToggleMultiProps = {\n    roles: Role[];\n    onSelect?: (roles: Role[]) => void;\n    noButtonVariant?: boolean;\n} & Partial<ButtonGroupProps> &\n    ThemeProps;\n\nfunction RoleToggleMulti(props: RoleToggleMultiProps): JSX.Element {\n    const {theme, roles, noButtonVariant, onSelect, ...otherProps} = props;\n    const buttonLabels = ROLES.map((r: string) => i18n.t(`roles.${r}`));\n\n    return (\n        <ButtonGroup\n            onPress={(idx: number) => {\n                if (onSelect) {\n                    const indices: number[] = typeof idx == \"object\" ? (idx as number[]) : [idx];\n                    onSelect(indices.map((i: number) => ROLES[i]));\n                }\n            }}\n            selectMultiple={true}\n            selectedIndexes={roles.map((role: Role) => ROLES.indexOf(role))}\n            buttons={buttonLabels}\n            {...getToggleStyleProps(noButtonVariant || false, theme)}\n            {...otherProps}\n        />\n    );\n}\n\nexport default withTheme(RoleToggleMulti);\n","import {StyleSheet} from \"react-native\";\nimport {preTheme} from \"./utils\";\n\nexport const tooltipStyles = preTheme(() => {\n    return StyleSheet.create({\n        text: {\n            textAlign: \"justify\",\n            paddingVertical: 10,\n        },\n        container: {\n            alignContent: \"center\",\n            borderRadius: 4,\n            width: undefined, // override default width so it adjusts based on the content\n            maxWidth: 240,\n            paddingHorizontal: 10,\n        },\n    });\n});\n","import React from \"react\";\nimport {Text} from \"react-native\";\nimport {Tooltip, withTheme} from \"react-native-elements\";\nimport {tooltipStyles} from \"../styles/tooltips\";\nimport {ThemeProps} from \"../types\";\n\n// Component props\nexport type CustomTooltipProps = {\n    text: string;\n} & ThemeProps;\n\n// Component state\nexport type CustomTooltipState = {\n    height: number | undefined;\n};\n\nclass CustomTooltip extends React.Component<CustomTooltipProps, CustomTooltipState> {\n    constructor(props: CustomTooltipProps) {\n        super(props);\n        this.state = {height: undefined};\n    }\n\n    render(): JSX.Element {\n        const {height} = this.state;\n        const {theme, text} = this.props;\n        const styles = tooltipStyles(theme);\n\n        return (\n            <Tooltip\n                popover={\n                    <Text\n                        style={styles.text}\n                        onLayout={(e) => {\n                            this.setState({\n                                ...this.state,\n                                height: e.nativeEvent.layout.height,\n                            });\n                        }}\n                    >\n                        {text}\n                    </Text>\n                }\n                backgroundColor={theme.accentSlight}\n                containerStyle={styles.container}\n                height={height}\n            >\n                {this.props.children}\n            </Tooltip>\n        );\n    }\n}\n\nexport default withTheme(CustomTooltip);\n","import React from \"react\";\nimport {Text, View, StyleSheet, ViewStyle} from \"react-native\";\nimport {OfferDto, OfferValueDto} from \"../api/dto\";\nimport {Gender, Role} from \"../constants/profile-constants\";\nimport GenderToggleMulti from \"./GenderToggleMulti\";\nimport RoleToggleMulti from \"./RoleToggleMulti\";\nimport i18n from \"i18n-js\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport CustomTooltip from \"./CustomTooltip\";\nimport {Theme, ThemeProps} from \"../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../styles/utils\";\n\nexport type OfferControlProps = {\n    offer: OfferDto;\n    value: OfferValueDto;\n    onChange?: (value: Partial<OfferValueDto>) => void;\n    style?: ViewStyle;\n} & ThemeProps;\n\nclass OfferControl extends React.Component<OfferControlProps> {\n    offerValueChange(value: Partial<OfferValueDto>): void {\n        const {onChange} = this.props;\n        if (onChange) onChange(value);\n    }\n\n    render(): JSX.Element {\n        const {theme, offer, value, style} = this.props;\n        const styles = themedStyles(theme);\n\n        const genders: Gender[] = [];\n        if (value.allowFemale) genders.push(\"female\");\n        if (value.allowMale) genders.push(\"male\");\n        if (value.allowOther) genders.push(\"other\");\n\n        const roles: Role[] = [];\n        if (value.allowStaff) roles.push(\"staff\");\n        if (value.allowStudent) roles.push(\"student\");\n\n        return (\n            <View style={[styles.wrapper, style]}>\n                <View style={styles.titleWrapper}>\n                    <CustomTooltip text={i18n.t(`offers.${offer.id}.help`)}>\n                        <MaterialIcons style={styles.helpIcon} name=\"help\"></MaterialIcons>\n                    </CustomTooltip>\n                    <Text style={styles.offerName}>{i18n.t(`offers.${offer.id}.name`)}</Text>\n                </View>\n                <View style={styles.buttonsWrapper}>\n                    {offer.allowChooseGender && (\n                        <GenderToggleMulti\n                            noButtonVariant={true}\n                            genders={genders}\n                            onSelect={(selected: Gender[]) =>\n                                this.offerValueChange({\n                                    allowFemale: selected.indexOf(\"female\") != -1,\n                                    allowMale: selected.indexOf(\"male\") != -1,\n                                    allowOther: selected.indexOf(\"other\") != -1,\n                                })\n                            }\n                        />\n                    )}\n                    {offer.allowChooseRole && (\n                        <RoleToggleMulti\n                            noButtonVariant={true}\n                            roles={roles}\n                            onSelect={(selected: Role[]) =>\n                                this.offerValueChange({\n                                    allowStaff: selected.indexOf(\"staff\") != -1,\n                                    allowStudent: selected.indexOf(\"student\") != -1,\n                                })\n                            }\n                        />\n                    )}\n                </View>\n            </View>\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        wrapper: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n        },\n        titleWrapper: {\n            flexDirection: \"row\",\n        },\n        offerName: {\n            textTransform: \"uppercase\",\n            letterSpacing: 1,\n        },\n        helpIcon: {\n            fontSize: 20,\n            marginRight: 5,\n            color: theme.textLight,\n        },\n        buttonsWrapper: {\n            flexDirection: \"row\",\n        },\n    });\n});\n\nexport default withTheme(OfferControl);\n\n/*\n<Tooltip\n    popover={\n        <Text\n            style={tooltipStyles.text}\n            onLayout={(e) => {\n                console.log(e.nativeEvent.layout.height);\n                this.forceUpdate();\n            }}\n        >\n            {i18n.t(`offers.${offer.id}.help`)}\n        </Text>\n    }\n    backgroundColor={theme.accentSlight}\n    containerStyle={tooltipStyles.container}\n    height={100}\n>\n    <MaterialIcons style={styles.helpIcon} name=\"help\"></MaterialIcons>\n</Tooltip>\n*/\n","import * as React from \"react\";\nimport {AnyAction} from \"redux\";\nimport {\n    CreateProfileDto,\n    CreateProfileDtoCommon,\n    CreateProfileDtoStaff,\n    CreateProfileDtoStudent,\n    OfferCategory,\n    OfferDto,\n    OfferValueDto,\n} from \"../../api/dto\";\nimport OfferControl from \"../../components/OfferControl\";\nimport {setOnboardingOfferValue} from \"../../state/auth/actions\";\nimport {createProfile} from \"../../state/profile/actions\";\nimport store from \"../../state/store\";\nimport {MyThunkDispatch, OnboardingState} from \"../../state/types\";\n\nexport function createOfferControls(\n    offers: OfferDto[],\n    category: OfferCategory,\n    onboardingState: OnboardingState,\n    dispatch: React.Dispatch<AnyAction>,\n): JSX.Element[] {\n    return offers\n        .filter((offer: OfferDto) => offer.category == category)\n        .map((offer: OfferDto, i: number) => (\n            <OfferControl\n                key={i}\n                offer={offer}\n                value={\n                    onboardingState.offerValues[offer.id] || {\n                        offerId: offer.id,\n                        allowFemale: true,\n                        allowMale: true,\n                        allowOther: true,\n                        allowStudent: true,\n                        allowStaff: true,\n                    }\n                }\n                onChange={(value: Partial<OfferValueDto>) => dispatch(setOnboardingOfferValue(offer.id, value))}\n                style={{marginVertical: 20}}\n            />\n        ));\n}\n\nfunction onboardingStateToDto(onboardingState: OnboardingState): CreateProfileDto | null {\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n    const base: CreateProfileDtoCommon = {\n        type: onboardingState.role!,\n        firstName: onboardingState.firstname!,\n        lastName: onboardingState.lastname!,\n        gender: onboardingState.gender!,\n        birthdate: onboardingState.birthdate!.toJSON(),\n        nationality: onboardingState.nationality!,\n        languages: onboardingState.languages,\n        interests: onboardingState.interestIds,\n        profileOffers: Object.values(onboardingState.offerValues),\n    };\n\n    if (onboardingState.role == \"student\") {\n        return {\n            ...base,\n            degree: onboardingState.degree,\n        } as CreateProfileDtoStudent;\n    } else if (onboardingState.role == \"staff\") {\n        return {\n            ...base,\n            staffRole: onboardingState.staffRole,\n        } as CreateProfileDtoStaff;\n    }\n    return null;\n}\n\nexport function finishOnboarding(onboardingState: OnboardingState): void {\n    const createProfileDto = onboardingStateToDto(onboardingState);\n    if (createProfileDto) (store.dispatch as MyThunkDispatch)(createProfile(createProfileDto));\n}\n","import * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {createOfferControls} from \"./helpers\";\nimport {OfferCategory} from \"../../api/dto\";\n\n// State-linked props\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n    offers: state.profile.offers,\n}));\n\n// Component props\ntype OnboardingOfferScreen1Props = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\nclass OnboardingOfferScreen1 extends React.Component<OnboardingOfferScreen1Props> {\n    render(): JSX.Element {\n        const {onboardingState, offers, dispatch} = this.props;\n\n        return (\n            <OnboardingSlide\n                title={i18n.t(\"onboarding.offers1.title\")}\n                subtitle={i18n.t(\"onboarding.offers1.subtitle\")}\n                {...this.props}\n            >\n                {createOfferControls(offers, OfferCategory.Meet, onboardingState, dispatch)}\n            </OnboardingSlide>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingOfferScreen1);\n","import * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {createOfferControls} from \"./helpers\";\nimport {OfferCategory} from \"../../api/dto\";\n\n// State-linked props\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n    offers: state.profile.offers,\n}));\n\n// Component props\ntype OnboardingOfferScreen2Props = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\nclass OnboardingOfferScreen2 extends React.Component<OnboardingOfferScreen2Props> {\n    render(): JSX.Element {\n        const {onboardingState, offers, dispatch} = this.props;\n\n        return (\n            <OnboardingSlide\n                title={i18n.t(\"onboarding.offers2.title\")}\n                subtitle={i18n.t(\"onboarding.offers2.subtitle\")}\n                {...this.props}\n            >\n                {createOfferControls(offers, OfferCategory.Discover, onboardingState, dispatch)}\n            </OnboardingSlide>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingOfferScreen2);\n","import * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {createOfferControls, finishOnboarding} from \"./helpers\";\nimport {OfferCategory} from \"../../api/dto\";\n\n// State-linked props\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n    offers: state.profile.offers,\n}));\n\n// Component props\ntype OnboardingOfferScreen3Props = ConnectedProps<typeof reduxConnector> & OnboardingScreenProps;\n\nclass OnboardingOfferScreen3 extends React.Component<OnboardingOfferScreen3Props> {\n    render(): JSX.Element {\n        const {onboardingState, offers, dispatch} = this.props;\n\n        return (\n            <OnboardingSlide\n                title={i18n.t(\"onboarding.offers3.title\")}\n                subtitle={i18n.t(\"onboarding.offers3.subtitle\")}\n                handleSubmit={() => finishOnboarding(onboardingState)}\n                {...this.props}\n            >\n                {createOfferControls(offers, OfferCategory.Collaborate, onboardingState, dispatch)}\n            </OnboardingSlide>\n        );\n    }\n}\n\nexport default reduxConnector(OnboardingOfferScreen3);\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport InputLabel from \"../../components/InputLabel\";\nimport InputErrorText from \"../../components/InputErrorText\";\nimport {Degree, StaffRole, STAFF_ROLES} from \"../../constants/profile-constants\";\nimport DegreeToggle from \"../../components/DegreeToggle\";\nimport EducationFieldPicker from \"../../components/EducationFieldPicker\";\nimport {TouchableOpacity, Text, StyleSheet} from \"react-native\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {VALIDATOR_ONBOARDING_DEGREE} from \"../../validators\";\nimport {Theme, ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../../styles/utils\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    degree: VALIDATOR_ONBOARDING_DEGREE,\n});\n\ntype OnboardingRoleSpecificScreen1Props = ConnectedProps<typeof reduxConnector> & ThemeProps & OnboardingScreenProps;\n\ntype OnboardingRoleSpecificScreen1FormState = {\n    degree: Degree;\n    staffRole: StaffRole | null;\n};\n\nclass OnboardingRoleSpecificScreen1 extends React.Component<OnboardingRoleSpecificScreen1Props> {\n    submit(values: Partial<OnboardingRoleSpecificScreen1FormState>) {\n        this.props.dispatch(setOnboardingValues(values));\n        this.props.next();\n    }\n\n    studentRender(): JSX.Element {\n        const {onboardingState, theme} = this.props;\n        const styles = studentThemedStyles(theme);\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingRoleSpecificScreen1FormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingRoleSpecificScreen1FormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingRoleSpecificScreen1FormState>) => {\n                    const {handleSubmit, values, errors, touched, setFieldValue} = formikProps;\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(`onboarding.roleSpecific1.student.title`)}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <InputLabel style={styles.label}>{i18n.t(\"levelOfStudy\")}</InputLabel>\n                            <DegreeToggle\n                                degree={values.degree}\n                                onUpdate={(degree?: Degree) => setFieldValue(\"degree\", degree)}\n                            />\n                            {touched.degree && <InputErrorText error={errors.degree}></InputErrorText>}\n\n                            <InputLabel style={styles.label}>{i18n.t(\"fieldsOfEducation\")}</InputLabel>\n                            <EducationFieldPicker></EducationFieldPicker>\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n\n    staffRender(): JSX.Element {\n        const {theme} = this.props;\n        const styles = staffThemedStyles(theme);\n\n        const icons = [\"school\", \"library-books\", \"help\", \"account-balance\", \"build\", \"verified-user\"];\n\n        const buttons = STAFF_ROLES.map((sr: string, i: number) => (\n            <TouchableOpacity key={i} style={styles.button} onPress={() => this.submit({staffRole: sr as StaffRole})}>\n                <MaterialIcons name={icons[i]} style={styles.buttonIcon}></MaterialIcons>\n                <Text style={styles.buttonText}>{i18n.t(`staffRoles.${sr}`)}</Text>\n            </TouchableOpacity>\n        ));\n\n        return (\n            <OnboardingSlide title={i18n.t(\"onboarding.roleSpecific1.staff.title\")} hideNavNext={true} {...this.props}>\n                {buttons}\n            </OnboardingSlide>\n        );\n    }\n    /*\n\n        <InputLabel style={{marginTop: spacing}}>{i18n.t(\"staffPosition\")}</InputLabel>\n        <StaffRoleToggle\n            staffRole={values.staffRole}\n            onSelect={(staffRole: StaffRole) => setFieldValue(\"staffRole\", staffRole)}\n        />\n        {touched.staffRole && <InputErrorText error={errors.staffRole}></InputErrorText>}\n    */\n\n    render(): JSX.Element {\n        const {onboardingState} = this.props;\n        const isStudent = onboardingState.role == \"student\";\n\n        return (\n            <>\n                {isStudent && this.studentRender()}\n                {!isStudent && this.staffRender()}\n            </>\n        );\n    }\n}\n\nexport const studentThemedStyles = preTheme(() => {\n    return StyleSheet.create({\n        label: {\n            marginTop: 30,\n        },\n    });\n});\n\nexport const staffThemedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        button: {\n            height: 60,\n            flexDirection: \"row\",\n            alignItems: \"center\",\n        },\n        buttonText: {\n            fontFamily: \"sans-serif-thin\",\n            fontSize: 25,\n            letterSpacing: 1.25,\n            color: theme.text,\n        },\n        buttonIcon: {\n            fontSize: 30,\n            marginRight: 10,\n            color: theme.accent,\n        },\n    });\n});\n\nexport default reduxConnector(withTheme(OnboardingRoleSpecificScreen1));\n","import {Formik, FormikProps} from \"formik\";\nimport * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport i18n from \"i18n-js\";\nimport * as Yup from \"yup\";\nimport {\n    VALIDATOR_ONBOARDING_BIRTHDATE,\n    VALIDATOR_ONBOARDING_GENDER,\n    VALIDATOR_ONBOARDING_NATIONALITY,\n} from \"../../validators\";\nimport {AppState} from \"../../state/types\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {setOnboardingValues} from \"../../state/auth/actions\";\nimport InputLabel from \"../../components/InputLabel\";\nimport InputErrorText from \"../../components/InputErrorText\";\nimport {Gender} from \"../../constants/profile-constants\";\nimport {GenderToggle} from \"../../components/GenderToggle\";\nimport {CountryCode} from \"../../model/country-codes\";\nimport {ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\n\nconst reduxConnector = connect((state: AppState) => ({\n    onboardingState: state.auth.onboarding,\n}));\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    birthdate: VALIDATOR_ONBOARDING_BIRTHDATE,\n    gender: VALIDATOR_ONBOARDING_GENDER,\n    nationality: VALIDATOR_ONBOARDING_NATIONALITY,\n});\n\ntype OnboardingRoleSpecificScreen2Props = ConnectedProps<typeof reduxConnector> & ThemeProps & OnboardingScreenProps;\n\ntype OnboardingRoleSpecificScreen2FormState = {\n    birthdate: Date | null;\n    gender: Gender | null;\n    nationality: CountryCode | null;\n};\n\nclass OnboardingRoleSpecificScreen2 extends React.Component<OnboardingRoleSpecificScreen2Props> {\n    submit(values: OnboardingRoleSpecificScreen2FormState) {\n        if (values.birthdate && values.gender && values.nationality) {\n            this.props.dispatch(\n                setOnboardingValues({\n                    birthdate: values.birthdate,\n                    gender: values.gender,\n                    nationality: values.nationality,\n                }),\n            );\n            this.props.next();\n        }\n    }\n\n    render(): JSX.Element {\n        const {onboardingState} = this.props;\n\n        const spacing = 30;\n\n        return (\n            <Formik\n                initialValues={onboardingState as OnboardingRoleSpecificScreen2FormState}\n                validationSchema={VALIDATION_SCHEMA}\n                validateOnChange={true}\n                validateOnBlur={false}\n                onSubmit={(values: OnboardingRoleSpecificScreen2FormState) => this.submit(values)}\n            >\n                {(formikProps: FormikProps<OnboardingRoleSpecificScreen2FormState>) => {\n                    const {handleSubmit, values, errors, touched, setFieldValue} = formikProps;\n\n                    return (\n                        <OnboardingSlide\n                            title={i18n.t(\"role-specific screen 2\")}\n                            //title={i18n.t(\"onboarding.collaborate.title\")}\n                            //subtitle={i18n.t(\"onboarding.collaborate.subtitle\")}\n                            handleSubmit={handleSubmit}\n                            {...this.props}\n                        >\n                            <InputLabel style={{marginTop: spacing}}>{i18n.t(\"gender\")}</InputLabel>\n                            <GenderToggle\n                                gender={values.gender}\n                                onSelect={(gender: Gender) => setFieldValue(\"gender\", gender)}\n                            />\n                            {touched.gender && <InputErrorText error={errors.gender}></InputErrorText>}\n                        </OnboardingSlide>\n                    );\n                }}\n            </Formik>\n        );\n    }\n}\n\nexport default reduxConnector(withTheme(OnboardingRoleSpecificScreen2));\n","import React from \"react\";\nimport {Modal, TouchableOpacity, View, ViewStyle, StyleSheet} from \"react-native\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../../styles/utils\";\nimport {Theme, ThemeProps} from \"../../types\";\n\nexport type CustomModalProps = ThemeProps & {\n    onHide?: () => void;\n    renderContent: (hide: () => void) => JSX.Element;\n    modalViewStyle?: ViewStyle;\n};\n\ntype CustomModalState = {\n    modalVisible: boolean;\n};\n\nclass CustomModal extends React.Component<CustomModalProps, CustomModalState> {\n    constructor(props: CustomModalProps) {\n        super(props);\n        this.state = {modalVisible: true};\n    }\n\n    setModalVisible(b: boolean): void {\n        this.setState({...this.state, modalVisible: b});\n        if (!b && this.props.onHide) this.props.onHide();\n    }\n\n    render(): JSX.Element {\n        const {theme, modalViewStyle} = this.props;\n        const {modalVisible} = this.state;\n        const styles = themedStyles(theme);\n\n        return (\n            <Modal animationType=\"fade\" transparent={true} visible={modalVisible}>\n                <TouchableOpacity\n                    style={styles.centeredView}\n                    activeOpacity={1.0}\n                    onPress={() => this.setModalVisible(false)}\n                >\n                    <View style={[styles.modalView, modalViewStyle]}>\n                        {this.props.renderContent(() => this.setModalVisible(false))}\n                    </View>\n                </TouchableOpacity>\n            </Modal>\n        );\n    }\n}\n\nexport const themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        centeredView: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"rgba(0,0,0,0.05)\",\n        },\n        modalView: {\n            width: \"80%\",\n            maxWidth: 300,\n            margin: 20,\n            borderRadius: 3,\n            paddingVertical: 20,\n            paddingHorizontal: 30,\n            alignItems: \"center\",\n            shadowColor: \"#000\",\n            shadowOffset: {\n                width: 0,\n                height: 2,\n            },\n            shadowOpacity: 0.25,\n            shadowRadius: 3.84,\n            elevation: 5,\n            backgroundColor: theme.background,\n        },\n    });\n});\n\nexport default withTheme(CustomModal);\n","import React from \"react\";\nimport {Text, TouchableHighlight, View, StyleSheet} from \"react-native\";\nimport {rootNavigate} from \"../../navigation/utils\";\nimport CustomModal, {CustomModalProps} from \"./CustomModal\";\nimport i18n from \"i18n-js\";\nimport {Theme, ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\nimport {preTheme} from \"../../styles/utils\";\n\nexport type TOSDeclinedModalProps = ThemeProps & Partial<CustomModalProps>;\n\nclass TOSDeclinedModal extends React.Component<TOSDeclinedModalProps> {\n    render() {\n        const {theme, ...otherProps} = this.props;\n        const styles = themedStyles(theme);\n\n        return (\n            <CustomModal\n                {...otherProps}\n                renderContent={(hide: () => void) => (\n                    <>\n                        <Text style={styles.text}>\n                            {i18n.t(\"tos.modal.disclaimer1\")}\n                            {\"\\n\\n\"}\n                            {i18n.t(\"tos.modal.disclaimer2\")}\n                        </Text>\n                        <View style={styles.actionButtonsWrapper}>\n                            <TouchableHighlight\n                                style={[styles.actionButton, styles.actionButtonCancel]}\n                                onPress={() => hide()}\n                            >\n                                <Text style={[styles.actionText]}>{i18n.t(\"cancel\")}</Text>\n                            </TouchableHighlight>\n                            <TouchableHighlight\n                                style={[styles.actionButton, styles.actionButtonDecline]}\n                                onPress={() => {\n                                    hide();\n                                    rootNavigate(\"LoginScreen\");\n                                }}\n                            >\n                                <Text style={styles.actionText}>{i18n.t(\"tos.decline\")}</Text>\n                            </TouchableHighlight>\n                        </View>\n                    </>\n                )}\n            />\n        );\n    }\n}\n\nconst themedStyles = preTheme((theme: Theme) => {\n    return StyleSheet.create({\n        actionButtonsWrapper: {\n            width: \"100%\",\n            flexDirection: \"row\",\n            marginTop: 20,\n            justifyContent: \"space-evenly\",\n        },\n        actionButton: {\n            width: 110,\n            maxWidth: \"40%\",\n            borderRadius: 3,\n            paddingVertical: 10,\n            elevation: 2,\n        },\n        actionButtonCancel: {\n            backgroundColor: theme.accentSecondary,\n        },\n        actionButtonDecline: {\n            backgroundColor: theme.error,\n        },\n        actionText: {\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            color: theme.textInverted,\n        },\n        text: {\n            fontSize: 16,\n            textAlign: \"justify\",\n        },\n    });\n});\n\nexport default withTheme(TOSDeclinedModal);\n","import * as React from \"react\";\nimport {Text, TextProps} from \"react-native\";\n\n// Component props\nexport type TextLinkProps = {\n    text: string;\n} & TextProps;\n\nfunction TextLink(props: React.PropsWithChildren<TextLinkProps>): JSX.Element {\n    const {text, ...textProps} = props;\n\n    return (\n        <Text {...textProps} style={[textProps ? textProps.style : {}, {color: \"#2e78b7\"}]}>\n            {text}\n        </Text>\n    );\n}\n\nexport default TextLink;\n","import * as React from \"react\";\nimport OnboardingSlide from \"./OnboardingSlide\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {tosSlideStyle} from \"../../styles/onboarding\";\nimport TOSDeclinedModal from \"../../components/modals/TOSDeclinedModal\";\nimport i18n from \"i18n-js\";\nimport TextLink from \"../../components/TextLink\";\nimport {OnboardingScreenProps, ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\n\n// Component props\ntype OnboardingTosScreenProps = ThemeProps & OnboardingScreenProps;\n\n// Component state\ntype OnboardingTosScreenState = {\n    declined: boolean;\n};\n\nclass OnboardingTosScreen extends React.Component<OnboardingTosScreenProps, OnboardingTosScreenState> {\n    constructor(props: OnboardingTosScreenProps) {\n        super(props);\n        this.state = {declined: false};\n    }\n\n    decline() {\n        this.setState({...this.state, declined: true});\n    }\n\n    render(): JSX.Element {\n        const {theme, next} = this.props;\n        const styles = tosSlideStyle(theme);\n\n        return (\n            <OnboardingSlide\n                title={i18n.t(\"onboarding.tos.title\")}\n                subtitle={i18n.t(\"onboarding.tos.subtitle\")}\n                hideNavNext={true}\n                {...this.props}\n            >\n                <Text style={styles.readMoreText}>\n                    {i18n.t(\"tos.readMore\")[0]}\n                    <TextLink onPress={() => console.log(\"press\")} text={i18n.t(\"tos.readMore\")[1]} />\n                    {i18n.t(\"tos.readMore\")[2]}\n                </Text>\n\n                <View style={styles.actionsWrapper}>\n                    <TouchableOpacity style={styles.actionButton} onPress={() => this.decline()}>\n                        <Text style={styles.actionButtonTextDecline}>{i18n.t(\"tos.decline\")}</Text>\n                        <MaterialIcons name=\"close\" style={styles.actionButtonTextDecline} />\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.actionButton} onPress={() => next()}>\n                        <Text style={styles.actionButtonTextAccept}>{i18n.t(\"tos.accept\")}</Text>\n                        <MaterialIcons name=\"check\" style={styles.actionButtonTextAccept} />\n                    </TouchableOpacity>\n                </View>\n\n                {this.state.declined && (\n                    <TOSDeclinedModal onHide={() => this.setState({...this.state, declined: false})}></TOSDeclinedModal>\n                )}\n            </OnboardingSlide>\n        );\n    }\n}\n\nexport default withTheme(OnboardingTosScreen);\n","import * as React from \"react\";\nimport OnboardingSlide, {OnboardingScreenProps} from \"./OnboardingSlide\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport {tosSlideStyle} from \"../../styles/onboarding\";\nimport TOSDeclinedModal from \"../../components/modals/TOSDeclinedModal\";\nimport i18n from \"i18n-js\";\nimport TextLink from \"../../components/TextLink\";\nimport {ThemeProps} from \"../../types\";\nimport {withTheme} from \"react-native-elements\";\n\n// Component props\ntype OnboardingPrivacyScreenProps = ThemeProps & OnboardingScreenProps;\n\n// Component state\ntype OnboardingPrivacyScreenState = {\n    declined: boolean;\n};\n\nclass OnboardingPrivacyScreen extends React.Component<OnboardingPrivacyScreenProps, OnboardingPrivacyScreenState> {\n    constructor(props: OnboardingPrivacyScreenProps) {\n        super(props);\n        this.state = {declined: false};\n    }\n\n    decline() {\n        this.setState({...this.state, declined: true});\n    }\n\n    render(): JSX.Element {\n        const {theme, next} = this.props;\n        const styles = tosSlideStyle(theme);\n\n        return (\n            <OnboardingSlide\n                title={i18n.t(\"onboarding.privacy.title\")}\n                subtitle={i18n.t(\"onboarding.privacy.subtitle\")}\n                hideNavNext={true}\n                {...this.props}\n            >\n                <Text style={styles.readMoreText}>\n                    {i18n.t(\"privacy.readMore\")[0]}\n                    <TextLink onPress={() => console.log(\"press\")} text={i18n.t(\"privacy.readMore\")[1]} />\n                    {i18n.t(\"privacy.readMore\")[2]}\n                </Text>\n\n                <View style={styles.actionsWrapper}>\n                    <TouchableOpacity style={styles.actionButton} onPress={() => this.decline()}>\n                        <Text style={styles.actionButtonTextDecline}>{i18n.t(\"tos.decline\")}</Text>\n                        <MaterialIcons name=\"close\" style={styles.actionButtonTextDecline} />\n                    </TouchableOpacity>\n                    <TouchableOpacity style={styles.actionButton} onPress={() => next()}>\n                        <Text style={styles.actionButtonTextAccept}>{i18n.t(\"tos.accept\")}</Text>\n                        <MaterialIcons name=\"check\" style={styles.actionButtonTextAccept} />\n                    </TouchableOpacity>\n                </View>\n\n                {this.state.declined && (\n                    <TOSDeclinedModal onHide={() => this.setState({...this.state, declined: false})}></TOSDeclinedModal>\n                )}\n            </OnboardingSlide>\n        );\n    }\n}\n\nexport default withTheme(OnboardingPrivacyScreen);\n","import {OnboardingScreens} from \"../../navigation/types\";\nimport OnboardingNameScreen from \"./OnboardingNameScreen\";\nimport OnboardingPersonalInfoScreen from \"./OnboardingPersonalInfoScreen\";\nimport OnboardingLanguageScreen from \"./OnboardingLanguageScreen\";\nimport OnboardingInterestsScreen from \"./OnboardingInterestsScreen\";\nimport OnboardingRoleScreen from \"./OnboardingRoleScreen\";\nimport OnboardingOffersScreen1 from \"./OnboardingOffersScreen1\";\nimport OnboardingOffersScreen2 from \"./OnboardingOffersScreen2\";\nimport OnboardingOffersScreen3 from \"./OnboardingOffersScreen3\";\nimport OnboardingRoleSpecificScreen1 from \"./OnboardingRoleSpecificScreen1\";\nimport OnboardingRoleSpecificScreen2 from \"./OnboardingRoleSpecificScreen2\";\nimport OnboardingTosScreen from \"./OnboardingTosScreen\";\nimport OnboardingPrivacyScreen from \"./OnboardingPrivacyScreen\";\n\nexport const ONBOARDING_SCREENS = {\n    OnboardingNameScreen,\n    OnboardingPersonalInfoScreen,\n    OnboardingLanguageScreen,\n    OnboardingInterestsScreen,\n    OnboardingRoleScreen,\n    OnboardingRoleSpecificScreen1,\n    OnboardingRoleSpecificScreen2,\n    OnboardingOffersScreen1,\n    OnboardingOffersScreen2,\n    OnboardingOffersScreen3,\n    OnboardingTosScreen,\n    OnboardingPrivacyScreen,\n};\n\nexport const ONBOARDING_ORDER: (keyof OnboardingScreens)[] = [\n    \"OnboardingTosScreen\",\n    \"OnboardingPrivacyScreen\",\n    \"OnboardingNameScreen\",\n    \"OnboardingPersonalInfoScreen\",\n    \"OnboardingLanguageScreen\",\n    \"OnboardingInterestsScreen\",\n    \"OnboardingRoleScreen\",\n    \"OnboardingRoleSpecificScreen1\",\n    //\"OnboardingRoleSpecificScreen2\",\n    \"OnboardingOffersScreen2\",\n    \"OnboardingOffersScreen3\",\n    \"OnboardingOffersScreen1\",\n];\n","import * as React from \"react\";\nimport {OnboardingScreens} from \"../navigation/types\";\nimport {createMaterialTopTabNavigator, MaterialTopTabScreenProps} from \"@react-navigation/material-top-tabs\";\nimport {ONBOARDING_ORDER, ONBOARDING_SCREENS} from \"../screens/onboarding\";\n\nconst OnboardingStack = createMaterialTopTabNavigator<OnboardingScreens>();\n\nexport default function OnboardingNavigator(): JSX.Element {\n    const screens = ONBOARDING_ORDER.map((name: keyof OnboardingScreens, i: number) => {\n        const ComponentClass = ONBOARDING_SCREENS[name];\n        const Wrapper = (props: MaterialTopTabScreenProps<OnboardingScreens>): JSX.Element => (\n            <ComponentClass\n                next={() => {\n                    if (i < ONBOARDING_ORDER.length - 1) props.navigation.navigate(ONBOARDING_ORDER[i + 1]);\n                }}\n                previous={() => {\n                    if (i > 0) props.navigation.navigate(ONBOARDING_ORDER[i - 1]);\n                }}\n                index={i}\n                hasNext={i < ONBOARDING_ORDER.length - 1}\n                {...props}\n            />\n        );\n\n        return <OnboardingStack.Screen key={i} name={name} component={Wrapper} />;\n    });\n    return (\n        <OnboardingStack.Navigator\n            initialRouteName={ONBOARDING_ORDER[0]}\n            tabBarOptions={{showLabel: false, showIcon: false}}\n            tabBar={() => <></>}\n            springConfig={{\n                stiffness: 500,\n                damping: 2000,\n                mass: 5,\n            }}\n            swipeEnabled={false}\n        >\n            {screens}\n        </OnboardingStack.Navigator>\n    );\n}\n","import {NavigationContainer, DefaultTheme, DarkTheme} from \"@react-navigation/native\";\nimport {createStackNavigator} from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport {ColorSchemeName} from \"react-native\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport ValidateEmailScreen from \"../screens/ValidateEmailScreen\";\nimport ValidationEmailSentScreen from \"../screens/ValidationEmailSentScreen\";\nimport {RootNavigatorScreens} from \"../navigation/types\";\nimport LinkingConfiguration from \"./linking-config\";\nimport LoginNavigator from \"./LoginNavigator\";\nimport MainNavigator from \"./MainNavigator\";\nimport OnboardingNavigator from \"./OnboardingNavigator\";\nimport {rootNavigationRef} from \"./utils\";\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootNavigatorScreens>();\n\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({colorScheme}: {colorScheme: ColorSchemeName}): JSX.Element {\n    return (\n        <NavigationContainer\n            ref={rootNavigationRef}\n            linking={LinkingConfiguration}\n            theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n        >\n            <Stack.Navigator screenOptions={{headerShown: false}}>\n                <Stack.Screen name=\"LoginScreen\" component={LoginNavigator} options={{title: \"Login\"}} />\n                <Stack.Screen name=\"ValidationEmailSentScreen\" component={ValidationEmailSentScreen} />\n                <Stack.Screen name=\"MainScreen\" component={MainNavigator} />\n                <Stack.Screen name=\"ValidateEmailScreen\" component={ValidateEmailScreen} />\n                <Stack.Screen name=\"OnboardingScreen\" component={OnboardingNavigator} />\n                <Stack.Screen name=\"NotFoundScreen\" component={NotFoundScreen} options={{title: \"Oops!\"}} />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n","import React from \"react\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"../../state/types\";\nimport themes from \"../../constants/themes\";\nimport {ThemeProvider} from \"react-native-elements\";\n\n// Map props from store\nconst reduxConnector = connect((state: AppState) => ({\n    currentTheme: state.settings.theme,\n}));\nexport type ConnectedThemeProviderProps = ConnectedProps<typeof reduxConnector>;\n\n/**\n * This provider receives the current theme from the store and passes it down to all\n * children (direct or indirect) that are exported using withTheme(<component>).\n */\nclass ConnectedThemeProvider extends React.Component<ConnectedThemeProviderProps> {\n    render(): JSX.Element {\n        const {children, currentTheme} = this.props;\n        return (\n            <ThemeProvider key={currentTheme} theme={themes[currentTheme]}>\n                {children}\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default reduxConnector(ConnectedThemeProvider);\n","import {StatusBar} from \"expo-status-bar\";\nimport {registerRootComponent} from \"expo\";\nimport React from \"react\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport {Provider} from \"react-redux\";\nimport configureLocalization from \"./localization\";\nimport {YellowBox} from \"react-native\";\nimport {SafeAreaProvider} from \"react-native-safe-area-context\";\nimport ConnectedThemeProvider from \"./components/providers/ConnectedThemeProvider\";\nimport store from \"./state/store\";\n\n// YellowBox.ignoreWarnings([\"Require cycle\"]);\nYellowBox.ignoreWarnings([\"VirtualizedLists should never be nested\"]); // TODO: Remove when fixed\n\nfunction App() {\n    const isLoadingComplete = useCachedResources();\n    const colorScheme = useColorScheme();\n    configureLocalization();\n\n    if (!isLoadingComplete) {\n        return null;\n    } else {\n        return (\n            <SafeAreaProvider>\n                <Provider store={store}>\n                    <ConnectedThemeProvider>\n                        <Navigation colorScheme={colorScheme} />\n                        <StatusBar />\n                    </ConnectedThemeProvider>\n                </Provider>\n            </SafeAreaProvider>\n        );\n    }\n}\n\nexport default registerRootComponent(App);\n","import {FontAwesome, Ionicons} from \"@expo/vector-icons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as React from \"react\";\nimport {loadProfileInterests, loadProfileOffers} from \"../state/profile/actions\";\nimport store from \"../state/store\";\nimport {MyThunkDispatch} from \"../state/types\";\n\nexport default function useCachedResources(): boolean {\n    const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n    // Load any resources or data that we need prior to rendering the app\n    React.useEffect(() => {\n        async function loadResourcesAndDataAsync() {\n            try {\n                SplashScreen.preventAutoHideAsync();\n\n                // Start loading profile offers\n                // TODO show something if the backend couldn't be reached\n                // TODO store in AsyncStorage so the data doesn't need to be fetched every time (maybe use versioning so it can be updated when needed)\n                (store.dispatch as MyThunkDispatch)(loadProfileOffers());\n\n                // Start loading profile interests\n                (store.dispatch as MyThunkDispatch)(loadProfileInterests());\n\n                // Load fonts\n                await Font.loadAsync({\n                    ...Ionicons.font,\n                    ...FontAwesome.font,\n                    \"space-mono\": require(\"../../assets/fonts/SpaceMono-Regular.ttf\"),\n                });\n            } catch (e) {\n                // We might want to provide this error information to an error reporting service\n                console.warn(e);\n            } finally {\n                setLoadingComplete(true);\n                SplashScreen.hideAsync();\n            }\n        }\n\n        loadResourcesAndDataAsync();\n    }, []);\n\n    return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme(): string {\n    return \"light\";\n}\n"],"sourceRoot":""}